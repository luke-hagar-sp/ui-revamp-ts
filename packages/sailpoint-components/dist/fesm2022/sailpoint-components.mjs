import * as i3 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i5 from '@angular/material/button';
import { MatButtonModule } from '@angular/material/button';
import * as i6$4 from '@angular/material/card';
import { MatCardModule } from '@angular/material/card';
import * as i6 from '@angular/material/icon';
import { MatIconModule } from '@angular/material/icon';
import * as i8$2 from '@angular/material/toolbar';
import { MatToolbarModule } from '@angular/material/toolbar';
import * as i0 from '@angular/core';
import { Injectable, Inject, ViewEncapsulation, Component, EventEmitter, Output, Input, HostListener, ViewChild, inject } from '@angular/core';
import * as i1 from '@angular/material/dialog';
import { MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';
import * as i9 from '@angular/material/paginator';
import { MatPaginatorModule, MatPaginator } from '@angular/material/paginator';
import * as i8 from '@angular/material/progress-spinner';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import * as i6$3 from '@angular/material/table';
import { MatTableModule, MatTableDataSource } from '@angular/material/table';
import * as i6$1 from '@angular/material/tooltip';
import { MatTooltipModule } from '@angular/material/tooltip';
import * as Prism from 'prismjs';
import 'prismjs/components/prism-json';
import * as i1$1 from '@angular/forms';
import { FormsModule, Validators, ReactiveFormsModule, FormControl, FormBuilder } from '@angular/forms';
import * as i6$2 from '@angular/material/form-field';
import { MatFormFieldModule, MatFormField } from '@angular/material/form-field';
import * as i8$1 from '@angular/material/input';
import { MatInputModule, MatInput } from '@angular/material/input';
import * as i2 from '@angular/cdk/drag-drop';
import { moveItemInArray, DragDropModule } from '@angular/cdk/drag-drop';
import * as i1$2 from '@angular/router';
import { RouterModule } from '@angular/router';
import * as i10 from '@angular/material/sort';
import { MatSortModule } from '@angular/material/sort';
import { BehaviorSubject, Subject, takeUntil, from, catchError, of, switchMap, finalize } from 'rxjs';
import { MatTabsModule } from '@angular/material/tabs';
import * as i10$1 from '@angular/material/divider';
import { MatDividerModule } from '@angular/material/divider';
import * as d3 from 'd3';
import * as i4 from '@angular/material/snack-bar';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import * as i11 from '@angular/material/select';
import { MatSelectModule } from '@angular/material/select';
import { Uid } from 'sequential-workflow-designer';
import * as i7 from 'sequential-workflow-designer-angular';
import { SequentialWorkflowDesignerModule } from 'sequential-workflow-designer-angular';
import { EditorProvider } from 'sequential-workflow-editor';
import { createStepModel, createStringValueModel, createChoiceValueModel, createNullableVariableValueModel, createBooleanValueModel, createNumberValueModel, createRootModel, createDefinitionModel } from 'sequential-workflow-editor-model';
import * as i17 from '@angular/material/badge';
import { MatBadgeModule } from '@angular/material/badge';
import * as i13 from '@angular/material/slide-toggle';
import { MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule } from '@angular/material/slide-toggle';
import { completionKeymap } from '@codemirror/autocomplete';
import { indentWithTab } from '@codemirror/commands';
import { StreamLanguage, foldKeymap } from '@codemirror/language';
import { velocity } from '@codemirror/legacy-modes/mode/velocity';
import { searchKeymap } from '@codemirror/search';
import { EditorState } from '@codemirror/state';
import { oneDark } from '@codemirror/theme-one-dark';
import { keymap } from '@codemirror/view';
import { EditorView, basicSetup } from 'codemirror';
import { smoothy } from 'thememirror';
import { isEqual, cloneDeep } from 'lodash-es';
import * as i9$1 from '@angular/material/chips';
import { MatChipsModule } from '@angular/material/chips';
import * as i3$1 from '@angular/material/expansion';
import { MatExpansionModule } from '@angular/material/expansion';
import * as i9$2 from '@angular/material/list';
import { MatListModule } from '@angular/material/list';
import { MatProgressBarModule } from '@angular/material/progress-bar';
import { MatStepperModule } from '@angular/material/stepper';
import { takeUntil as takeUntil$1, debounceTime, distinctUntilChanged, switchMap as switchMap$1, catchError as catchError$1 } from 'rxjs/operators';
import * as i1$3 from '@angular/common/http';

/// <reference path="../global.ts" />
class SailPointSDKService {
    electronAPI;
    constructor() {
        if (window.electronAPI) {
            this.electronAPI = window.electronAPI;
        }
        else {
            console.error('Electron API is not available');
        }
    }
    getAccessModelMetadataAttribute(requestParameters) {
        return this.electronAPI.getAccessModelMetadataAttribute(requestParameters);
    }
    getAccessModelMetadataAttributeValue(requestParameters) {
        return this.electronAPI.getAccessModelMetadataAttributeValue(requestParameters);
    }
    listAccessModelMetadataAttribute(requestParameters = {}) {
        return this.electronAPI.listAccessModelMetadataAttribute(requestParameters);
    }
    listAccessModelMetadataAttributeValue(requestParameters) {
        return this.electronAPI.listAccessModelMetadataAttributeValue(requestParameters);
    }
    createAccessProfile(requestParameters) {
        return this.electronAPI.createAccessProfile(requestParameters);
    }
    deleteAccessProfile(requestParameters) {
        return this.electronAPI.deleteAccessProfile(requestParameters);
    }
    deleteAccessProfilesInBulk(requestParameters) {
        return this.electronAPI.deleteAccessProfilesInBulk(requestParameters);
    }
    getAccessProfile(requestParameters) {
        return this.electronAPI.getAccessProfile(requestParameters);
    }
    getAccessProfileEntitlements(requestParameters) {
        return this.electronAPI.getAccessProfileEntitlements(requestParameters);
    }
    listAccessProfiles(requestParameters = {}) {
        return this.electronAPI.listAccessProfiles(requestParameters);
    }
    patchAccessProfile(requestParameters) {
        return this.electronAPI.patchAccessProfile(requestParameters);
    }
    updateAccessProfilesInBulk(requestParameters) {
        return this.electronAPI.updateAccessProfilesInBulk(requestParameters);
    }
    approveAccessRequest(requestParameters) {
        return this.electronAPI.approveAccessRequest(requestParameters);
    }
    forwardAccessRequest(requestParameters) {
        return this.electronAPI.forwardAccessRequest(requestParameters);
    }
    getAccessRequestApprovalSummary(requestParameters = {}) {
        return this.electronAPI.getAccessRequestApprovalSummary(requestParameters);
    }
    listAccessRequestApprovers(requestParameters) {
        return this.electronAPI.listAccessRequestApprovers(requestParameters);
    }
    listCompletedApprovals(requestParameters = {}) {
        return this.electronAPI.listCompletedApprovals(requestParameters);
    }
    listPendingApprovals(requestParameters = {}) {
        return this.electronAPI.listPendingApprovals(requestParameters);
    }
    rejectAccessRequest(requestParameters) {
        return this.electronAPI.rejectAccessRequest(requestParameters);
    }
    getAccessRequestIdentityMetrics(requestParameters) {
        return this.electronAPI.getAccessRequestIdentityMetrics(requestParameters);
    }
    approveBulkAccessRequest(requestParameters) {
        return this.electronAPI.approveBulkAccessRequest(requestParameters);
    }
    cancelAccessRequest(requestParameters) {
        return this.electronAPI.cancelAccessRequest(requestParameters);
    }
    cancelAccessRequestInBulk(requestParameters) {
        return this.electronAPI.cancelAccessRequestInBulk(requestParameters);
    }
    closeAccessRequest(requestParameters) {
        return this.electronAPI.closeAccessRequest(requestParameters);
    }
    createAccessRequest(requestParameters) {
        return this.electronAPI.createAccessRequest(requestParameters);
    }
    getAccessRequestConfig() {
        return this.electronAPI.getAccessRequestConfig();
    }
    getEntitlementDetailsForIdentity(requestParameters) {
        return this.electronAPI.getEntitlementDetailsForIdentity(requestParameters);
    }
    listAccessRequestStatus(requestParameters = {}) {
        return this.electronAPI.listAccessRequestStatus(requestParameters);
    }
    listAdministratorsAccessRequestStatus(requestParameters = {}) {
        return this.electronAPI.listAdministratorsAccessRequestStatus(requestParameters);
    }
    loadAccountSelections(requestParameters) {
        return this.electronAPI.loadAccountSelections(requestParameters);
    }
    setAccessRequestConfig(requestParameters) {
        return this.electronAPI.setAccessRequestConfig(requestParameters);
    }
    getAccountActivity(requestParameters) {
        return this.electronAPI.getAccountActivity(requestParameters);
    }
    listAccountActivities(requestParameters = {}) {
        return this.electronAPI.listAccountActivities(requestParameters);
    }
    getAccountAggregationStatus(requestParameters) {
        return this.electronAPI.getAccountAggregationStatus(requestParameters);
    }
    getUsagesByAccountId(requestParameters) {
        return this.electronAPI.getUsagesByAccountId(requestParameters);
    }
    createAccount(requestParameters) {
        return this.electronAPI.createAccount(requestParameters);
    }
    deleteAccount(requestParameters) {
        return this.electronAPI.deleteAccount(requestParameters);
    }
    deleteAccountAsync(requestParameters) {
        return this.electronAPI.deleteAccountAsync(requestParameters);
    }
    disableAccount(requestParameters) {
        return this.electronAPI.disableAccount(requestParameters);
    }
    disableAccountForIdentity(requestParameters) {
        return this.electronAPI.disableAccountForIdentity(requestParameters);
    }
    disableAccountsForIdentities(requestParameters) {
        return this.electronAPI.disableAccountsForIdentities(requestParameters);
    }
    enableAccount(requestParameters) {
        return this.electronAPI.enableAccount(requestParameters);
    }
    enableAccountForIdentity(requestParameters) {
        return this.electronAPI.enableAccountForIdentity(requestParameters);
    }
    enableAccountsForIdentities(requestParameters) {
        return this.electronAPI.enableAccountsForIdentities(requestParameters);
    }
    getAccount(requestParameters) {
        return this.electronAPI.getAccount(requestParameters);
    }
    getAccountEntitlements(requestParameters) {
        return this.electronAPI.getAccountEntitlements(requestParameters);
    }
    listAccounts(requestParameters = {}) {
        return this.electronAPI.listAccounts(requestParameters);
    }
    putAccount(requestParameters) {
        return this.electronAPI.putAccount(requestParameters);
    }
    submitReloadAccount(requestParameters) {
        return this.electronAPI.submitReloadAccount(requestParameters);
    }
    unlockAccount(requestParameters) {
        return this.electronAPI.unlockAccount(requestParameters);
    }
    updateAccount(requestParameters) {
        return this.electronAPI.updateAccount(requestParameters);
    }
    getDiscoveredApplications(requestParameters = {}) {
        return this.electronAPI.getDiscoveredApplications(requestParameters);
    }
    getManualDiscoverApplicationsCsvTemplate() {
        return this.electronAPI.getManualDiscoverApplicationsCsvTemplate();
    }
    sendManualDiscoverApplicationsCsvTemplate(requestParameters) {
        return this.electronAPI.sendManualDiscoverApplicationsCsvTemplate(requestParameters);
    }
    getApproval(requestParameters) {
        return this.electronAPI.getApproval(requestParameters);
    }
    getApprovals(requestParameters = {}) {
        return this.electronAPI.getApprovals(requestParameters);
    }
    createSourceApp(requestParameters) {
        return this.electronAPI.createSourceApp(requestParameters);
    }
    deleteAccessProfilesFromSourceAppByBulk(requestParameters) {
        return this.electronAPI.deleteAccessProfilesFromSourceAppByBulk(requestParameters);
    }
    deleteSourceApp(requestParameters) {
        return this.electronAPI.deleteSourceApp(requestParameters);
    }
    getSourceApp(requestParameters) {
        return this.electronAPI.getSourceApp(requestParameters);
    }
    listAccessProfilesForSourceApp(requestParameters) {
        return this.electronAPI.listAccessProfilesForSourceApp(requestParameters);
    }
    listAllSourceApp(requestParameters = {}) {
        return this.electronAPI.listAllSourceApp(requestParameters);
    }
    listAllUserApps(requestParameters) {
        return this.electronAPI.listAllUserApps(requestParameters);
    }
    listAssignedSourceApp(requestParameters = {}) {
        return this.electronAPI.listAssignedSourceApp(requestParameters);
    }
    listAvailableAccountsForUserApp(requestParameters) {
        return this.electronAPI.listAvailableAccountsForUserApp(requestParameters);
    }
    listAvailableSourceApps(requestParameters = {}) {
        return this.electronAPI.listAvailableSourceApps(requestParameters);
    }
    listOwnedUserApps(requestParameters = {}) {
        return this.electronAPI.listOwnedUserApps(requestParameters);
    }
    patchSourceApp(requestParameters) {
        return this.electronAPI.patchSourceApp(requestParameters);
    }
    patchUserApp(requestParameters) {
        return this.electronAPI.patchUserApp(requestParameters);
    }
    updateSourceAppsInBulk(requestParameters = {}) {
        return this.electronAPI.updateSourceAppsInBulk(requestParameters);
    }
    getProfileConfig(requestParameters) {
        return this.electronAPI.getProfileConfig(requestParameters);
    }
    getProfileConfigList(requestParameters = {}) {
        return this.electronAPI.getProfileConfigList(requestParameters);
    }
    patchProfileConfig(requestParameters) {
        return this.electronAPI.patchProfileConfig(requestParameters);
    }
    getAuthUser(requestParameters) {
        return this.electronAPI.getAuthUser(requestParameters);
    }
    patchAuthUser(requestParameters) {
        return this.electronAPI.patchAuthUser(requestParameters);
    }
    createBrandingItem(requestParameters) {
        return this.electronAPI.createBrandingItem(requestParameters);
    }
    deleteBranding(requestParameters) {
        return this.electronAPI.deleteBranding(requestParameters);
    }
    getBranding(requestParameters) {
        return this.electronAPI.getBranding(requestParameters);
    }
    getBrandingList() {
        return this.electronAPI.getBrandingList();
    }
    setBrandingItem(requestParameters) {
        return this.electronAPI.setBrandingItem(requestParameters);
    }
    createCampaignFilter(requestParameters) {
        return this.electronAPI.createCampaignFilter(requestParameters);
    }
    deleteCampaignFilters(requestParameters) {
        return this.electronAPI.deleteCampaignFilters(requestParameters);
    }
    getCampaignFilterById(requestParameters) {
        return this.electronAPI.getCampaignFilterById(requestParameters);
    }
    listCampaignFilters(requestParameters = {}) {
        return this.electronAPI.listCampaignFilters(requestParameters);
    }
    updateCampaignFilter(requestParameters) {
        return this.electronAPI.updateCampaignFilter(requestParameters);
    }
    completeCampaign(requestParameters) {
        return this.electronAPI.completeCampaign(requestParameters);
    }
    createCampaign(requestParameters) {
        return this.electronAPI.createCampaign(requestParameters);
    }
    createCampaignTemplate(requestParameters) {
        return this.electronAPI.createCampaignTemplate(requestParameters);
    }
    deleteCampaignTemplate(requestParameters) {
        return this.electronAPI.deleteCampaignTemplate(requestParameters);
    }
    deleteCampaignTemplateSchedule(requestParameters) {
        return this.electronAPI.deleteCampaignTemplateSchedule(requestParameters);
    }
    deleteCampaigns(requestParameters) {
        return this.electronAPI.deleteCampaigns(requestParameters);
    }
    getActiveCampaigns(requestParameters = {}) {
        return this.electronAPI.getActiveCampaigns(requestParameters);
    }
    getCampaign(requestParameters) {
        return this.electronAPI.getCampaign(requestParameters);
    }
    getCampaignReports(requestParameters) {
        return this.electronAPI.getCampaignReports(requestParameters);
    }
    getCampaignReportsConfig() {
        return this.electronAPI.getCampaignReportsConfig();
    }
    getCampaignTemplate(requestParameters) {
        return this.electronAPI.getCampaignTemplate(requestParameters);
    }
    getCampaignTemplateSchedule(requestParameters) {
        return this.electronAPI.getCampaignTemplateSchedule(requestParameters);
    }
    getCampaignTemplates(requestParameters = {}) {
        return this.electronAPI.getCampaignTemplates(requestParameters);
    }
    move(requestParameters) {
        return this.electronAPI.move(requestParameters);
    }
    patchCampaignTemplate(requestParameters) {
        return this.electronAPI.patchCampaignTemplate(requestParameters);
    }
    setCampaignReportsConfig(requestParameters) {
        return this.electronAPI.setCampaignReportsConfig(requestParameters);
    }
    setCampaignTemplateSchedule(requestParameters) {
        return this.electronAPI.setCampaignTemplateSchedule(requestParameters);
    }
    startCampaign(requestParameters) {
        return this.electronAPI.startCampaign(requestParameters);
    }
    startCampaignRemediationScan(requestParameters) {
        return this.electronAPI.startCampaignRemediationScan(requestParameters);
    }
    startCampaignReport(requestParameters) {
        return this.electronAPI.startCampaignReport(requestParameters);
    }
    startGenerateCampaignTemplate(requestParameters) {
        return this.electronAPI.startGenerateCampaignTemplate(requestParameters);
    }
    updateCampaign(requestParameters) {
        return this.electronAPI.updateCampaign(requestParameters);
    }
    getIdentityAccessSummaries(requestParameters) {
        return this.electronAPI.getIdentityAccessSummaries(requestParameters);
    }
    getIdentityDecisionSummary(requestParameters) {
        return this.electronAPI.getIdentityDecisionSummary(requestParameters);
    }
    getIdentitySummaries(requestParameters) {
        return this.electronAPI.getIdentitySummaries(requestParameters);
    }
    getIdentitySummary(requestParameters) {
        return this.electronAPI.getIdentitySummary(requestParameters);
    }
    getCertificationTask(requestParameters) {
        return this.electronAPI.getCertificationTask(requestParameters);
    }
    getIdentityCertification(requestParameters) {
        return this.electronAPI.getIdentityCertification(requestParameters);
    }
    getIdentityCertificationItemPermissions(requestParameters) {
        return this.electronAPI.getIdentityCertificationItemPermissions(requestParameters);
    }
    getPendingCertificationTasks(requestParameters = {}) {
        return this.electronAPI.getPendingCertificationTasks(requestParameters);
    }
    listCertificationReviewers(requestParameters) {
        return this.electronAPI.listCertificationReviewers(requestParameters);
    }
    listIdentityAccessReviewItems(requestParameters) {
        return this.electronAPI.listIdentityAccessReviewItems(requestParameters);
    }
    listIdentityCertifications(requestParameters = {}) {
        return this.electronAPI.listIdentityCertifications(requestParameters);
    }
    makeIdentityDecision(requestParameters) {
        return this.electronAPI.makeIdentityDecision(requestParameters);
    }
    reassignIdentityCertifications(requestParameters) {
        return this.electronAPI.reassignIdentityCertifications(requestParameters);
    }
    signOffIdentityCertification(requestParameters) {
        return this.electronAPI.signOffIdentityCertification(requestParameters);
    }
    submitReassignCertsAsync(requestParameters) {
        return this.electronAPI.submitReassignCertsAsync(requestParameters);
    }
    deleteClassifyMachineAccountFromSource(requestParameters) {
        return this.electronAPI.deleteClassifyMachineAccountFromSource(requestParameters);
    }
    getClassifyMachineAccountFromSourceStatus(requestParameters) {
        return this.electronAPI.getClassifyMachineAccountFromSourceStatus(requestParameters);
    }
    sendClassifyMachineAccountFromSource(requestParameters) {
        return this.electronAPI.sendClassifyMachineAccountFromSource(requestParameters);
    }
    createDeploy(requestParameters) {
        return this.electronAPI.createDeploy(requestParameters);
    }
    createObjectMapping(requestParameters) {
        return this.electronAPI.createObjectMapping(requestParameters);
    }
    createObjectMappings(requestParameters) {
        return this.electronAPI.createObjectMappings(requestParameters);
    }
    createScheduledAction(requestParameters) {
        return this.electronAPI.createScheduledAction(requestParameters);
    }
    createUploadedConfiguration(requestParameters) {
        return this.electronAPI.createUploadedConfiguration(requestParameters);
    }
    deleteBackup(requestParameters) {
        return this.electronAPI.deleteBackup(requestParameters);
    }
    deleteDraft(requestParameters) {
        return this.electronAPI.deleteDraft(requestParameters);
    }
    deleteObjectMapping(requestParameters) {
        return this.electronAPI.deleteObjectMapping(requestParameters);
    }
    deleteScheduledAction(requestParameters) {
        return this.electronAPI.deleteScheduledAction(requestParameters);
    }
    deleteUploadedConfiguration(requestParameters) {
        return this.electronAPI.deleteUploadedConfiguration(requestParameters);
    }
    getDeploy(requestParameters) {
        return this.electronAPI.getDeploy(requestParameters);
    }
    getObjectMappings(requestParameters) {
        return this.electronAPI.getObjectMappings(requestParameters);
    }
    getUploadedConfiguration(requestParameters) {
        return this.electronAPI.getUploadedConfiguration(requestParameters);
    }
    listBackups(requestParameters = {}) {
        return this.electronAPI.listBackups(requestParameters);
    }
    listDeploys() {
        return this.electronAPI.listDeploys();
    }
    listDrafts(requestParameters = {}) {
        return this.electronAPI.listDrafts(requestParameters);
    }
    listScheduledActions() {
        return this.electronAPI.listScheduledActions();
    }
    listUploadedConfigurations(requestParameters = {}) {
        return this.electronAPI.listUploadedConfigurations(requestParameters);
    }
    updateObjectMappings(requestParameters) {
        return this.electronAPI.updateObjectMappings(requestParameters);
    }
    updateScheduledAction(requestParameters) {
        return this.electronAPI.updateScheduledAction(requestParameters);
    }
    createConnectorCustomizer(requestParameters) {
        return this.electronAPI.createConnectorCustomizer(requestParameters);
    }
    createConnectorCustomizerVersion(requestParameters) {
        return this.electronAPI.createConnectorCustomizerVersion(requestParameters);
    }
    deleteConnectorCustomizer(requestParameters) {
        return this.electronAPI.deleteConnectorCustomizer(requestParameters);
    }
    getConnectorCustomizer(requestParameters) {
        return this.electronAPI.getConnectorCustomizer(requestParameters);
    }
    listConnectorCustomizers(requestParameters = {}) {
        return this.electronAPI.listConnectorCustomizers(requestParameters);
    }
    putConnectorCustomizer(requestParameters) {
        return this.electronAPI.putConnectorCustomizer(requestParameters);
    }
    createConnectorRule(requestParameters) {
        return this.electronAPI.createConnectorRule(requestParameters);
    }
    deleteConnectorRule(requestParameters) {
        return this.electronAPI.deleteConnectorRule(requestParameters);
    }
    getConnectorRule(requestParameters) {
        return this.electronAPI.getConnectorRule(requestParameters);
    }
    getConnectorRuleList(requestParameters = {}) {
        return this.electronAPI.getConnectorRuleList(requestParameters);
    }
    putConnectorRule(requestParameters) {
        return this.electronAPI.putConnectorRule(requestParameters);
    }
    testConnectorRule(requestParameters) {
        return this.electronAPI.testConnectorRule(requestParameters);
    }
    createCustomConnector(requestParameters) {
        return this.electronAPI.createCustomConnector(requestParameters);
    }
    deleteCustomConnector(requestParameters) {
        return this.electronAPI.deleteCustomConnector(requestParameters);
    }
    getConnector(requestParameters) {
        return this.electronAPI.getConnector(requestParameters);
    }
    getConnectorCorrelationConfig(requestParameters) {
        return this.electronAPI.getConnectorCorrelationConfig(requestParameters);
    }
    getConnectorList(requestParameters = {}) {
        return this.electronAPI.getConnectorList(requestParameters);
    }
    getConnectorSourceConfig(requestParameters) {
        return this.electronAPI.getConnectorSourceConfig(requestParameters);
    }
    getConnectorSourceTemplate(requestParameters) {
        return this.electronAPI.getConnectorSourceTemplate(requestParameters);
    }
    getConnectorTranslations(requestParameters) {
        return this.electronAPI.getConnectorTranslations(requestParameters);
    }
    putConnectorCorrelationConfig(requestParameters) {
        return this.electronAPI.putConnectorCorrelationConfig(requestParameters);
    }
    putConnectorSourceConfig(requestParameters) {
        return this.electronAPI.putConnectorSourceConfig(requestParameters);
    }
    putConnectorSourceTemplate(requestParameters) {
        return this.electronAPI.putConnectorSourceTemplate(requestParameters);
    }
    putConnectorTranslations(requestParameters) {
        return this.electronAPI.putConnectorTranslations(requestParameters);
    }
    updateConnector(requestParameters) {
        return this.electronAPI.updateConnector(requestParameters);
    }
    createFormDefinition(requestParameters = {}) {
        return this.electronAPI.createFormDefinition(requestParameters);
    }
    createFormDefinitionDynamicSchema(requestParameters = {}) {
        return this.electronAPI.createFormDefinitionDynamicSchema(requestParameters);
    }
    createFormDefinitionFileRequest(requestParameters) {
        return this.electronAPI.createFormDefinitionFileRequest(requestParameters);
    }
    createFormInstance(requestParameters = {}) {
        return this.electronAPI.createFormInstance(requestParameters);
    }
    deleteFormDefinition(requestParameters) {
        return this.electronAPI.deleteFormDefinition(requestParameters);
    }
    exportFormDefinitionsByTenant(requestParameters = {}) {
        return this.electronAPI.exportFormDefinitionsByTenant(requestParameters);
    }
    getFileFromS3(requestParameters) {
        return this.electronAPI.getFileFromS3(requestParameters);
    }
    getFormDefinitionByKey(requestParameters) {
        return this.electronAPI.getFormDefinitionByKey(requestParameters);
    }
    getFormInstanceByKey(requestParameters) {
        return this.electronAPI.getFormInstanceByKey(requestParameters);
    }
    getFormInstanceFile(requestParameters) {
        return this.electronAPI.getFormInstanceFile(requestParameters);
    }
    importFormDefinitions(requestParameters = {}) {
        return this.electronAPI.importFormDefinitions(requestParameters);
    }
    patchFormDefinition(requestParameters) {
        return this.electronAPI.patchFormDefinition(requestParameters);
    }
    patchFormInstance(requestParameters) {
        return this.electronAPI.patchFormInstance(requestParameters);
    }
    searchFormDefinitionsByTenant(requestParameters = {}) {
        return this.electronAPI.searchFormDefinitionsByTenant(requestParameters);
    }
    searchFormElementDataByElementID(requestParameters) {
        return this.electronAPI.searchFormElementDataByElementID(requestParameters);
    }
    searchFormInstancesByTenant() {
        return this.electronAPI.searchFormInstancesByTenant();
    }
    searchPreDefinedSelectOptions() {
        return this.electronAPI.searchPreDefinedSelectOptions();
    }
    showPreviewDataSource(requestParameters) {
        return this.electronAPI.showPreviewDataSource(requestParameters);
    }
    createCustomPasswordInstructions(requestParameters) {
        return this.electronAPI.createCustomPasswordInstructions(requestParameters);
    }
    deleteCustomPasswordInstructions(requestParameters) {
        return this.electronAPI.deleteCustomPasswordInstructions(requestParameters);
    }
    getCustomPasswordInstructions(requestParameters) {
        return this.electronAPI.getCustomPasswordInstructions(requestParameters);
    }
    createDataSegment(requestParameters) {
        return this.electronAPI.createDataSegment(requestParameters);
    }
    deleteDataSegment(requestParameters) {
        return this.electronAPI.deleteDataSegment(requestParameters);
    }
    getDataSegment(requestParameters) {
        return this.electronAPI.getDataSegment(requestParameters);
    }
    getDataSegmentIdentityMembership(requestParameters) {
        return this.electronAPI.getDataSegmentIdentityMembership(requestParameters);
    }
    getDataSegmentationEnabledForUser(requestParameters) {
        return this.electronAPI.getDataSegmentationEnabledForUser(requestParameters);
    }
    listDataSegments(requestParameters = {}) {
        return this.electronAPI.listDataSegments(requestParameters);
    }
    patchDataSegment(requestParameters) {
        return this.electronAPI.patchDataSegment(requestParameters);
    }
    publishDataSegment(requestParameters) {
        return this.electronAPI.publishDataSegment(requestParameters);
    }
    createDimension(requestParameters) {
        return this.electronAPI.createDimension(requestParameters);
    }
    deleteBulkDimensions(requestParameters) {
        return this.electronAPI.deleteBulkDimensions(requestParameters);
    }
    deleteDimension(requestParameters) {
        return this.electronAPI.deleteDimension(requestParameters);
    }
    getDimension(requestParameters) {
        return this.electronAPI.getDimension(requestParameters);
    }
    getDimensionEntitlements(requestParameters) {
        return this.electronAPI.getDimensionEntitlements(requestParameters);
    }
    listDimensionAccessProfiles(requestParameters) {
        return this.electronAPI.listDimensionAccessProfiles(requestParameters);
    }
    listDimensions(requestParameters) {
        return this.electronAPI.listDimensions(requestParameters);
    }
    patchDimension(requestParameters) {
        return this.electronAPI.patchDimension(requestParameters);
    }
    createAccessModelMetadataForEntitlement(requestParameters) {
        return this.electronAPI.createAccessModelMetadataForEntitlement(requestParameters);
    }
    deleteAccessModelMetadataFromEntitlement(requestParameters) {
        return this.electronAPI.deleteAccessModelMetadataFromEntitlement(requestParameters);
    }
    getEntitlement(requestParameters) {
        return this.electronAPI.getEntitlement(requestParameters);
    }
    getEntitlementRequestConfig(requestParameters) {
        return this.electronAPI.getEntitlementRequestConfig(requestParameters);
    }
    importEntitlementsBySource(requestParameters) {
        return this.electronAPI.importEntitlementsBySource(requestParameters);
    }
    listEntitlementChildren(requestParameters) {
        return this.electronAPI.listEntitlementChildren(requestParameters);
    }
    listEntitlementParents(requestParameters) {
        return this.electronAPI.listEntitlementParents(requestParameters);
    }
    listEntitlements(requestParameters = {}) {
        return this.electronAPI.listEntitlements(requestParameters);
    }
    patchEntitlement(requestParameters) {
        return this.electronAPI.patchEntitlement(requestParameters);
    }
    putEntitlementRequestConfig(requestParameters) {
        return this.electronAPI.putEntitlementRequestConfig(requestParameters);
    }
    resetSourceEntitlements(requestParameters) {
        return this.electronAPI.resetSourceEntitlements(requestParameters);
    }
    updateEntitlementsInBulk(requestParameters) {
        return this.electronAPI.updateEntitlementsInBulk(requestParameters);
    }
    createAuthOrgNetworkConfig(requestParameters) {
        return this.electronAPI.createAuthOrgNetworkConfig(requestParameters);
    }
    getAuthOrgLockoutConfig() {
        return this.electronAPI.getAuthOrgLockoutConfig();
    }
    getAuthOrgNetworkConfig() {
        return this.electronAPI.getAuthOrgNetworkConfig();
    }
    getAuthOrgServiceProviderConfig() {
        return this.electronAPI.getAuthOrgServiceProviderConfig();
    }
    getAuthOrgSessionConfig() {
        return this.electronAPI.getAuthOrgSessionConfig();
    }
    patchAuthOrgLockoutConfig(requestParameters) {
        return this.electronAPI.patchAuthOrgLockoutConfig(requestParameters);
    }
    patchAuthOrgNetworkConfig(requestParameters) {
        return this.electronAPI.patchAuthOrgNetworkConfig(requestParameters);
    }
    patchAuthOrgServiceProviderConfig(requestParameters) {
        return this.electronAPI.patchAuthOrgServiceProviderConfig(requestParameters);
    }
    patchAuthOrgSessionConfig(requestParameters) {
        return this.electronAPI.patchAuthOrgSessionConfig(requestParameters);
    }
    createWorkgroup(requestParameters) {
        return this.electronAPI.createWorkgroup(requestParameters);
    }
    deleteWorkgroup(requestParameters) {
        return this.electronAPI.deleteWorkgroup(requestParameters);
    }
    deleteWorkgroupMembers(requestParameters) {
        return this.electronAPI.deleteWorkgroupMembers(requestParameters);
    }
    deleteWorkgroupsInBulk(requestParameters) {
        return this.electronAPI.deleteWorkgroupsInBulk(requestParameters);
    }
    getWorkgroup(requestParameters) {
        return this.electronAPI.getWorkgroup(requestParameters);
    }
    listConnections(requestParameters) {
        return this.electronAPI.listConnections(requestParameters);
    }
    listWorkgroupMembers(requestParameters) {
        return this.electronAPI.listWorkgroupMembers(requestParameters);
    }
    listWorkgroups(requestParameters = {}) {
        return this.electronAPI.listWorkgroups(requestParameters);
    }
    patchWorkgroup(requestParameters) {
        return this.electronAPI.patchWorkgroup(requestParameters);
    }
    updateWorkgroupMembers(requestParameters) {
        return this.electronAPI.updateWorkgroupMembers(requestParameters);
    }
    addAccessRequestRecommendationsIgnoredItem(requestParameters) {
        return this.electronAPI.addAccessRequestRecommendationsIgnoredItem(requestParameters);
    }
    addAccessRequestRecommendationsRequestedItem(requestParameters) {
        return this.electronAPI.addAccessRequestRecommendationsRequestedItem(requestParameters);
    }
    addAccessRequestRecommendationsViewedItem(requestParameters) {
        return this.electronAPI.addAccessRequestRecommendationsViewedItem(requestParameters);
    }
    addAccessRequestRecommendationsViewedItems(requestParameters) {
        return this.electronAPI.addAccessRequestRecommendationsViewedItems(requestParameters);
    }
    getAccessRequestRecommendations(requestParameters = {}) {
        return this.electronAPI.getAccessRequestRecommendations(requestParameters);
    }
    getAccessRequestRecommendationsConfig(requestParameters = {}) {
        return this.electronAPI.getAccessRequestRecommendationsConfig(requestParameters);
    }
    getAccessRequestRecommendationsIgnoredItems(requestParameters) {
        return this.electronAPI.getAccessRequestRecommendationsIgnoredItems(requestParameters);
    }
    getAccessRequestRecommendationsRequestedItems(requestParameters) {
        return this.electronAPI.getAccessRequestRecommendationsRequestedItems(requestParameters);
    }
    getAccessRequestRecommendationsViewedItems(requestParameters) {
        return this.electronAPI.getAccessRequestRecommendationsViewedItems(requestParameters);
    }
    setAccessRequestRecommendationsConfig(requestParameters) {
        return this.electronAPI.setAccessRequestRecommendationsConfig(requestParameters);
    }
    createCommonAccess(requestParameters) {
        return this.electronAPI.createCommonAccess(requestParameters);
    }
    getCommonAccess(requestParameters = {}) {
        return this.electronAPI.getCommonAccess(requestParameters);
    }
    updateCommonAccessStatusInBulk(requestParameters) {
        return this.electronAPI.updateCommonAccessStatusInBulk(requestParameters);
    }
    exportOutliersZip(requestParameters = {}) {
        return this.electronAPI.exportOutliersZip(requestParameters);
    }
    getIdentityOutlierSnapshots(requestParameters = {}) {
        return this.electronAPI.getIdentityOutlierSnapshots(requestParameters);
    }
    getIdentityOutliers(requestParameters = {}) {
        return this.electronAPI.getIdentityOutliers(requestParameters);
    }
    getLatestIdentityOutlierSnapshots(requestParameters = {}) {
        return this.electronAPI.getLatestIdentityOutlierSnapshots(requestParameters);
    }
    getOutlierContributingFeatureSummary(requestParameters) {
        return this.electronAPI.getOutlierContributingFeatureSummary(requestParameters);
    }
    getPeerGroupOutliersContributingFeatures(requestParameters) {
        return this.electronAPI.getPeerGroupOutliersContributingFeatures(requestParameters);
    }
    ignoreIdentityOutliers(requestParameters) {
        return this.electronAPI.ignoreIdentityOutliers(requestParameters);
    }
    listOutliersContributingFeatureAccessItems(requestParameters) {
        return this.electronAPI.listOutliersContributingFeatureAccessItems(requestParameters);
    }
    unIgnoreIdentityOutliers(requestParameters) {
        return this.electronAPI.unIgnoreIdentityOutliers(requestParameters);
    }
    getPeerGroupOutliers(requestParameters) {
        return this.electronAPI.getPeerGroupOutliers(requestParameters);
    }
    getRecommendations(requestParameters) {
        return this.electronAPI.getRecommendations(requestParameters);
    }
    getRecommendationsConfig(requestParameters = {}) {
        return this.electronAPI.getRecommendationsConfig(requestParameters);
    }
    updateRecommendationsConfig(requestParameters) {
        return this.electronAPI.updateRecommendationsConfig(requestParameters);
    }
    createPotentialRoleProvisionRequest(requestParameters) {
        return this.electronAPI.createPotentialRoleProvisionRequest(requestParameters);
    }
    createRoleMiningSessions(requestParameters) {
        return this.electronAPI.createRoleMiningSessions(requestParameters);
    }
    downloadRoleMiningPotentialRoleZip(requestParameters) {
        return this.electronAPI.downloadRoleMiningPotentialRoleZip(requestParameters);
    }
    exportRoleMiningPotentialRole(requestParameters) {
        return this.electronAPI.exportRoleMiningPotentialRole(requestParameters);
    }
    exportRoleMiningPotentialRoleAsync(requestParameters) {
        return this.electronAPI.exportRoleMiningPotentialRoleAsync(requestParameters);
    }
    exportRoleMiningPotentialRoleStatus(requestParameters) {
        return this.electronAPI.exportRoleMiningPotentialRoleStatus(requestParameters);
    }
    getAllPotentialRoleSummaries(requestParameters = {}) {
        return this.electronAPI.getAllPotentialRoleSummaries(requestParameters);
    }
    getEntitlementDistributionPotentialRole(requestParameters) {
        return this.electronAPI.getEntitlementDistributionPotentialRole(requestParameters);
    }
    getEntitlementsPotentialRole(requestParameters) {
        return this.electronAPI.getEntitlementsPotentialRole(requestParameters);
    }
    getExcludedEntitlementsPotentialRole(requestParameters) {
        return this.electronAPI.getExcludedEntitlementsPotentialRole(requestParameters);
    }
    getIdentitiesPotentialRole(requestParameters) {
        return this.electronAPI.getIdentitiesPotentialRole(requestParameters);
    }
    getPotentialRole(requestParameters) {
        return this.electronAPI.getPotentialRole(requestParameters);
    }
    getPotentialRoleApplications(requestParameters) {
        return this.electronAPI.getPotentialRoleApplications(requestParameters);
    }
    getPotentialRoleEntitlements(requestParameters) {
        return this.electronAPI.getPotentialRoleEntitlements(requestParameters);
    }
    getPotentialRoleSourceIdentityUsage(requestParameters) {
        return this.electronAPI.getPotentialRoleSourceIdentityUsage(requestParameters);
    }
    getPotentialRoleSummaries(requestParameters) {
        return this.electronAPI.getPotentialRoleSummaries(requestParameters);
    }
    getRoleMiningPotentialRole(requestParameters) {
        return this.electronAPI.getRoleMiningPotentialRole(requestParameters);
    }
    getRoleMiningSession(requestParameters) {
        return this.electronAPI.getRoleMiningSession(requestParameters);
    }
    getRoleMiningSessionStatus(requestParameters) {
        return this.electronAPI.getRoleMiningSessionStatus(requestParameters);
    }
    getRoleMiningSessions(requestParameters) {
        return this.electronAPI.getRoleMiningSessions(requestParameters);
    }
    getSavedPotentialRoles(requestParameters = {}) {
        return this.electronAPI.getSavedPotentialRoles(requestParameters);
    }
    patchPotentialRole(requestParameters) {
        return this.electronAPI.patchPotentialRole(requestParameters);
    }
    patchPotentialRole_1(requestParameters) {
        return this.electronAPI.patchPotentialRole_1(requestParameters);
    }
    patchRoleMiningSession(requestParameters) {
        return this.electronAPI.patchRoleMiningSession(requestParameters);
    }
    updateEntitlementsPotentialRole(requestParameters) {
        return this.electronAPI.updateEntitlementsPotentialRole(requestParameters);
    }
    deleteIcon(requestParameters) {
        return this.electronAPI.deleteIcon(requestParameters);
    }
    setIcon(requestParameters) {
        return this.electronAPI.setIcon(requestParameters);
    }
    deleteIdentity(requestParameters) {
        return this.electronAPI.deleteIdentity(requestParameters);
    }
    getIdentity(requestParameters) {
        return this.electronAPI.getIdentity(requestParameters);
    }
    getIdentityOwnershipDetails(requestParameters) {
        return this.electronAPI.getIdentityOwnershipDetails(requestParameters);
    }
    getRoleAssignment(requestParameters) {
        return this.electronAPI.getRoleAssignment(requestParameters);
    }
    getRoleAssignments(requestParameters) {
        return this.electronAPI.getRoleAssignments(requestParameters);
    }
    listIdentities(requestParameters = {}) {
        return this.electronAPI.listIdentities(requestParameters);
    }
    resetIdentity(requestParameters) {
        return this.electronAPI.resetIdentity(requestParameters);
    }
    sendIdentityVerificationAccountToken(requestParameters) {
        return this.electronAPI.sendIdentityVerificationAccountToken(requestParameters);
    }
    startIdentitiesInvite(requestParameters) {
        return this.electronAPI.startIdentitiesInvite(requestParameters);
    }
    startIdentityProcessing(requestParameters) {
        return this.electronAPI.startIdentityProcessing(requestParameters);
    }
    synchronizeAttributesForIdentity(requestParameters) {
        return this.electronAPI.synchronizeAttributesForIdentity(requestParameters);
    }
    createIdentityAttribute(requestParameters) {
        return this.electronAPI.createIdentityAttribute(requestParameters);
    }
    deleteIdentityAttribute(requestParameters) {
        return this.electronAPI.deleteIdentityAttribute(requestParameters);
    }
    deleteIdentityAttributesInBulk(requestParameters) {
        return this.electronAPI.deleteIdentityAttributesInBulk(requestParameters);
    }
    getIdentityAttribute(requestParameters) {
        return this.electronAPI.getIdentityAttribute(requestParameters);
    }
    listIdentityAttributes(requestParameters = {}) {
        return this.electronAPI.listIdentityAttributes(requestParameters);
    }
    putIdentityAttribute(requestParameters) {
        return this.electronAPI.putIdentityAttribute(requestParameters);
    }
    compareIdentitySnapshots(requestParameters) {
        return this.electronAPI.compareIdentitySnapshots(requestParameters);
    }
    compareIdentitySnapshotsAccessType(requestParameters) {
        return this.electronAPI.compareIdentitySnapshotsAccessType(requestParameters);
    }
    getHistoricalIdentity(requestParameters) {
        return this.electronAPI.getHistoricalIdentity(requestParameters);
    }
    getHistoricalIdentityEvents(requestParameters) {
        return this.electronAPI.getHistoricalIdentityEvents(requestParameters);
    }
    getIdentitySnapshot(requestParameters) {
        return this.electronAPI.getIdentitySnapshot(requestParameters);
    }
    getIdentitySnapshotSummary(requestParameters) {
        return this.electronAPI.getIdentitySnapshotSummary(requestParameters);
    }
    getIdentityStartDate(requestParameters) {
        return this.electronAPI.getIdentityStartDate(requestParameters);
    }
    listHistoricalIdentities(requestParameters = {}) {
        return this.electronAPI.listHistoricalIdentities(requestParameters);
    }
    listIdentityAccessItems(requestParameters) {
        return this.electronAPI.listIdentityAccessItems(requestParameters);
    }
    listIdentitySnapshotAccessItems(requestParameters) {
        return this.electronAPI.listIdentitySnapshotAccessItems(requestParameters);
    }
    listIdentitySnapshots(requestParameters) {
        return this.electronAPI.listIdentitySnapshots(requestParameters);
    }
    createIdentityProfile(requestParameters) {
        return this.electronAPI.createIdentityProfile(requestParameters);
    }
    deleteIdentityProfile(requestParameters) {
        return this.electronAPI.deleteIdentityProfile(requestParameters);
    }
    deleteIdentityProfiles(requestParameters) {
        return this.electronAPI.deleteIdentityProfiles(requestParameters);
    }
    exportIdentityProfiles(requestParameters = {}) {
        return this.electronAPI.exportIdentityProfiles(requestParameters);
    }
    generateIdentityPreview(requestParameters) {
        return this.electronAPI.generateIdentityPreview(requestParameters);
    }
    getDefaultIdentityAttributeConfig(requestParameters) {
        return this.electronAPI.getDefaultIdentityAttributeConfig(requestParameters);
    }
    getIdentityProfile(requestParameters) {
        return this.electronAPI.getIdentityProfile(requestParameters);
    }
    importIdentityProfiles(requestParameters) {
        return this.electronAPI.importIdentityProfiles(requestParameters);
    }
    listIdentityProfiles(requestParameters = {}) {
        return this.electronAPI.listIdentityProfiles(requestParameters);
    }
    syncIdentityProfile(requestParameters) {
        return this.electronAPI.syncIdentityProfile(requestParameters);
    }
    updateIdentityProfile(requestParameters) {
        return this.electronAPI.updateIdentityProfile(requestParameters);
    }
    createLifecycleState(requestParameters) {
        return this.electronAPI.createLifecycleState(requestParameters);
    }
    deleteLifecycleState(requestParameters) {
        return this.electronAPI.deleteLifecycleState(requestParameters);
    }
    getLifecycleState(requestParameters) {
        return this.electronAPI.getLifecycleState(requestParameters);
    }
    getLifecycleStates(requestParameters) {
        return this.electronAPI.getLifecycleStates(requestParameters);
    }
    setLifecycleState(requestParameters) {
        return this.electronAPI.setLifecycleState(requestParameters);
    }
    updateLifecycleStates(requestParameters) {
        return this.electronAPI.updateLifecycleStates(requestParameters);
    }
    getMFADuoConfig() {
        return this.electronAPI.getMFADuoConfig();
    }
    getMFAKbaConfig(requestParameters = {}) {
        return this.electronAPI.getMFAKbaConfig(requestParameters);
    }
    getMFAOktaConfig() {
        return this.electronAPI.getMFAOktaConfig();
    }
    setMFADuoConfig(requestParameters) {
        return this.electronAPI.setMFADuoConfig(requestParameters);
    }
    setMFAKBAConfig(requestParameters) {
        return this.electronAPI.setMFAKBAConfig(requestParameters);
    }
    setMFAOktaConfig(requestParameters) {
        return this.electronAPI.setMFAOktaConfig(requestParameters);
    }
    testMFAConfig(requestParameters) {
        return this.electronAPI.testMFAConfig(requestParameters);
    }
    sendClassifyMachineAccount(requestParameters) {
        return this.electronAPI.sendClassifyMachineAccount(requestParameters);
    }
    createMachineAccountMappings(requestParameters) {
        return this.electronAPI.createMachineAccountMappings(requestParameters);
    }
    deleteMachineAccountMappings(requestParameters) {
        return this.electronAPI.deleteMachineAccountMappings(requestParameters);
    }
    listMachineAccountMappings(requestParameters) {
        return this.electronAPI.listMachineAccountMappings(requestParameters);
    }
    setMachineAccountMappings(requestParameters) {
        return this.electronAPI.setMachineAccountMappings(requestParameters);
    }
    getMachineAccount(requestParameters) {
        return this.electronAPI.getMachineAccount(requestParameters);
    }
    listMachineAccounts(requestParameters = {}) {
        return this.electronAPI.listMachineAccounts(requestParameters);
    }
    updateMachineAccount(requestParameters) {
        return this.electronAPI.updateMachineAccount(requestParameters);
    }
    deleteMachineClassificationConfig(requestParameters) {
        return this.electronAPI.deleteMachineClassificationConfig(requestParameters);
    }
    getMachineClassificationConfig(requestParameters) {
        return this.electronAPI.getMachineClassificationConfig(requestParameters);
    }
    setMachineClassificationConfig(requestParameters) {
        return this.electronAPI.setMachineClassificationConfig(requestParameters);
    }
    createMachineIdentity(requestParameters) {
        return this.electronAPI.createMachineIdentity(requestParameters);
    }
    deleteMachineIdentity(requestParameters) {
        return this.electronAPI.deleteMachineIdentity(requestParameters);
    }
    getMachineIdentity(requestParameters) {
        return this.electronAPI.getMachineIdentity(requestParameters);
    }
    listMachineIdentities(requestParameters = {}) {
        return this.electronAPI.listMachineIdentities(requestParameters);
    }
    updateMachineIdentity(requestParameters) {
        return this.electronAPI.updateMachineIdentity(requestParameters);
    }
    createManagedClient(requestParameters) {
        return this.electronAPI.createManagedClient(requestParameters);
    }
    deleteManagedClient(requestParameters) {
        return this.electronAPI.deleteManagedClient(requestParameters);
    }
    getManagedClient(requestParameters) {
        return this.electronAPI.getManagedClient(requestParameters);
    }
    getManagedClientStatus(requestParameters) {
        return this.electronAPI.getManagedClientStatus(requestParameters);
    }
    getManagedClients(requestParameters = {}) {
        return this.electronAPI.getManagedClients(requestParameters);
    }
    updateManagedClient(requestParameters) {
        return this.electronAPI.updateManagedClient(requestParameters);
    }
    createManagedClusterType(requestParameters) {
        return this.electronAPI.createManagedClusterType(requestParameters);
    }
    deleteManagedClusterType(requestParameters) {
        return this.electronAPI.deleteManagedClusterType(requestParameters);
    }
    getManagedClusterType(requestParameters) {
        return this.electronAPI.getManagedClusterType(requestParameters);
    }
    getManagedClusterTypes(requestParameters = {}) {
        return this.electronAPI.getManagedClusterTypes(requestParameters);
    }
    updateManagedClusterType(requestParameters) {
        return this.electronAPI.updateManagedClusterType(requestParameters);
    }
    createManagedCluster(requestParameters) {
        return this.electronAPI.createManagedCluster(requestParameters);
    }
    deleteManagedCluster(requestParameters) {
        return this.electronAPI.deleteManagedCluster(requestParameters);
    }
    getClientLogConfiguration(requestParameters) {
        return this.electronAPI.getClientLogConfiguration(requestParameters);
    }
    getManagedCluster(requestParameters) {
        return this.electronAPI.getManagedCluster(requestParameters);
    }
    getManagedClusters(requestParameters = {}) {
        return this.electronAPI.getManagedClusters(requestParameters);
    }
    putClientLogConfiguration(requestParameters) {
        return this.electronAPI.putClientLogConfiguration(requestParameters);
    }
    update(requestParameters) {
        return this.electronAPI.update(requestParameters);
    }
    updateManagedCluster(requestParameters) {
        return this.electronAPI.updateManagedCluster(requestParameters);
    }
    createMultiHostIntegration(requestParameters) {
        return this.electronAPI.createMultiHostIntegration(requestParameters);
    }
    createSourcesWithinMultiHost(requestParameters) {
        return this.electronAPI.createSourcesWithinMultiHost(requestParameters);
    }
    deleteMultiHost(requestParameters) {
        return this.electronAPI.deleteMultiHost(requestParameters);
    }
    getAcctAggregationGroups(requestParameters) {
        return this.electronAPI.getAcctAggregationGroups(requestParameters);
    }
    getEntitlementAggregationGroups(requestParameters) {
        return this.electronAPI.getEntitlementAggregationGroups(requestParameters);
    }
    getMultiHostIntegrations(requestParameters) {
        return this.electronAPI.getMultiHostIntegrations(requestParameters);
    }
    getMultiHostIntegrationsList(requestParameters = {}) {
        return this.electronAPI.getMultiHostIntegrationsList(requestParameters);
    }
    getMultiHostSourceCreationErrors(requestParameters) {
        return this.electronAPI.getMultiHostSourceCreationErrors(requestParameters);
    }
    getMultihostIntegrationTypes() {
        return this.electronAPI.getMultihostIntegrationTypes();
    }
    getSourcesWithinMultiHost(requestParameters) {
        return this.electronAPI.getSourcesWithinMultiHost(requestParameters);
    }
    testConnectionMultiHostSources(requestParameters) {
        return this.electronAPI.testConnectionMultiHostSources(requestParameters);
    }
    testSourceConnectionMultihost(requestParameters) {
        return this.electronAPI.testSourceConnectionMultihost(requestParameters);
    }
    updateMultiHostSources(requestParameters) {
        return this.electronAPI.updateMultiHostSources(requestParameters);
    }
    approveNonEmployeeRequest(requestParameters) {
        return this.electronAPI.approveNonEmployeeRequest(requestParameters);
    }
    createNonEmployeeRecord(requestParameters) {
        return this.electronAPI.createNonEmployeeRecord(requestParameters);
    }
    createNonEmployeeRequest(requestParameters) {
        return this.electronAPI.createNonEmployeeRequest(requestParameters);
    }
    createNonEmployeeSource(requestParameters) {
        return this.electronAPI.createNonEmployeeSource(requestParameters);
    }
    createNonEmployeeSourceSchemaAttributes(requestParameters) {
        return this.electronAPI.createNonEmployeeSourceSchemaAttributes(requestParameters);
    }
    deleteNonEmployeeRecord(requestParameters) {
        return this.electronAPI.deleteNonEmployeeRecord(requestParameters);
    }
    deleteNonEmployeeRecordsInBulk(requestParameters) {
        return this.electronAPI.deleteNonEmployeeRecordsInBulk(requestParameters);
    }
    deleteNonEmployeeRequest(requestParameters) {
        return this.electronAPI.deleteNonEmployeeRequest(requestParameters);
    }
    deleteNonEmployeeSchemaAttribute(requestParameters) {
        return this.electronAPI.deleteNonEmployeeSchemaAttribute(requestParameters);
    }
    deleteNonEmployeeSource(requestParameters) {
        return this.electronAPI.deleteNonEmployeeSource(requestParameters);
    }
    deleteNonEmployeeSourceSchemaAttributes(requestParameters) {
        return this.electronAPI.deleteNonEmployeeSourceSchemaAttributes(requestParameters);
    }
    exportNonEmployeeRecords(requestParameters) {
        return this.electronAPI.exportNonEmployeeRecords(requestParameters);
    }
    exportNonEmployeeSourceSchemaTemplate(requestParameters) {
        return this.electronAPI.exportNonEmployeeSourceSchemaTemplate(requestParameters);
    }
    getNonEmployeeApproval(requestParameters) {
        return this.electronAPI.getNonEmployeeApproval(requestParameters);
    }
    getNonEmployeeApprovalSummary(requestParameters) {
        return this.electronAPI.getNonEmployeeApprovalSummary(requestParameters);
    }
    getNonEmployeeBulkUploadStatus(requestParameters) {
        return this.electronAPI.getNonEmployeeBulkUploadStatus(requestParameters);
    }
    getNonEmployeeRecord(requestParameters) {
        return this.electronAPI.getNonEmployeeRecord(requestParameters);
    }
    getNonEmployeeRequest(requestParameters) {
        return this.electronAPI.getNonEmployeeRequest(requestParameters);
    }
    getNonEmployeeRequestSummary(requestParameters) {
        return this.electronAPI.getNonEmployeeRequestSummary(requestParameters);
    }
    getNonEmployeeSchemaAttribute(requestParameters) {
        return this.electronAPI.getNonEmployeeSchemaAttribute(requestParameters);
    }
    getNonEmployeeSource(requestParameters) {
        return this.electronAPI.getNonEmployeeSource(requestParameters);
    }
    getNonEmployeeSourceSchemaAttributes(requestParameters) {
        return this.electronAPI.getNonEmployeeSourceSchemaAttributes(requestParameters);
    }
    importNonEmployeeRecordsInBulk(requestParameters) {
        return this.electronAPI.importNonEmployeeRecordsInBulk(requestParameters);
    }
    listNonEmployeeApprovals(requestParameters = {}) {
        return this.electronAPI.listNonEmployeeApprovals(requestParameters);
    }
    listNonEmployeeRecords(requestParameters = {}) {
        return this.electronAPI.listNonEmployeeRecords(requestParameters);
    }
    listNonEmployeeRequests(requestParameters) {
        return this.electronAPI.listNonEmployeeRequests(requestParameters);
    }
    listNonEmployeeSources(requestParameters = {}) {
        return this.electronAPI.listNonEmployeeSources(requestParameters);
    }
    patchNonEmployeeRecord(requestParameters) {
        return this.electronAPI.patchNonEmployeeRecord(requestParameters);
    }
    patchNonEmployeeSchemaAttribute(requestParameters) {
        return this.electronAPI.patchNonEmployeeSchemaAttribute(requestParameters);
    }
    patchNonEmployeeSource(requestParameters) {
        return this.electronAPI.patchNonEmployeeSource(requestParameters);
    }
    rejectNonEmployeeRequest(requestParameters) {
        return this.electronAPI.rejectNonEmployeeRequest(requestParameters);
    }
    updateNonEmployeeRecord(requestParameters) {
        return this.electronAPI.updateNonEmployeeRecord(requestParameters);
    }
    createDomainDkim(requestParameters) {
        return this.electronAPI.createDomainDkim(requestParameters);
    }
    createNotificationTemplate(requestParameters) {
        return this.electronAPI.createNotificationTemplate(requestParameters);
    }
    createVerifiedFromAddress(requestParameters) {
        return this.electronAPI.createVerifiedFromAddress(requestParameters);
    }
    deleteNotificationTemplatesInBulk(requestParameters) {
        return this.electronAPI.deleteNotificationTemplatesInBulk(requestParameters);
    }
    deleteVerifiedFromAddress(requestParameters) {
        return this.electronAPI.deleteVerifiedFromAddress(requestParameters);
    }
    getDkimAttributes(requestParameters = {}) {
        return this.electronAPI.getDkimAttributes(requestParameters);
    }
    getMailFromAttributes(requestParameters) {
        return this.electronAPI.getMailFromAttributes(requestParameters);
    }
    getNotificationTemplate(requestParameters) {
        return this.electronAPI.getNotificationTemplate(requestParameters);
    }
    getNotificationsTemplateContext(requestParameters = {}) {
        return this.electronAPI.getNotificationsTemplateContext(requestParameters);
    }
    listFromAddresses(requestParameters = {}) {
        return this.electronAPI.listFromAddresses(requestParameters);
    }
    listNotificationPreferences(requestParameters = {}) {
        return this.electronAPI.listNotificationPreferences(requestParameters);
    }
    listNotificationTemplateDefaults(requestParameters = {}) {
        return this.electronAPI.listNotificationTemplateDefaults(requestParameters);
    }
    listNotificationTemplates(requestParameters = {}) {
        return this.electronAPI.listNotificationTemplates(requestParameters);
    }
    putMailFromAttributes(requestParameters) {
        return this.electronAPI.putMailFromAttributes(requestParameters);
    }
    sendTestNotification(requestParameters) {
        return this.electronAPI.sendTestNotification(requestParameters);
    }
    createOauthClient(requestParameters) {
        return this.electronAPI.createOauthClient(requestParameters);
    }
    deleteOauthClient(requestParameters) {
        return this.electronAPI.deleteOauthClient(requestParameters);
    }
    getOauthClient(requestParameters) {
        return this.electronAPI.getOauthClient(requestParameters);
    }
    listOauthClients(requestParameters = {}) {
        return this.electronAPI.listOauthClients(requestParameters);
    }
    patchOauthClient(requestParameters) {
        return this.electronAPI.patchOauthClient(requestParameters);
    }
    getOrgConfig() {
        return this.electronAPI.getOrgConfig();
    }
    getValidTimeZones(requestParameters = {}) {
        return this.electronAPI.getValidTimeZones(requestParameters);
    }
    patchOrgConfig(requestParameters) {
        return this.electronAPI.patchOrgConfig(requestParameters);
    }
    createPasswordOrgConfig(requestParameters) {
        return this.electronAPI.createPasswordOrgConfig(requestParameters);
    }
    getPasswordOrgConfig() {
        return this.electronAPI.getPasswordOrgConfig();
    }
    putPasswordOrgConfig(requestParameters) {
        return this.electronAPI.putPasswordOrgConfig(requestParameters);
    }
    getPasswordDictionary() {
        return this.electronAPI.getPasswordDictionary();
    }
    putPasswordDictionary(requestParameters = {}) {
        return this.electronAPI.putPasswordDictionary(requestParameters);
    }
    createDigitToken(requestParameters) {
        return this.electronAPI.createDigitToken(requestParameters);
    }
    getPasswordChangeStatus(requestParameters) {
        return this.electronAPI.getPasswordChangeStatus(requestParameters);
    }
    queryPasswordInfo(requestParameters) {
        return this.electronAPI.queryPasswordInfo(requestParameters);
    }
    setPassword(requestParameters) {
        return this.electronAPI.setPassword(requestParameters);
    }
    createPasswordPolicy(requestParameters) {
        return this.electronAPI.createPasswordPolicy(requestParameters);
    }
    deletePasswordPolicy(requestParameters) {
        return this.electronAPI.deletePasswordPolicy(requestParameters);
    }
    getPasswordPolicyById(requestParameters) {
        return this.electronAPI.getPasswordPolicyById(requestParameters);
    }
    listPasswordPolicies(requestParameters = {}) {
        return this.electronAPI.listPasswordPolicies(requestParameters);
    }
    setPasswordPolicy(requestParameters) {
        return this.electronAPI.setPasswordPolicy(requestParameters);
    }
    createPasswordSyncGroup(requestParameters) {
        return this.electronAPI.createPasswordSyncGroup(requestParameters);
    }
    deletePasswordSyncGroup(requestParameters) {
        return this.electronAPI.deletePasswordSyncGroup(requestParameters);
    }
    getPasswordSyncGroup(requestParameters) {
        return this.electronAPI.getPasswordSyncGroup(requestParameters);
    }
    getPasswordSyncGroups(requestParameters = {}) {
        return this.electronAPI.getPasswordSyncGroups(requestParameters);
    }
    updatePasswordSyncGroup(requestParameters) {
        return this.electronAPI.updatePasswordSyncGroup(requestParameters);
    }
    createPersonalAccessToken(requestParameters) {
        return this.electronAPI.createPersonalAccessToken(requestParameters);
    }
    deletePersonalAccessToken(requestParameters) {
        return this.electronAPI.deletePersonalAccessToken(requestParameters);
    }
    listPersonalAccessTokens(requestParameters = {}) {
        return this.electronAPI.listPersonalAccessTokens(requestParameters);
    }
    patchPersonalAccessToken(requestParameters) {
        return this.electronAPI.patchPersonalAccessToken(requestParameters);
    }
    getPublicIdentities(requestParameters = {}) {
        return this.electronAPI.getPublicIdentities(requestParameters);
    }
    getPublicIdentityConfig() {
        return this.electronAPI.getPublicIdentityConfig();
    }
    updatePublicIdentityConfig(requestParameters) {
        return this.electronAPI.updatePublicIdentityConfig(requestParameters);
    }
    cancelReport(requestParameters) {
        return this.electronAPI.cancelReport(requestParameters);
    }
    getReport(requestParameters) {
        return this.electronAPI.getReport(requestParameters);
    }
    getReportResult(requestParameters) {
        return this.electronAPI.getReportResult(requestParameters);
    }
    startReport(requestParameters) {
        return this.electronAPI.startReport(requestParameters);
    }
    listRequestableObjects(requestParameters = {}) {
        return this.electronAPI.listRequestableObjects(requestParameters);
    }
    createRoleInsightRequests(requestParameters = {}) {
        return this.electronAPI.createRoleInsightRequests(requestParameters);
    }
    downloadRoleInsightsEntitlementsChanges(requestParameters) {
        return this.electronAPI.downloadRoleInsightsEntitlementsChanges(requestParameters);
    }
    getEntitlementChangesIdentities(requestParameters) {
        return this.electronAPI.getEntitlementChangesIdentities(requestParameters);
    }
    getRoleInsight(requestParameters) {
        return this.electronAPI.getRoleInsight(requestParameters);
    }
    getRoleInsights(requestParameters = {}) {
        return this.electronAPI.getRoleInsights(requestParameters);
    }
    getRoleInsightsCurrentEntitlements(requestParameters) {
        return this.electronAPI.getRoleInsightsCurrentEntitlements(requestParameters);
    }
    getRoleInsightsEntitlementsChanges(requestParameters) {
        return this.electronAPI.getRoleInsightsEntitlementsChanges(requestParameters);
    }
    getRoleInsightsRequests(requestParameters) {
        return this.electronAPI.getRoleInsightsRequests(requestParameters);
    }
    getRoleInsightsSummary(requestParameters = {}) {
        return this.electronAPI.getRoleInsightsSummary(requestParameters);
    }
    createRole(requestParameters) {
        return this.electronAPI.createRole(requestParameters);
    }
    deleteBulkRoles(requestParameters) {
        return this.electronAPI.deleteBulkRoles(requestParameters);
    }
    deleteMetadataFromRoleByKeyAndValue(requestParameters) {
        return this.electronAPI.deleteMetadataFromRoleByKeyAndValue(requestParameters);
    }
    deleteRole(requestParameters) {
        return this.electronAPI.deleteRole(requestParameters);
    }
    getBulkUpdateStatus() {
        return this.electronAPI.getBulkUpdateStatus();
    }
    getBulkUpdateStatusById(requestParameters) {
        return this.electronAPI.getBulkUpdateStatusById(requestParameters);
    }
    getRole(requestParameters) {
        return this.electronAPI.getRole(requestParameters);
    }
    getRoleAssignedIdentities(requestParameters) {
        return this.electronAPI.getRoleAssignedIdentities(requestParameters);
    }
    getRoleEntitlements(requestParameters) {
        return this.electronAPI.getRoleEntitlements(requestParameters);
    }
    listRoles(requestParameters = {}) {
        return this.electronAPI.listRoles(requestParameters);
    }
    patchRole(requestParameters) {
        return this.electronAPI.patchRole(requestParameters);
    }
    searchRolesByFilter(requestParameters = {}) {
        return this.electronAPI.searchRolesByFilter(requestParameters);
    }
    updateAttributeKeyAndValueToRole(requestParameters) {
        return this.electronAPI.updateAttributeKeyAndValueToRole(requestParameters);
    }
    updateRolesMetadataByFilter(requestParameters) {
        return this.electronAPI.updateRolesMetadataByFilter(requestParameters);
    }
    updateRolesMetadataByIds(requestParameters) {
        return this.electronAPI.updateRolesMetadataByIds(requestParameters);
    }
    updateRolesMetadataByQuery(requestParameters) {
        return this.electronAPI.updateRolesMetadataByQuery(requestParameters);
    }
    createSIMIntegration(requestParameters) {
        return this.electronAPI.createSIMIntegration(requestParameters);
    }
    deleteSIMIntegration(requestParameters) {
        return this.electronAPI.deleteSIMIntegration(requestParameters);
    }
    getSIMIntegration(requestParameters) {
        return this.electronAPI.getSIMIntegration(requestParameters);
    }
    getSIMIntegrations(requestParameters = {}) {
        return this.electronAPI.getSIMIntegrations(requestParameters);
    }
    patchBeforeProvisioningRule(requestParameters) {
        return this.electronAPI.patchBeforeProvisioningRule(requestParameters);
    }
    patchSIMAttributes(requestParameters) {
        return this.electronAPI.patchSIMAttributes(requestParameters);
    }
    putSIMIntegration(requestParameters) {
        return this.electronAPI.putSIMIntegration(requestParameters);
    }
    createSodPolicy(requestParameters) {
        return this.electronAPI.createSodPolicy(requestParameters);
    }
    deleteSodPolicy(requestParameters) {
        return this.electronAPI.deleteSodPolicy(requestParameters);
    }
    deleteSodPolicySchedule(requestParameters) {
        return this.electronAPI.deleteSodPolicySchedule(requestParameters);
    }
    getCustomViolationReport(requestParameters) {
        return this.electronAPI.getCustomViolationReport(requestParameters);
    }
    getDefaultViolationReport(requestParameters) {
        return this.electronAPI.getDefaultViolationReport(requestParameters);
    }
    getSodAllReportRunStatus() {
        return this.electronAPI.getSodAllReportRunStatus();
    }
    getSodPolicy(requestParameters) {
        return this.electronAPI.getSodPolicy(requestParameters);
    }
    getSodPolicySchedule(requestParameters) {
        return this.electronAPI.getSodPolicySchedule(requestParameters);
    }
    getSodViolationReportRunStatus(requestParameters) {
        return this.electronAPI.getSodViolationReportRunStatus(requestParameters);
    }
    getSodViolationReportStatus(requestParameters) {
        return this.electronAPI.getSodViolationReportStatus(requestParameters);
    }
    listSodPolicies(requestParameters = {}) {
        return this.electronAPI.listSodPolicies(requestParameters);
    }
    patchSodPolicy(requestParameters) {
        return this.electronAPI.patchSodPolicy(requestParameters);
    }
    putPolicySchedule(requestParameters) {
        return this.electronAPI.putPolicySchedule(requestParameters);
    }
    putSodPolicy(requestParameters) {
        return this.electronAPI.putSodPolicy(requestParameters);
    }
    startEvaluateSodPolicy(requestParameters) {
        return this.electronAPI.startEvaluateSodPolicy(requestParameters);
    }
    startSodAllPoliciesForOrg(requestParameters = {}) {
        return this.electronAPI.startSodAllPoliciesForOrg(requestParameters);
    }
    startSodPolicy(requestParameters) {
        return this.electronAPI.startSodPolicy(requestParameters);
    }
    startPredictSodViolations(requestParameters) {
        return this.electronAPI.startPredictSodViolations(requestParameters);
    }
    startViolationCheck(requestParameters) {
        return this.electronAPI.startViolationCheck(requestParameters);
    }
    exportSpConfig(requestParameters) {
        return this.electronAPI.exportSpConfig(requestParameters);
    }
    getSpConfigExport(requestParameters) {
        return this.electronAPI.getSpConfigExport(requestParameters);
    }
    getSpConfigExportStatus(requestParameters) {
        return this.electronAPI.getSpConfigExportStatus(requestParameters);
    }
    getSpConfigImport(requestParameters) {
        return this.electronAPI.getSpConfigImport(requestParameters);
    }
    getSpConfigImportStatus(requestParameters) {
        return this.electronAPI.getSpConfigImportStatus(requestParameters);
    }
    importSpConfig(requestParameters) {
        return this.electronAPI.importSpConfig(requestParameters);
    }
    listSpConfigObjects() {
        return this.electronAPI.listSpConfigObjects();
    }
    createSavedSearch(requestParameters) {
        return this.electronAPI.createSavedSearch(requestParameters);
    }
    deleteSavedSearch(requestParameters) {
        return this.electronAPI.deleteSavedSearch(requestParameters);
    }
    executeSavedSearch(requestParameters) {
        return this.electronAPI.executeSavedSearch(requestParameters);
    }
    getSavedSearch(requestParameters) {
        return this.electronAPI.getSavedSearch(requestParameters);
    }
    listSavedSearches(requestParameters = {}) {
        return this.electronAPI.listSavedSearches(requestParameters);
    }
    putSavedSearch(requestParameters) {
        return this.electronAPI.putSavedSearch(requestParameters);
    }
    createScheduledSearch(requestParameters) {
        return this.electronAPI.createScheduledSearch(requestParameters);
    }
    deleteScheduledSearch(requestParameters) {
        return this.electronAPI.deleteScheduledSearch(requestParameters);
    }
    getScheduledSearch(requestParameters) {
        return this.electronAPI.getScheduledSearch(requestParameters);
    }
    listScheduledSearch(requestParameters = {}) {
        return this.electronAPI.listScheduledSearch(requestParameters);
    }
    unsubscribeScheduledSearch(requestParameters) {
        return this.electronAPI.unsubscribeScheduledSearch(requestParameters);
    }
    updateScheduledSearch(requestParameters) {
        return this.electronAPI.updateScheduledSearch(requestParameters);
    }
    searchAggregate(requestParameters) {
        return this.electronAPI.searchAggregate(requestParameters);
    }
    searchCount(requestParameters) {
        return this.electronAPI.searchCount(requestParameters);
    }
    searchGet(requestParameters) {
        return this.electronAPI.searchGet(requestParameters);
    }
    searchPost(requestParameters) {
        return this.electronAPI.searchPost(requestParameters);
    }
    createSearchAttributeConfig(requestParameters) {
        return this.electronAPI.createSearchAttributeConfig(requestParameters);
    }
    deleteSearchAttributeConfig(requestParameters) {
        return this.electronAPI.deleteSearchAttributeConfig(requestParameters);
    }
    getSearchAttributeConfig(requestParameters) {
        return this.electronAPI.getSearchAttributeConfig(requestParameters);
    }
    getSingleSearchAttributeConfig(requestParameters) {
        return this.electronAPI.getSingleSearchAttributeConfig(requestParameters);
    }
    patchSearchAttributeConfig(requestParameters) {
        return this.electronAPI.patchSearchAttributeConfig(requestParameters);
    }
    createSegment(requestParameters) {
        return this.electronAPI.createSegment(requestParameters);
    }
    deleteSegment(requestParameters) {
        return this.electronAPI.deleteSegment(requestParameters);
    }
    getSegment(requestParameters) {
        return this.electronAPI.getSegment(requestParameters);
    }
    listSegments(requestParameters = {}) {
        return this.electronAPI.listSegments(requestParameters);
    }
    patchSegment(requestParameters) {
        return this.electronAPI.patchSegment(requestParameters);
    }
    createServiceDeskIntegration(requestParameters) {
        return this.electronAPI.createServiceDeskIntegration(requestParameters);
    }
    deleteServiceDeskIntegration(requestParameters) {
        return this.electronAPI.deleteServiceDeskIntegration(requestParameters);
    }
    getServiceDeskIntegration(requestParameters) {
        return this.electronAPI.getServiceDeskIntegration(requestParameters);
    }
    getServiceDeskIntegrationTemplate(requestParameters) {
        return this.electronAPI.getServiceDeskIntegrationTemplate(requestParameters);
    }
    getServiceDeskIntegrationTypes() {
        return this.electronAPI.getServiceDeskIntegrationTypes();
    }
    getServiceDeskIntegrations(requestParameters = {}) {
        return this.electronAPI.getServiceDeskIntegrations(requestParameters);
    }
    getStatusCheckDetails() {
        return this.electronAPI.getStatusCheckDetails();
    }
    patchServiceDeskIntegration(requestParameters) {
        return this.electronAPI.patchServiceDeskIntegration(requestParameters);
    }
    putServiceDeskIntegration(requestParameters) {
        return this.electronAPI.putServiceDeskIntegration(requestParameters);
    }
    updateStatusCheckDetails(requestParameters) {
        return this.electronAPI.updateStatusCheckDetails(requestParameters);
    }
    getStatusBySourceId(requestParameters) {
        return this.electronAPI.getStatusBySourceId(requestParameters);
    }
    getUsagesBySourceId(requestParameters) {
        return this.electronAPI.getUsagesBySourceId(requestParameters);
    }
    createProvisioningPolicy(requestParameters) {
        return this.electronAPI.createProvisioningPolicy(requestParameters);
    }
    createSource(requestParameters) {
        return this.electronAPI.createSource(requestParameters);
    }
    createSourceSchedule(requestParameters) {
        return this.electronAPI.createSourceSchedule(requestParameters);
    }
    createSourceSchema(requestParameters) {
        return this.electronAPI.createSourceSchema(requestParameters);
    }
    deleteAccountsAsync(requestParameters) {
        return this.electronAPI.deleteAccountsAsync(requestParameters);
    }
    deleteNativeChangeDetectionConfig(requestParameters) {
        return this.electronAPI.deleteNativeChangeDetectionConfig(requestParameters);
    }
    deleteProvisioningPolicy(requestParameters) {
        return this.electronAPI.deleteProvisioningPolicy(requestParameters);
    }
    deleteSource(requestParameters) {
        return this.electronAPI.deleteSource(requestParameters);
    }
    deleteSourceSchedule(requestParameters) {
        return this.electronAPI.deleteSourceSchedule(requestParameters);
    }
    deleteSourceSchema(requestParameters) {
        return this.electronAPI.deleteSourceSchema(requestParameters);
    }
    getAccountsSchema(requestParameters) {
        return this.electronAPI.getAccountsSchema(requestParameters);
    }
    getCorrelationConfig(requestParameters) {
        return this.electronAPI.getCorrelationConfig(requestParameters);
    }
    getEntitlementsSchema(requestParameters) {
        return this.electronAPI.getEntitlementsSchema(requestParameters);
    }
    getNativeChangeDetectionConfig(requestParameters) {
        return this.electronAPI.getNativeChangeDetectionConfig(requestParameters);
    }
    getProvisioningPolicy(requestParameters) {
        return this.electronAPI.getProvisioningPolicy(requestParameters);
    }
    getSource(requestParameters) {
        return this.electronAPI.getSource(requestParameters);
    }
    getSourceAttrSyncConfig(requestParameters) {
        return this.electronAPI.getSourceAttrSyncConfig(requestParameters);
    }
    getSourceConfig(requestParameters) {
        return this.electronAPI.getSourceConfig(requestParameters);
    }
    getSourceConnections(requestParameters) {
        return this.electronAPI.getSourceConnections(requestParameters);
    }
    getSourceEntitlementRequestConfig(requestParameters = {}) {
        return this.electronAPI.getSourceEntitlementRequestConfig(requestParameters);
    }
    getSourceHealth(requestParameters) {
        return this.electronAPI.getSourceHealth(requestParameters);
    }
    getSourceSchedule(requestParameters) {
        return this.electronAPI.getSourceSchedule(requestParameters);
    }
    getSourceSchedules(requestParameters) {
        return this.electronAPI.getSourceSchedules(requestParameters);
    }
    getSourceSchema(requestParameters) {
        return this.electronAPI.getSourceSchema(requestParameters);
    }
    getSourceSchemas(requestParameters) {
        return this.electronAPI.getSourceSchemas(requestParameters);
    }
    importAccounts(requestParameters) {
        return this.electronAPI.importAccounts(requestParameters);
    }
    importAccountsSchema(requestParameters) {
        return this.electronAPI.importAccountsSchema(requestParameters);
    }
    importConnectorFile(requestParameters) {
        return this.electronAPI.importConnectorFile(requestParameters);
    }
    importEntitlements(requestParameters) {
        return this.electronAPI.importEntitlements(requestParameters);
    }
    importEntitlementsSchema(requestParameters) {
        return this.electronAPI.importEntitlementsSchema(requestParameters);
    }
    importUncorrelatedAccounts(requestParameters) {
        return this.electronAPI.importUncorrelatedAccounts(requestParameters);
    }
    listProvisioningPolicies(requestParameters) {
        return this.electronAPI.listProvisioningPolicies(requestParameters);
    }
    listSources(requestParameters = {}) {
        return this.electronAPI.listSources(requestParameters);
    }
    pingCluster(requestParameters) {
        return this.electronAPI.pingCluster(requestParameters);
    }
    putCorrelationConfig(requestParameters) {
        return this.electronAPI.putCorrelationConfig(requestParameters);
    }
    putNativeChangeDetectionConfig(requestParameters) {
        return this.electronAPI.putNativeChangeDetectionConfig(requestParameters);
    }
    putProvisioningPolicy(requestParameters) {
        return this.electronAPI.putProvisioningPolicy(requestParameters);
    }
    putSource(requestParameters) {
        return this.electronAPI.putSource(requestParameters);
    }
    putSourceAttrSyncConfig(requestParameters) {
        return this.electronAPI.putSourceAttrSyncConfig(requestParameters);
    }
    putSourceSchema(requestParameters) {
        return this.electronAPI.putSourceSchema(requestParameters);
    }
    searchResourceObjects(requestParameters) {
        return this.electronAPI.searchResourceObjects(requestParameters);
    }
    syncAttributesForSource(requestParameters) {
        return this.electronAPI.syncAttributesForSource(requestParameters);
    }
    testSourceConfiguration(requestParameters) {
        return this.electronAPI.testSourceConfiguration(requestParameters);
    }
    testSourceConnection(requestParameters) {
        return this.electronAPI.testSourceConnection(requestParameters);
    }
    updatePasswordPolicyHolders(requestParameters) {
        return this.electronAPI.updatePasswordPolicyHolders(requestParameters);
    }
    updateProvisioningPoliciesInBulk(requestParameters) {
        return this.electronAPI.updateProvisioningPoliciesInBulk(requestParameters);
    }
    updateProvisioningPolicy(requestParameters) {
        return this.electronAPI.updateProvisioningPolicy(requestParameters);
    }
    updateSource(requestParameters) {
        return this.electronAPI.updateSource(requestParameters);
    }
    updateSourceEntitlementRequestConfig(requestParameters) {
        return this.electronAPI.updateSourceEntitlementRequestConfig(requestParameters);
    }
    updateSourceSchedule(requestParameters) {
        return this.electronAPI.updateSourceSchedule(requestParameters);
    }
    updateSourceSchema(requestParameters) {
        return this.electronAPI.updateSourceSchema(requestParameters);
    }
    getSedBatchStats(requestParameters) {
        return this.electronAPI.getSedBatchStats(requestParameters);
    }
    getSedBatches(requestParameters = {}) {
        return this.electronAPI.getSedBatches(requestParameters);
    }
    listSeds(requestParameters = {}) {
        return this.electronAPI.listSeds(requestParameters);
    }
    patchSed(requestParameters) {
        return this.electronAPI.patchSed(requestParameters);
    }
    submitSedApproval(requestParameters) {
        return this.electronAPI.submitSedApproval(requestParameters);
    }
    submitSedAssignment(requestParameters) {
        return this.electronAPI.submitSedAssignment(requestParameters);
    }
    submitSedBatchRequest(requestParameters = {}) {
        return this.electronAPI.submitSedBatchRequest(requestParameters);
    }
    deleteTaggedObject(requestParameters) {
        return this.electronAPI.deleteTaggedObject(requestParameters);
    }
    deleteTagsToManyObject(requestParameters) {
        return this.electronAPI.deleteTagsToManyObject(requestParameters);
    }
    getTaggedObject(requestParameters) {
        return this.electronAPI.getTaggedObject(requestParameters);
    }
    listTaggedObjects(requestParameters = {}) {
        return this.electronAPI.listTaggedObjects(requestParameters);
    }
    listTaggedObjectsByType(requestParameters) {
        return this.electronAPI.listTaggedObjectsByType(requestParameters);
    }
    putTaggedObject(requestParameters) {
        return this.electronAPI.putTaggedObject(requestParameters);
    }
    setTagToObject(requestParameters) {
        return this.electronAPI.setTagToObject(requestParameters);
    }
    setTagsToManyObjects(requestParameters) {
        return this.electronAPI.setTagsToManyObjects(requestParameters);
    }
    getPendingTaskHeaders(requestParameters) {
        return this.electronAPI.getPendingTaskHeaders(requestParameters);
    }
    getPendingTasks(requestParameters = {}) {
        return this.electronAPI.getPendingTasks(requestParameters);
    }
    getTaskStatus(requestParameters) {
        return this.electronAPI.getTaskStatus(requestParameters);
    }
    getTaskStatusList(requestParameters = {}) {
        return this.electronAPI.getTaskStatusList(requestParameters);
    }
    updateTaskStatus(requestParameters) {
        return this.electronAPI.updateTaskStatus(requestParameters);
    }
    getTenant() {
        return this.electronAPI.getTenant();
    }
    getTenantContext(requestParameters = {}) {
        return this.electronAPI.getTenantContext(requestParameters);
    }
    patchTenantContext(requestParameters) {
        return this.electronAPI.patchTenantContext(requestParameters);
    }
    createTransform(requestParameters) {
        return this.electronAPI.createTransform(requestParameters);
    }
    deleteTransform(requestParameters) {
        return this.electronAPI.deleteTransform(requestParameters);
    }
    getTransform(requestParameters) {
        return this.electronAPI.getTransform(requestParameters);
    }
    listTransforms(requestParameters = {}) {
        return this.electronAPI.listTransforms(requestParameters);
    }
    updateTransform(requestParameters) {
        return this.electronAPI.updateTransform(requestParameters);
    }
    completeTriggerInvocation(requestParameters) {
        return this.electronAPI.completeTriggerInvocation(requestParameters);
    }
    createSubscription(requestParameters) {
        return this.electronAPI.createSubscription(requestParameters);
    }
    deleteSubscription(requestParameters) {
        return this.electronAPI.deleteSubscription(requestParameters);
    }
    listSubscriptions(requestParameters) {
        return this.electronAPI.listSubscriptions(requestParameters);
    }
    listTriggerInvocationStatus(requestParameters = {}) {
        return this.electronAPI.listTriggerInvocationStatus(requestParameters);
    }
    listTriggers(requestParameters = {}) {
        return this.electronAPI.listTriggers(requestParameters);
    }
    patchSubscription(requestParameters) {
        return this.electronAPI.patchSubscription(requestParameters);
    }
    startTestTriggerInvocation(requestParameters) {
        return this.electronAPI.startTestTriggerInvocation(requestParameters);
    }
    testSubscriptionFilter(requestParameters) {
        return this.electronAPI.testSubscriptionFilter(requestParameters);
    }
    updateSubscription(requestParameters) {
        return this.electronAPI.updateSubscription(requestParameters);
    }
    getTenantUiMetadata(requestParameters = {}) {
        return this.electronAPI.getTenantUiMetadata(requestParameters);
    }
    setTenantUiMetadata(requestParameters) {
        return this.electronAPI.setTenantUiMetadata(requestParameters);
    }
    createVendorConnectorMapping(requestParameters) {
        return this.electronAPI.createVendorConnectorMapping(requestParameters);
    }
    deleteVendorConnectorMapping(requestParameters) {
        return this.electronAPI.deleteVendorConnectorMapping(requestParameters);
    }
    getVendorConnectorMappings() {
        return this.electronAPI.getVendorConnectorMappings();
    }
    approveApprovalItem(requestParameters) {
        return this.electronAPI.approveApprovalItem(requestParameters);
    }
    approveApprovalItemsInBulk(requestParameters) {
        return this.electronAPI.approveApprovalItemsInBulk(requestParameters);
    }
    completeWorkItem(requestParameters) {
        return this.electronAPI.completeWorkItem(requestParameters);
    }
    forwardWorkItem(requestParameters) {
        return this.electronAPI.forwardWorkItem(requestParameters);
    }
    getCompletedWorkItems(requestParameters = {}) {
        return this.electronAPI.getCompletedWorkItems(requestParameters);
    }
    getCountCompletedWorkItems(requestParameters = {}) {
        return this.electronAPI.getCountCompletedWorkItems(requestParameters);
    }
    getCountWorkItems(requestParameters = {}) {
        return this.electronAPI.getCountWorkItems(requestParameters);
    }
    getWorkItem(requestParameters) {
        return this.electronAPI.getWorkItem(requestParameters);
    }
    getWorkItemsSummary(requestParameters = {}) {
        return this.electronAPI.getWorkItemsSummary(requestParameters);
    }
    listWorkItems(requestParameters = {}) {
        return this.electronAPI.listWorkItems(requestParameters);
    }
    rejectApprovalItem(requestParameters) {
        return this.electronAPI.rejectApprovalItem(requestParameters);
    }
    rejectApprovalItemsInBulk(requestParameters) {
        return this.electronAPI.rejectApprovalItemsInBulk(requestParameters);
    }
    submitAccountSelection(requestParameters) {
        return this.electronAPI.submitAccountSelection(requestParameters);
    }
    createReassignmentConfiguration(requestParameters) {
        return this.electronAPI.createReassignmentConfiguration(requestParameters);
    }
    deleteReassignmentConfiguration(requestParameters) {
        return this.electronAPI.deleteReassignmentConfiguration(requestParameters);
    }
    getEvaluateReassignmentConfiguration(requestParameters) {
        return this.electronAPI.getEvaluateReassignmentConfiguration(requestParameters);
    }
    getReassignmentConfigTypes(requestParameters = {}) {
        return this.electronAPI.getReassignmentConfigTypes(requestParameters);
    }
    getReassignmentConfiguration(requestParameters) {
        return this.electronAPI.getReassignmentConfiguration(requestParameters);
    }
    getTenantConfigConfiguration(requestParameters = {}) {
        return this.electronAPI.getTenantConfigConfiguration(requestParameters);
    }
    listReassignmentConfigurations(requestParameters = {}) {
        return this.electronAPI.listReassignmentConfigurations(requestParameters);
    }
    putReassignmentConfig(requestParameters) {
        return this.electronAPI.putReassignmentConfig(requestParameters);
    }
    putTenantConfiguration(requestParameters) {
        return this.electronAPI.putTenantConfiguration(requestParameters);
    }
    cancelWorkflowExecution(requestParameters) {
        return this.electronAPI.cancelWorkflowExecution(requestParameters);
    }
    createExternalExecuteWorkflow(requestParameters) {
        return this.electronAPI.createExternalExecuteWorkflow(requestParameters);
    }
    createWorkflow(requestParameters) {
        return this.electronAPI.createWorkflow(requestParameters);
    }
    createWorkflowExternalTrigger(requestParameters) {
        return this.electronAPI.createWorkflowExternalTrigger(requestParameters);
    }
    deleteWorkflow(requestParameters) {
        return this.electronAPI.deleteWorkflow(requestParameters);
    }
    getWorkflow(requestParameters) {
        return this.electronAPI.getWorkflow(requestParameters);
    }
    getWorkflowExecution(requestParameters) {
        return this.electronAPI.getWorkflowExecution(requestParameters);
    }
    getWorkflowExecutionHistory(requestParameters) {
        return this.electronAPI.getWorkflowExecutionHistory(requestParameters);
    }
    getWorkflowExecutions(requestParameters) {
        return this.electronAPI.getWorkflowExecutions(requestParameters);
    }
    listCompleteWorkflowLibrary(requestParameters = {}) {
        return this.electronAPI.listCompleteWorkflowLibrary(requestParameters);
    }
    listWorkflowLibraryActions(requestParameters = {}) {
        return this.electronAPI.listWorkflowLibraryActions(requestParameters);
    }
    listWorkflowLibraryOperators() {
        return this.electronAPI.listWorkflowLibraryOperators();
    }
    listWorkflowLibraryTriggers(requestParameters = {}) {
        return this.electronAPI.listWorkflowLibraryTriggers(requestParameters);
    }
    listWorkflows() {
        return this.electronAPI.listWorkflows();
    }
    patchWorkflow(requestParameters) {
        return this.electronAPI.patchWorkflow(requestParameters);
    }
    putWorkflow(requestParameters) {
        return this.electronAPI.putWorkflow(requestParameters);
    }
    testExternalExecuteWorkflow(requestParameters) {
        return this.electronAPI.testExternalExecuteWorkflow(requestParameters);
    }
    testWorkflow(requestParameters) {
        return this.electronAPI.testWorkflow(requestParameters);
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: SailPointSDKService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: SailPointSDKService, providedIn: 'root' });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: SailPointSDKService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [] });

class GenericDialogComponent {
    dialogRef;
    data;
    constructor(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
    }
    get isUnsavedChangesPrompt() {
        return (this.data.message?.trim() ===
            'You have unsaved changes. Do you want to save them before leaving?');
    }
    onSave() {
        this.dialogRef.close('confirm');
    }
    onDiscard() {
        this.dialogRef.close('discard');
    }
    onClose() {
        this.dialogRef.close();
    }
    onCancel() {
        this.dialogRef.close(false);
    }
    onConfirm() {
        this.dialogRef.close(true);
    }
    getTitleIcon() {
        if (this.data.title?.includes('Successful')) {
            return 'check_circle';
        }
        else if (this.data.title?.includes('Failed') ||
            this.data.title?.includes('Error')) {
            return 'error';
        }
        else {
            return 'login';
        }
    }
    get formattedMessage() {
        try {
            return JSON.stringify(JSON.parse(this.data.message), null, 2);
        }
        catch {
            return this.data.message;
        }
    }
    get isJsonMessage() {
        try {
            JSON.parse(this.data.message);
            return true;
        }
        catch {
            return false;
        }
    }
    get highlightedJson() {
        try {
            const json = JSON.stringify(JSON.parse(this.data.message), null, 2);
            return Prism.highlight(json, Prism.languages.json, 'json');
        }
        catch {
            return this.data.message;
        }
    }
    copyToClipboard() {
        const textToCopy = this.formattedMessage;
        void window.navigator.clipboard.writeText(textToCopy).then(() => {
            // Optional: show some feedback
            console.log('Copied to clipboard');
        });
    }
    isOAuthFlow() {
        return (this.data.title?.includes('OAuth') ||
            this.data.message?.includes('OAuth') ||
            this.data.message?.includes('browser'));
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: GenericDialogComponent, deps: [{ token: i1.MatDialogRef }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "20.1.3", type: GenericDialogComponent, isStandalone: true, selector: "app-generic-dialog", ngImport: i0, template: `
    <h1 mat-dialog-title>
      <mat-icon *ngIf="data.showSpinner" class="title-icon">{{
        getTitleIcon()
      }}</mat-icon>
      {{ data.title || 'Notification' }}
    </h1>

    <div mat-dialog-content class="dialog-content">
      <div *ngIf="data.showSpinner" class="spinner-container">
        <mat-spinner diameter="40"></mat-spinner>
      </div>
      <div class="copy-container" *ngIf="isJsonMessage">
        <button
          id="copyButton"
          mat-icon-button
          (click)="copyToClipboard()"
          matTooltip="Copy to clipboard"
        >
          <mat-icon>content_copy</mat-icon>
        </button>
      </div>
      <ng-container *ngIf="!isUnsavedChangesPrompt">
        <pre class="dialog-message json-message" *ngIf="isJsonMessage"><code class="language-json" [innerHTML]="highlightedJson"></code></pre>
        <pre class="dialog-message text-message" *ngIf="!isJsonMessage">{{ formattedMessage }}</pre>
      </ng-container>
      <p *ngIf="data.showSpinner && isOAuthFlow()" class="oauth-instruction">
        <mat-icon class="info-icon">info</mat-icon>
        Please complete the authentication in your browser window and return
        here.
      </p>
    </div>

    <div mat-dialog-actions align="end">
      <!-- Confirmation Dialog Buttons -->
      <ng-container *ngIf="data.isConfirmation">
        <button mat-button (click)="onCancel()">
          {{ data.cancelText || 'Cancel' }}
        </button>
        <button mat-raised-button color="warn" (click)="onConfirm()">
          {{ data.confirmText || 'Confirm' }}
        </button>
      </ng-container>

      <!-- Standard Dialog Button -->
      <button
        id="closeButton"
        mat-button
        (click)="onClose()"
        *ngIf="!data.isConfirmation && data.showCancel !== false"
      >
        {{ data.showSpinner ? 'Cancel' : 'Close' }}
      </button>

      <ng-container *ngIf="isUnsavedChangesPrompt">
        <button mat-button color="warn" (click)="onDiscard()">Discard</button>
        <button mat-button color="primary" (click)="onSave()">Save</button>
      </ng-container>
    </div>
  `, isInline: true, styles: [":host{display:block}.mat-mdc-dialog-content>:first-child{margin-top:15px!important}.mat-mdc-icon-button .mat-mdc-button-persistent-ripple{border-radius:.5rem!important}.mat-mdc-dialog-content{max-height:none!important;overflow:visible!important}.dark-theme #closeButton{color:var(--theme-primary)!important;background-color:#1e1e1e!important;border-radius:.5rem;border:1px solid var(--theme-primary)!important}.dark-theme #closeButton:hover{background-color:var(--theme-primary)!important;color:#fff;border:1px solid var(--theme-primary)!important}#closeButton{color:#0033a1!important;background-color:#fff!important;border-radius:.5rem;border:1px solid #0033a1}#closeButton:hover{background-color:#0033a1!important;color:#fff!important}.dialog-content{min-width:300px;padding:20px 0;position:relative;box-sizing:border-box}.spinner-container{display:flex;justify-content:center;margin:20px 0}.copy-container{display:flex;justify-content:flex-end;margin-bottom:-48px;margin-right:20px}.dialog-message{margin:0;padding:16px;overflow-x:auto;border-radius:4px;font-family:Fira Code,monospace;white-space:pre-wrap;word-wrap:break-word;max-width:100%;box-sizing:border-box}.dialog-message.json-message{background-color:#f8f8f2;color:#282c34;border:1px solid #e0e0e0;max-height:600px;overflow-y:auto}.dialog-message.text-message{background:none;color:#333;border:none}.dark-theme .dialog-message.json-message{background-color:#282c34;color:#f8f8f2;border:1px solid #444}.dark-theme .dialog-message.text-message{background:none;color:#f0f0f0;border:none}.dark-theme .oauth-instruction{background-color:#1a237e;color:#90caf9;border-left-color:#2196f3}.dialog-message code{display:block;padding:0;background:none;font-family:inherit;font-size:14px;line-height:1.4}.oauth-instruction{background-color:#e3f2fd;padding:12px;border-radius:4px;border-left:3px solid #2196f3;margin:16px 0 0;font-size:13px;color:#1976d2;display:flex;align-items:center;gap:8px}.info-icon{font-size:16px;width:16px;height:16px;color:#2196f3}.title-icon{margin-right:8px;vertical-align:middle}h1[mat-dialog-title]{display:flex;align-items:center;margin-bottom:0}#copyButton{border:none!important}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: MatDialogModule }, { kind: "directive", type: i1.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { kind: "directive", type: i1.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]", inputs: ["align"] }, { kind: "directive", type: i1.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { kind: "ngmodule", type: MatButtonModule }, { kind: "component", type: i5.MatButton, selector: "    button[matButton], a[matButton], button[mat-button], button[mat-raised-button],    button[mat-flat-button], button[mat-stroked-button], a[mat-button], a[mat-raised-button],    a[mat-flat-button], a[mat-stroked-button]  ", inputs: ["matButton"], exportAs: ["matButton", "matAnchor"] }, { kind: "component", type: i5.MatIconButton, selector: "button[mat-icon-button], a[mat-icon-button], button[matIconButton], a[matIconButton]", exportAs: ["matButton", "matAnchor"] }, { kind: "ngmodule", type: MatProgressSpinnerModule }, { kind: "component", type: i8.MatProgressSpinner, selector: "mat-progress-spinner, mat-spinner", inputs: ["color", "mode", "value", "diameter", "strokeWidth"], exportAs: ["matProgressSpinner"] }, { kind: "ngmodule", type: MatIconModule }, { kind: "component", type: i6.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "ngmodule", type: MatTooltipModule }, { kind: "directive", type: i6$1.MatTooltip, selector: "[matTooltip]", inputs: ["matTooltipPosition", "matTooltipPositionAtOrigin", "matTooltipDisabled", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipTouchGestures", "matTooltip", "matTooltipClass"], exportAs: ["matTooltip"] }], encapsulation: i0.ViewEncapsulation.None, preserveWhitespaces: true });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: GenericDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-generic-dialog', imports: [
                        CommonModule,
                        MatDialogModule,
                        MatButtonModule,
                        MatProgressSpinnerModule,
                        MatIconModule,
                        MatTooltipModule,
                    ], template: `
    <h1 mat-dialog-title>
      <mat-icon *ngIf="data.showSpinner" class="title-icon">{{
        getTitleIcon()
      }}</mat-icon>
      {{ data.title || 'Notification' }}
    </h1>

    <div mat-dialog-content class="dialog-content">
      <div *ngIf="data.showSpinner" class="spinner-container">
        <mat-spinner diameter="40"></mat-spinner>
      </div>
      <div class="copy-container" *ngIf="isJsonMessage">
        <button
          id="copyButton"
          mat-icon-button
          (click)="copyToClipboard()"
          matTooltip="Copy to clipboard"
        >
          <mat-icon>content_copy</mat-icon>
        </button>
      </div>
      <ng-container *ngIf="!isUnsavedChangesPrompt">
        <pre class="dialog-message json-message" *ngIf="isJsonMessage"><code class="language-json" [innerHTML]="highlightedJson"></code></pre>
        <pre class="dialog-message text-message" *ngIf="!isJsonMessage">{{ formattedMessage }}</pre>
      </ng-container>
      <p *ngIf="data.showSpinner && isOAuthFlow()" class="oauth-instruction">
        <mat-icon class="info-icon">info</mat-icon>
        Please complete the authentication in your browser window and return
        here.
      </p>
    </div>

    <div mat-dialog-actions align="end">
      <!-- Confirmation Dialog Buttons -->
      <ng-container *ngIf="data.isConfirmation">
        <button mat-button (click)="onCancel()">
          {{ data.cancelText || 'Cancel' }}
        </button>
        <button mat-raised-button color="warn" (click)="onConfirm()">
          {{ data.confirmText || 'Confirm' }}
        </button>
      </ng-container>

      <!-- Standard Dialog Button -->
      <button
        id="closeButton"
        mat-button
        (click)="onClose()"
        *ngIf="!data.isConfirmation && data.showCancel !== false"
      >
        {{ data.showSpinner ? 'Cancel' : 'Close' }}
      </button>

      <ng-container *ngIf="isUnsavedChangesPrompt">
        <button mat-button color="warn" (click)="onDiscard()">Discard</button>
        <button mat-button color="primary" (click)="onSave()">Save</button>
      </ng-container>
    </div>
  `, encapsulation: ViewEncapsulation.None, styles: [":host{display:block}.mat-mdc-dialog-content>:first-child{margin-top:15px!important}.mat-mdc-icon-button .mat-mdc-button-persistent-ripple{border-radius:.5rem!important}.mat-mdc-dialog-content{max-height:none!important;overflow:visible!important}.dark-theme #closeButton{color:var(--theme-primary)!important;background-color:#1e1e1e!important;border-radius:.5rem;border:1px solid var(--theme-primary)!important}.dark-theme #closeButton:hover{background-color:var(--theme-primary)!important;color:#fff;border:1px solid var(--theme-primary)!important}#closeButton{color:#0033a1!important;background-color:#fff!important;border-radius:.5rem;border:1px solid #0033a1}#closeButton:hover{background-color:#0033a1!important;color:#fff!important}.dialog-content{min-width:300px;padding:20px 0;position:relative;box-sizing:border-box}.spinner-container{display:flex;justify-content:center;margin:20px 0}.copy-container{display:flex;justify-content:flex-end;margin-bottom:-48px;margin-right:20px}.dialog-message{margin:0;padding:16px;overflow-x:auto;border-radius:4px;font-family:Fira Code,monospace;white-space:pre-wrap;word-wrap:break-word;max-width:100%;box-sizing:border-box}.dialog-message.json-message{background-color:#f8f8f2;color:#282c34;border:1px solid #e0e0e0;max-height:600px;overflow-y:auto}.dialog-message.text-message{background:none;color:#333;border:none}.dark-theme .dialog-message.json-message{background-color:#282c34;color:#f8f8f2;border:1px solid #444}.dark-theme .dialog-message.text-message{background:none;color:#f0f0f0;border:none}.dark-theme .oauth-instruction{background-color:#1a237e;color:#90caf9;border-left-color:#2196f3}.dialog-message code{display:block;padding:0;background:none;font-family:inherit;font-size:14px;line-height:1.4}.oauth-instruction{background-color:#e3f2fd;padding:12px;border-radius:4px;border-left:3px solid #2196f3;margin:16px 0 0;font-size:13px;color:#1976d2;display:flex;align-items:center;gap:8px}.info-icon{font-size:16px;width:16px;height:16px;color:#2196f3}.title-icon{margin-right:8px;vertical-align:middle}h1[mat-dialog-title]{display:flex;align-items:center;margin-bottom:0}#copyButton{border:none!important}\n"] }]
        }], ctorParameters: () => [{ type: i1.MatDialogRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }] });

// Angular core and module imports
// Search bar component definition
class SearchBarComponent {
    // Input: full dataset to locally filter against
    data = [];
    // Input: placeholder text for the search input
    placeholder = 'Search...';
    // Output: emits filtered results if local filtering is performed
    filtered = new EventEmitter();
    // Output: emits a search string if API-based search is triggered
    searchApi = new EventEmitter();
    // Two-way bound model for the input field
    searchQuery = '';
    // Handler called when user types in the search box
    onSearch(query) {
        this.searchQuery = query;
        const lowerQuery = query.trim().toLowerCase();
        // If the search box is cleared, emit the full dataset
        if (!lowerQuery) {
            this.filtered.emit(this.data);
            return;
        }
        // If query is at least 3 characters, trigger remote API search
        if (lowerQuery.length >= 3) {
            this.searchApi.emit(lowerQuery);
            return;
        }
        // Fallback: perform basic local filtering on all item values
        const result = this.data.filter((item) => {
            // Ensure item is a valid object before calling Object.values
            if (item && typeof item === 'object' && item !== null) {
                // Type assertion to Record<string, unknown> for type safety
                return Object.values(item).some((val) => {
                    if (val === null || val === undefined) {
                        return false;
                    }
                    if (typeof val === 'object') {
                        // Handle objects explicitly (e.g., check specific properties or skip them)
                        return false; // Skip objects to avoid default stringification
                    }
                    // Ensure val is a string, number, or boolean before calling .toString()
                    if (typeof val === 'string' || typeof val === 'number' || typeof val === 'boolean') {
                        return val.toString().toLowerCase().includes(lowerQuery);
                    }
                    return false; // Skip unsupported types
                });
            }
            return false;
        });
        this.filtered.emit(result);
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: SearchBarComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "20.1.3", type: SearchBarComponent, isStandalone: true, selector: "app-search-bar", inputs: { data: "data", placeholder: "placeholder" }, outputs: { filtered: "filtered", searchApi: "searchApi" }, ngImport: i0, template: "<mat-form-field appearance=\"fill\" class=\"custom-fill-field\">\r\n  <mat-label>{{ placeholder }}</mat-label>\r\n  <input\r\n    matInput\r\n    type=\"text\"\r\n    [(ngModel)]=\"searchQuery\"\r\n    (ngModelChange)=\"onSearch($event)\"\r\n    placeholder=\"Search...\"\r\n  />\r\n</mat-form-field>\r\n", styles: [""], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i1$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1$1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "ngmodule", type: MatFormFieldModule }, { kind: "component", type: i6$2.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i6$2.MatLabel, selector: "mat-label" }, { kind: "ngmodule", type: MatInputModule }, { kind: "directive", type: i8$1.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly", "disabledInteractive"], exportAs: ["matInput"] }], preserveWhitespaces: true });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: SearchBarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-search-bar', standalone: true, imports: [CommonModule, FormsModule, MatFormFieldModule, MatInputModule], template: "<mat-form-field appearance=\"fill\" class=\"custom-fill-field\">\r\n  <mat-label>{{ placeholder }}</mat-label>\r\n  <input\r\n    matInput\r\n    type=\"text\"\r\n    [(ngModel)]=\"searchQuery\"\r\n    (ngModelChange)=\"onSearch($event)\"\r\n    placeholder=\"Search...\"\r\n  />\r\n</mat-form-field>\r\n" }]
        }], propDecorators: { data: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], filtered: [{
                type: Output
            }], searchApi: [{
                type: Output
            }] } });

// Angular core and drag-drop imports
class ColumnCustomizerComponent {
    // List of all available columns
    allColumns = [];
    // List of currently visible columns
    displayedColumns = [];
    // Emits the updated list of displayed columns
    displayedColumnsChange = new EventEmitter();
    // Controls visibility of the selector panel
    showSelector = false;
    // Reference to the selector panel element for click outside detection
    panelRef;
    // Toggles the visibility of the column selector panel
    toggleSelector() {
        this.showSelector = !this.showSelector;
    }
    // Handles drag-and-drop reordering of columns
    dropColumn(event) {
        moveItemInArray(this.allColumns, event.previousIndex, event.currentIndex);
        this.syncVisibleColumns(); // Ensure visible column order is also updated
    }
    // Toggles visibility of a specific column
    toggleColumn(column) {
        const index = this.displayedColumns.indexOf(column);
        if (index > -1) {
            // If currently visible, remove from the visible list
            this.displayedColumns.splice(index, 1);
        }
        else {
            // If not visible, add it
            this.displayedColumns.push(column);
        }
        this.syncVisibleColumns();
    }
    // Check if a column is currently visible
    isDisplayed(column) {
        return this.displayedColumns.includes(column);
    }
    // Syncs the order of visible columns and emits the updated list
    syncVisibleColumns() {
        const ordered = this.allColumns.filter((col) => this.displayedColumns.includes(col));
        this.displayedColumnsChange.emit([...ordered]);
    }
    // Listens for clicks anywhere on the document
    // If a click happens outside the selector panel and toggle button, close the panel
    handleClickOutside(event) {
        const target = event.target;
        if (this.showSelector &&
            this.panelRef &&
            !this.panelRef.nativeElement.contains(target) &&
            !target.closest('.customizeColumnsToggle')) {
            this.showSelector = false;
        }
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: ColumnCustomizerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "20.1.3", type: ColumnCustomizerComponent, isStandalone: true, selector: "app-column-customizer", inputs: { allColumns: "allColumns", displayedColumns: "displayedColumns" }, outputs: { displayedColumnsChange: "displayedColumnsChange" }, host: { listeners: { "document:click": "handleClickOutside($event)" } }, viewQueries: [{ propertyName: "panelRef", first: true, predicate: ["panelRef"], descendants: true }], ngImport: i0, template: "<!-- Trigger -->\r\n<button mat-raised-button class=\"customizeColumnsToggle\" (click)=\"toggleSelector()\">\r\n  Customize Columns\r\n</button>\r\n\r\n<!-- Dropdown Panel -->\r\n<div\r\n  #panelRef\r\n  class=\"dropdown-panel\"\r\n  *ngIf=\"showSelector\"\r\n  cdkDropList\r\n  (cdkDropListDropped)=\"dropColumn($event)\"\r\n>\r\n  <div\r\n    class=\"column-option\"\r\n    *ngFor=\"let col of allColumns\"\r\n    cdkDrag\r\n  >\r\n    <input\r\n      type=\"checkbox\"\r\n      [checked]=\"isDisplayed(col)\"\r\n      (change)=\"toggleColumn(col)\"\r\n    />\r\n    {{ col }}\r\n    <span class=\"drag-handle\">\u2630</span>\r\n  </div>\r\n</div>\r\n", styles: [".dropdown-panel{position:absolute;background:#fff;border:1px solid #ccc;border-radius:6px;padding:.75rem;box-shadow:0 4px 10px #0000001a;z-index:1000}.column-selector{display:flex;flex-direction:column;gap:.5rem}.column-option{display:flex;align-items:center;gap:.5rem;padding:4px;background:#f5f5f5;border-radius:4px;cursor:move}.drag-handle{margin-left:auto;cursor:grab}.customizeColumnsToggle{height:40px;margin-bottom:10px;margin-left:25px}:host :host-context(.dark-theme) .dropdown-panel{background-color:#1e1e1e}:host :host-context(.dark-theme) .column-option{background:#2c2c2c}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: DragDropModule }, { kind: "directive", type: i2.CdkDropList, selector: "[cdkDropList], cdk-drop-list", inputs: ["cdkDropListConnectedTo", "cdkDropListData", "cdkDropListOrientation", "id", "cdkDropListLockAxis", "cdkDropListDisabled", "cdkDropListSortingDisabled", "cdkDropListEnterPredicate", "cdkDropListSortPredicate", "cdkDropListAutoScrollDisabled", "cdkDropListAutoScrollStep", "cdkDropListElementContainer", "cdkDropListHasAnchor"], outputs: ["cdkDropListDropped", "cdkDropListEntered", "cdkDropListExited", "cdkDropListSorted"], exportAs: ["cdkDropList"] }, { kind: "directive", type: i2.CdkDrag, selector: "[cdkDrag]", inputs: ["cdkDragData", "cdkDragLockAxis", "cdkDragRootElement", "cdkDragBoundary", "cdkDragStartDelay", "cdkDragFreeDragPosition", "cdkDragDisabled", "cdkDragConstrainPosition", "cdkDragPreviewClass", "cdkDragPreviewContainer", "cdkDragScale"], outputs: ["cdkDragStarted", "cdkDragReleased", "cdkDragEnded", "cdkDragEntered", "cdkDragExited", "cdkDragDropped", "cdkDragMoved"], exportAs: ["cdkDrag"] }, { kind: "ngmodule", type: MatButtonModule }, { kind: "component", type: i5.MatButton, selector: "    button[matButton], a[matButton], button[mat-button], button[mat-raised-button],    button[mat-flat-button], button[mat-stroked-button], a[mat-button], a[mat-raised-button],    a[mat-flat-button], a[mat-stroked-button]  ", inputs: ["matButton"], exportAs: ["matButton", "matAnchor"] }], preserveWhitespaces: true });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: ColumnCustomizerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-column-customizer', standalone: true, imports: [CommonModule, DragDropModule, MatButtonModule], template: "<!-- Trigger -->\r\n<button mat-raised-button class=\"customizeColumnsToggle\" (click)=\"toggleSelector()\">\r\n  Customize Columns\r\n</button>\r\n\r\n<!-- Dropdown Panel -->\r\n<div\r\n  #panelRef\r\n  class=\"dropdown-panel\"\r\n  *ngIf=\"showSelector\"\r\n  cdkDropList\r\n  (cdkDropListDropped)=\"dropColumn($event)\"\r\n>\r\n  <div\r\n    class=\"column-option\"\r\n    *ngFor=\"let col of allColumns\"\r\n    cdkDrag\r\n  >\r\n    <input\r\n      type=\"checkbox\"\r\n      [checked]=\"isDisplayed(col)\"\r\n      (change)=\"toggleColumn(col)\"\r\n    />\r\n    {{ col }}\r\n    <span class=\"drag-handle\">\u2630</span>\r\n  </div>\r\n</div>\r\n", styles: [".dropdown-panel{position:absolute;background:#fff;border:1px solid #ccc;border-radius:6px;padding:.75rem;box-shadow:0 4px 10px #0000001a;z-index:1000}.column-selector{display:flex;flex-direction:column;gap:.5rem}.column-option{display:flex;align-items:center;gap:.5rem;padding:4px;background:#f5f5f5;border-radius:4px;cursor:move}.drag-handle{margin-left:auto;cursor:grab}.customizeColumnsToggle{height:40px;margin-bottom:10px;margin-left:25px}:host :host-context(.dark-theme) .dropdown-panel{background-color:#1e1e1e}:host :host-context(.dark-theme) .column-option{background:#2c2c2c}\n"] }]
        }], propDecorators: { allColumns: [{
                type: Input
            }], displayedColumns: [{
                type: Input
            }], displayedColumnsChange: [{
                type: Output
            }], panelRef: [{
                type: ViewChild,
                args: ['panelRef']
            }], handleClickOutside: [{
                type: HostListener,
                args: ['document:click', ['$event']]
            }] } });

class IdentitiesComponent {
    dialog;
    sdk;
    cdr;
    title = 'Identities';
    // Table and search state
    identities = [];
    filteredIdentities = [];
    // Column state
    columnOrder = [];
    displayedColumns = [];
    allColumns = [];
    // Pagination and loading state
    loading = false;
    hasDataLoaded = false;
    pageSize = 10;
    pageIndex = 0;
    totalCount = 0;
    // Sorting state
    sorters = [];
    // Optional for user context
    profileId = '';
    // Define sortable fields and column display name mapping
    sortableFields = ['name', 'alias', 'identityStatus'];
    sortFieldMap = {
        identityStatus: 'cloudStatus',
    };
    columnDisplayNames = {
        alias: 'Username',
        emailAddress: 'Email',
        lifecycleState: 'Lifecycle State',
        name: 'Name',
        viewAction: 'Action',
    };
    // Access paginator component
    paginator;
    constructor(dialog, sdk, cdr) {
        this.dialog = dialog;
        this.sdk = sdk;
        this.cdr = cdr;
    }
    ngOnInit() {
        // Load initial data
        void this.loadIdentities();
    }
    async loadIdentities() {
        this.loading = true;
        this.hasDataLoaded = false;
        try {
            // Setup request for paged identity results
            const offset = this.pageIndex * this.pageSize;
            const limit = this.pageSize;
            const sortersParam = this.sorters.join(',');
            const request = {
                offset,
                limit,
                count: true,
                sorters: sortersParam || undefined,
            };
            // Fetch data
            const response = await this.sdk.listIdentities(request);
            this.identities = (response.data ?? []);
            // Extract total count from headers (if present)
            let count;
            if (response.headers &&
                typeof response.headers.get === 'function') {
                const headerValue = response.headers.get('X-Total-Count');
                count = headerValue ? Number(headerValue) : undefined;
            }
            else if (response.headers &&
                typeof response.headers['x-total-count'] !== 'undefined') {
                count = Number(response.headers['x-total-count']);
            }
            this.totalCount = count ?? 500;
            // Initialize columns if first load
            if (this.allColumns.length === 0 && this.identities.length > 0) {
                this.allColumns = Object.keys(this.identities[0]);
                this.columnOrder = [...this.allColumns];
                if (!this.columnOrder.includes('viewAction')) {
                    this.columnOrder.push('viewAction');
                }
                this.displayedColumns = [
                    'alias',
                    'emailAddress',
                    'name',
                    'lifecycleState',
                ];
                if (!this.displayedColumns.includes('viewAction')) {
                    this.displayedColumns.push('viewAction');
                }
            }
            this.filteredIdentities = [...this.identities];
            this.hasDataLoaded = true;
            this.cdr.detectChanges();
        }
        catch (error) {
            this.openMessageDialog('Error loading identities: ' + String(error), 'Error');
        }
        finally {
            this.loading = false;
        }
    }
    // Remote API search
    async onRemoteSearch(query) {
        if (!query || query.length < 3)
            return;
        this.loading = true;
        try {
            // Build search query
            let queryString = ``;
            if (query.trim()) {
                const escaped = query.replace(/"/g, '\\"');
                queryString += `(name:*${escaped}*) OR (alias:*${escaped}*) OR (emailAddress:*${escaped}*) OR (lifecycleState:*${escaped}*)`;
            }
            const request = {
                searchV2025: {
                    indices: ['identities'],
                    query: { query: queryString },
                    sort: ['name'],
                },
                limit: 250,
            };
            // Call search endpoint
            const { data: identities } = await this.sdk.searchPost(request);
            // Transform search results
            this.filteredIdentities = (identities ?? []).map((identity) => {
                // Need to use any here because SearchDocumentsV2025 is a union type
                // and TypeScript can't determine if attributes exists at compile time
                const docWithAttrs = identity;
                const attrs = docWithAttrs.attributes;
                return {
                    ...identity,
                    alias: attrs?.uid ?? '–',
                    emailAddress: attrs?.email ?? docWithAttrs.email ?? '–',
                    lifecycleState: {
                        stateName: attrs?.identityState ??
                            attrs?.cloudStatus ??
                            'Unknown',
                        manuallyUpdated: false,
                    },
                    created: docWithAttrs.created ?? undefined,
                };
            });
            this.totalCount = this.filteredIdentities.length;
            this.pageIndex = 0;
        }
        catch (err) {
            this.openMessageDialog(`Search failed: ${String(err)}`, 'Search Error');
        }
        finally {
            this.loading = false;
        }
    }
    // Handle paginator page change
    onPageChange(event) {
        this.pageSize = event.pageSize;
        this.pageIndex = event.pageIndex;
        void this.loadIdentities();
    }
    // Toggle sorting on a column
    toggleSort(displayColumn) {
        if (!this.sortableFields.includes(displayColumn))
            return;
        const apiField = this.sortFieldMap[displayColumn] || displayColumn;
        const existingIndex = this.sorters.findIndex((s) => s === apiField || s === `-${apiField}`);
        if (existingIndex > -1) {
            const isAsc = !this.sorters[existingIndex].startsWith('-');
            this.sorters[existingIndex] = isAsc ? `-${apiField}` : '';
            if (!this.sorters[existingIndex])
                this.sorters.splice(existingIndex, 1);
        }
        else {
            this.sorters.push(apiField);
        }
        void this.loadIdentities();
    }
    // Check if column is sorted
    isSorted(column) {
        const apiField = this.sortFieldMap[column] || column;
        return this.sorters.some((s) => s === apiField || s === `-${apiField}`);
    }
    // Get sort symbol (▲/▼)
    getSortSymbol(displayColumn) {
        const apiField = this.sortFieldMap[displayColumn] || displayColumn;
        const match = this.sorters.find((s) => s === apiField || s === `-${apiField}`);
        if (!match)
            return null;
        return match.startsWith('-') ? '▼' : '▲';
    }
    // Clear all sorting
    clearSort() {
        this.sorters = [];
        void this.loadIdentities();
    }
    // For *ngFor trackBy
    trackByFn(index, item) {
        return item;
    }
    // View identity details in dialog
    async onView(identity) {
        try {
            if (!identity.id) {
                this.openMessageDialog('Identity ID is missing.', 'Error');
                return;
            }
            const response = await this.sdk.getIdentity({ id: identity.id });
            const details = JSON.stringify(response.data, null, 2);
            this.openMessageDialog(details, `Identity Details: ${identity.name || identity.id}`);
        }
        catch (error) {
            this.openMessageDialog(`Failed to load identity details: ${String(error)}`, 'Error');
        }
    }
    // Fetch a single identity
    getIdentityById(id) {
        return this.sdk.getIdentity({ id }).then((res) => res.data);
    }
    // Show dialog with title + message
    openMessageDialog(errorMessage, title) {
        this.dialog.open(GenericDialogComponent, {
            minWidth: '800px',
            data: {
                title: title,
                message: errorMessage,
            },
        });
    }
    // Show manager details
    onViewManager(identity) {
        const manager = identity.managerRef;
        if (!manager) {
            this.openMessageDialog('No manager information available.', 'Manager Info');
            return;
        }
        const formatted = JSON.stringify(manager, null, 2);
        this.openMessageDialog(formatted, `Manager: ${manager.type || manager.name || identity.id}`);
    }
    // Show identity attribute details
    onViewAttributes(identity) {
        const attributes = identity.attributes ?? {};
        const formatted = JSON.stringify(attributes, null, 2);
        this.openMessageDialog(formatted, `Attributes: ${identity.name || identity.id}`);
    }
    // Format column values (especially lifecycleState)
    formatValue(column, value) {
        if (column === 'lifecycleState') {
            if (!value)
                return '–';
            const state = value.stateName ?? '';
            const manual = value.manuallyUpdated ? ' (manual)' : '';
            return `${this.capitalize(state)}${manual}`;
        }
        // For objects, stringify; else return raw value or dash
        if (typeof value === 'object' && value !== null) {
            return JSON.stringify(value);
        }
        return value ?? '–';
    }
    // Capitalize helper
    capitalize(str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: IdentitiesComponent, deps: [{ token: i1.MatDialog }, { token: SailPointSDKService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "20.1.3", type: IdentitiesComponent, isStandalone: true, selector: "app-identities", viewQueries: [{ propertyName: "paginator", first: true, predicate: MatPaginator, descendants: true }], ngImport: i0, template: "<div class=\"identities-container\">\r\n  <mat-toolbar color=\"primary\">\r\n    <mat-icon>assignment_ind</mat-icon>\r\n    <span class=\"toolbar-title\">{{ title }}</span>\r\n  </mat-toolbar>\r\n\r\n  <div class=\"content\">\r\n    <!-- Search bar for local and remote filtering -->\r\n    <app-search-bar\r\n      [data]=\"identities\"\r\n      placeholder=\"Search identities...\"\r\n      (filtered)=\"filteredIdentities = $event\"\r\n      (searchApi)=\"onRemoteSearch($event)\"\r\n    ></app-search-bar>\r\n\r\n    <!-- Column customization control (lets user choose visible columns) -->\r\n    <app-column-customizer\r\n      [allColumns]=\"columnOrder\"\r\n      [displayedColumns]=\"displayedColumns\"\r\n      (displayedColumnsChange)=\"displayedColumns = $event\"\r\n    />\r\n\r\n    <!-- Loading spinner shown while data is being fetched -->\r\n    <div *ngIf=\"loading\" class=\"spinner-container\">\r\n      <mat-spinner diameter=\"75\"></mat-spinner>\r\n    </div>\r\n\r\n    <!-- Identity table, shown only when data is loaded and not empty -->\r\n    <table\r\n      mat-table\r\n      [dataSource]=\"filteredIdentities\"\r\n      class=\"mat-elevation-z8\"\r\n      *ngIf=\"!loading && filteredIdentities.length\"\r\n    >\r\n      <!-- Dynamically create table columns based on allColumns -->\r\n      <ng-container\r\n        *ngFor=\"let column of allColumns; trackBy: trackByFn\"\r\n        [matColumnDef]=\"column\"\r\n      >\r\n        <!-- Table header cell with optional sort functionality -->\r\n        <th\r\n          mat-header-cell\r\n          *matHeaderCellDef\r\n          [ngClass]=\"{ sortable: sortableFields.includes(column) }\"\r\n          (click)=\"sortableFields.includes(column) && toggleSort(column)\"\r\n        >\r\n          <div class=\"header-content\">\r\n            <span>{{ columnDisplayNames[column] || column }}</span>\r\n            <!-- Show sort icon if the column is sortable -->\r\n            <ng-container *ngIf=\"sortableFields.includes(column)\">\r\n              <span class=\"sort-icon\" [class.active]=\"isSorted(column)\">\r\n                <ng-container\r\n                  *ngIf=\"getSortSymbol(column) as symbol; else idleIcon\"\r\n                >\r\n                  {{ symbol }}\r\n                </ng-container>\r\n                <ng-template #idleIcon>\u21C5</ng-template>\r\n              </span>\r\n            </ng-container>\r\n          </div>\r\n        </th>\r\n\r\n        <!-- Table data cell logic based on column type -->\r\n        <td mat-cell *matCellDef=\"let identity\">\r\n          <ng-container [ngSwitch]=\"column\">\r\n            <!-- Custom button for attribute details -->\r\n            <ng-container *ngSwitchCase=\"'attributes'\">\r\n              <button\r\n                id=\"attibuteDetails\"\r\n                mat-button\r\n                color=\"accent\"\r\n                (click)=\"onViewAttributes(identity)\"\r\n              >\r\n                Attribute Details\r\n              </button>\r\n            </ng-container>\r\n\r\n            <!-- Manager reference handling -->\r\n            <ng-container *ngSwitchCase=\"'managerRef'\">\r\n              <ng-container *ngIf=\"identity.managerRef; else noManager\">\r\n                <button\r\n                  id=\"managerDetails\"\r\n                  mat-button\r\n                  color=\"accent\"\r\n                  (click)=\"onViewManager(identity)\"\r\n                >\r\n                  Manager Details\r\n                </button>\r\n              </ng-container>\r\n              <ng-template #noManager>\u2013</ng-template>\r\n            </ng-container>\r\n\r\n            <!-- Default data display for other fields -->\r\n            <ng-container *ngSwitchDefault>\r\n              {{ formatValue(column, identity[column]) }}\r\n            </ng-container>\r\n          </ng-container>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <!-- Extra column for action buttons like \"View\" -->\r\n      <ng-container matColumnDef=\"viewAction\">\r\n        <th mat-header-cell *matHeaderCellDef>Action</th>\r\n        <td mat-cell *matCellDef=\"let identity\">\r\n          <button\r\n            id=\"viewIdentity\"\r\n            mat-button\r\n            color=\"primary\"\r\n            (click)=\"onView(identity)\"\r\n          >\r\n            View\r\n          </button>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <!-- paginator column -->\r\n      <ng-container matColumnDef=\"paginator\">\r\n        <td\r\n          mat-footer-cell\r\n          *matFooterCellDef\r\n          [attr.colspan]=\"displayedColumns.length\"\r\n          class=\"paginator-footer-cell\"\r\n        >\r\n          <mat-paginator\r\n            [length]=\"totalCount\"\r\n            [pageSize]=\"pageSize\"\r\n            [pageIndex]=\"pageIndex\"\r\n            [pageSizeOptions]=\"[10, 25, 50, 100]\"\r\n            (page)=\"onPageChange($event)\"\r\n            showFirstLastButtons\r\n          ></mat-paginator>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <!-- Header and row definitions -->\r\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\r\n      <!-- footer row with only the paginator column -->\r\n      <tr mat-footer-row *matFooterRowDef=\"['paginator']\"></tr>\r\n    </table>\r\n\r\n    <!-- Message shown when no data was returned after loading completes -->\r\n    <div\r\n      *ngIf=\"!loading && hasDataLoaded && identities.length === 0\"\r\n      class=\"empty-message\"\r\n    >\r\n      No identities found.\r\n    </div>\r\n\r\n    <!-- Paginator for navigating identity pages\r\n    <mat-paginator\r\n      *ngIf=\"!loading && identities.length\"\r\n      [length]=\"totalCount\"\r\n      [pageSize]=\"pageSize\"\r\n      [pageIndex]=\"pageIndex\"\r\n      [pageSizeOptions]=\"[10, 25, 50, 100]\"\r\n      (page)=\"onPageChange($event)\"\r\n      showFirstLastButtons\r\n    ></mat-paginator> -->\r\n  </div>\r\n</div>\r\n", styles: [".identities-container{height:100%;display:flex;flex-direction:column}.toolbar-title{margin-left:16px}.content{padding:24px;flex:1;overflow-y:auto}mat-card{max-width:800px;margin:0 auto}mat-card-actions{display:flex;gap:8px;padding:16px}mat-card-actions button{display:flex;align-items:center;gap:8px}::ng-deep mat-spinner circle{stroke:#0033a1}.spinner-container{display:flex;justify-content:center;align-items:center;border:none;height:75vh}.header-content{display:flex;justify-content:space-between;align-items:center}.sortable{cursor:pointer}.sortable:hover{background-color:#f3f3f3}.sort-icon{margin-left:6px;font-size:.95rem;color:#000}.sort-icon.active{color:#415364;font-weight:700}td.mat-cell,th.mat-header-cell{vertical-align:middle}td.mat-cell:last-child,th.mat-header-cell:last-child{text-align:center}#viewIdentity,#attibuteDetails,#managerDetails{padding:8px;margin-bottom:10px;margin-top:10px;width:55px}#attibuteDetails,#managerDetails{width:125px}:host :host-context(.dark-theme) .sortable:hover{background-color:#2c2c2c}:host :host-context(.dark-theme) .sort-icon{margin-left:6px;font-size:.95rem;color:#fff}:host :host-context(.dark-theme) .sort-icon.active{color:#fff;font-weight:700}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i3.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "directive", type: i3.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { kind: "ngmodule", type: MatButtonModule }, { kind: "component", type: i5.MatButton, selector: "    button[matButton], a[matButton], button[mat-button], button[mat-raised-button],    button[mat-flat-button], button[mat-stroked-button], a[mat-button], a[mat-raised-button],    a[mat-flat-button], a[mat-stroked-button]  ", inputs: ["matButton"], exportAs: ["matButton", "matAnchor"] }, { kind: "ngmodule", type: MatCardModule }, { kind: "ngmodule", type: MatIconModule }, { kind: "component", type: i6.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "ngmodule", type: MatTableModule }, { kind: "component", type: i6$3.MatTable, selector: "mat-table, table[mat-table]", exportAs: ["matTable"] }, { kind: "directive", type: i6$3.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { kind: "directive", type: i6$3.MatHeaderRowDef, selector: "[matHeaderRowDef]", inputs: ["matHeaderRowDef", "matHeaderRowDefSticky"] }, { kind: "directive", type: i6$3.MatColumnDef, selector: "[matColumnDef]", inputs: ["matColumnDef"] }, { kind: "directive", type: i6$3.MatCellDef, selector: "[matCellDef]" }, { kind: "directive", type: i6$3.MatRowDef, selector: "[matRowDef]", inputs: ["matRowDefColumns", "matRowDefWhen"] }, { kind: "directive", type: i6$3.MatFooterCellDef, selector: "[matFooterCellDef]" }, { kind: "directive", type: i6$3.MatFooterRowDef, selector: "[matFooterRowDef]", inputs: ["matFooterRowDef", "matFooterRowDefSticky"] }, { kind: "directive", type: i6$3.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { kind: "directive", type: i6$3.MatCell, selector: "mat-cell, td[mat-cell]" }, { kind: "directive", type: i6$3.MatFooterCell, selector: "mat-footer-cell, td[mat-footer-cell]" }, { kind: "component", type: i6$3.MatHeaderRow, selector: "mat-header-row, tr[mat-header-row]", exportAs: ["matHeaderRow"] }, { kind: "component", type: i6$3.MatRow, selector: "mat-row, tr[mat-row]", exportAs: ["matRow"] }, { kind: "component", type: i6$3.MatFooterRow, selector: "mat-footer-row, tr[mat-footer-row]", exportAs: ["matFooterRow"] }, { kind: "ngmodule", type: MatToolbarModule }, { kind: "component", type: i8$2.MatToolbar, selector: "mat-toolbar", inputs: ["color"], exportAs: ["matToolbar"] }, { kind: "ngmodule", type: MatProgressSpinnerModule }, { kind: "component", type: i8.MatProgressSpinner, selector: "mat-progress-spinner, mat-spinner", inputs: ["color", "mode", "value", "diameter", "strokeWidth"], exportAs: ["matProgressSpinner"] }, { kind: "ngmodule", type: MatPaginatorModule }, { kind: "component", type: i9.MatPaginator, selector: "mat-paginator", inputs: ["color", "pageIndex", "length", "pageSize", "pageSizeOptions", "hidePageSize", "showFirstLastButtons", "selectConfig", "disabled"], outputs: ["page"], exportAs: ["matPaginator"] }, { kind: "component", type: SearchBarComponent, selector: "app-search-bar", inputs: ["data", "placeholder"], outputs: ["filtered", "searchApi"] }, { kind: "component", type: ColumnCustomizerComponent, selector: "app-column-customizer", inputs: ["allColumns", "displayedColumns"], outputs: ["displayedColumnsChange"] }], preserveWhitespaces: true });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: IdentitiesComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-identities', standalone: true, imports: [
                        CommonModule,
                        MatButtonModule,
                        MatCardModule,
                        MatIconModule,
                        MatTableModule,
                        MatToolbarModule,
                        MatProgressSpinnerModule,
                        MatPaginatorModule,
                        SearchBarComponent,
                        ColumnCustomizerComponent,
                    ], template: "<div class=\"identities-container\">\r\n  <mat-toolbar color=\"primary\">\r\n    <mat-icon>assignment_ind</mat-icon>\r\n    <span class=\"toolbar-title\">{{ title }}</span>\r\n  </mat-toolbar>\r\n\r\n  <div class=\"content\">\r\n    <!-- Search bar for local and remote filtering -->\r\n    <app-search-bar\r\n      [data]=\"identities\"\r\n      placeholder=\"Search identities...\"\r\n      (filtered)=\"filteredIdentities = $event\"\r\n      (searchApi)=\"onRemoteSearch($event)\"\r\n    ></app-search-bar>\r\n\r\n    <!-- Column customization control (lets user choose visible columns) -->\r\n    <app-column-customizer\r\n      [allColumns]=\"columnOrder\"\r\n      [displayedColumns]=\"displayedColumns\"\r\n      (displayedColumnsChange)=\"displayedColumns = $event\"\r\n    />\r\n\r\n    <!-- Loading spinner shown while data is being fetched -->\r\n    <div *ngIf=\"loading\" class=\"spinner-container\">\r\n      <mat-spinner diameter=\"75\"></mat-spinner>\r\n    </div>\r\n\r\n    <!-- Identity table, shown only when data is loaded and not empty -->\r\n    <table\r\n      mat-table\r\n      [dataSource]=\"filteredIdentities\"\r\n      class=\"mat-elevation-z8\"\r\n      *ngIf=\"!loading && filteredIdentities.length\"\r\n    >\r\n      <!-- Dynamically create table columns based on allColumns -->\r\n      <ng-container\r\n        *ngFor=\"let column of allColumns; trackBy: trackByFn\"\r\n        [matColumnDef]=\"column\"\r\n      >\r\n        <!-- Table header cell with optional sort functionality -->\r\n        <th\r\n          mat-header-cell\r\n          *matHeaderCellDef\r\n          [ngClass]=\"{ sortable: sortableFields.includes(column) }\"\r\n          (click)=\"sortableFields.includes(column) && toggleSort(column)\"\r\n        >\r\n          <div class=\"header-content\">\r\n            <span>{{ columnDisplayNames[column] || column }}</span>\r\n            <!-- Show sort icon if the column is sortable -->\r\n            <ng-container *ngIf=\"sortableFields.includes(column)\">\r\n              <span class=\"sort-icon\" [class.active]=\"isSorted(column)\">\r\n                <ng-container\r\n                  *ngIf=\"getSortSymbol(column) as symbol; else idleIcon\"\r\n                >\r\n                  {{ symbol }}\r\n                </ng-container>\r\n                <ng-template #idleIcon>\u21C5</ng-template>\r\n              </span>\r\n            </ng-container>\r\n          </div>\r\n        </th>\r\n\r\n        <!-- Table data cell logic based on column type -->\r\n        <td mat-cell *matCellDef=\"let identity\">\r\n          <ng-container [ngSwitch]=\"column\">\r\n            <!-- Custom button for attribute details -->\r\n            <ng-container *ngSwitchCase=\"'attributes'\">\r\n              <button\r\n                id=\"attibuteDetails\"\r\n                mat-button\r\n                color=\"accent\"\r\n                (click)=\"onViewAttributes(identity)\"\r\n              >\r\n                Attribute Details\r\n              </button>\r\n            </ng-container>\r\n\r\n            <!-- Manager reference handling -->\r\n            <ng-container *ngSwitchCase=\"'managerRef'\">\r\n              <ng-container *ngIf=\"identity.managerRef; else noManager\">\r\n                <button\r\n                  id=\"managerDetails\"\r\n                  mat-button\r\n                  color=\"accent\"\r\n                  (click)=\"onViewManager(identity)\"\r\n                >\r\n                  Manager Details\r\n                </button>\r\n              </ng-container>\r\n              <ng-template #noManager>\u2013</ng-template>\r\n            </ng-container>\r\n\r\n            <!-- Default data display for other fields -->\r\n            <ng-container *ngSwitchDefault>\r\n              {{ formatValue(column, identity[column]) }}\r\n            </ng-container>\r\n          </ng-container>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <!-- Extra column for action buttons like \"View\" -->\r\n      <ng-container matColumnDef=\"viewAction\">\r\n        <th mat-header-cell *matHeaderCellDef>Action</th>\r\n        <td mat-cell *matCellDef=\"let identity\">\r\n          <button\r\n            id=\"viewIdentity\"\r\n            mat-button\r\n            color=\"primary\"\r\n            (click)=\"onView(identity)\"\r\n          >\r\n            View\r\n          </button>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <!-- paginator column -->\r\n      <ng-container matColumnDef=\"paginator\">\r\n        <td\r\n          mat-footer-cell\r\n          *matFooterCellDef\r\n          [attr.colspan]=\"displayedColumns.length\"\r\n          class=\"paginator-footer-cell\"\r\n        >\r\n          <mat-paginator\r\n            [length]=\"totalCount\"\r\n            [pageSize]=\"pageSize\"\r\n            [pageIndex]=\"pageIndex\"\r\n            [pageSizeOptions]=\"[10, 25, 50, 100]\"\r\n            (page)=\"onPageChange($event)\"\r\n            showFirstLastButtons\r\n          ></mat-paginator>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <!-- Header and row definitions -->\r\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\r\n      <!-- footer row with only the paginator column -->\r\n      <tr mat-footer-row *matFooterRowDef=\"['paginator']\"></tr>\r\n    </table>\r\n\r\n    <!-- Message shown when no data was returned after loading completes -->\r\n    <div\r\n      *ngIf=\"!loading && hasDataLoaded && identities.length === 0\"\r\n      class=\"empty-message\"\r\n    >\r\n      No identities found.\r\n    </div>\r\n\r\n    <!-- Paginator for navigating identity pages\r\n    <mat-paginator\r\n      *ngIf=\"!loading && identities.length\"\r\n      [length]=\"totalCount\"\r\n      [pageSize]=\"pageSize\"\r\n      [pageIndex]=\"pageIndex\"\r\n      [pageSizeOptions]=\"[10, 25, 50, 100]\"\r\n      (page)=\"onPageChange($event)\"\r\n      showFirstLastButtons\r\n    ></mat-paginator> -->\r\n  </div>\r\n</div>\r\n", styles: [".identities-container{height:100%;display:flex;flex-direction:column}.toolbar-title{margin-left:16px}.content{padding:24px;flex:1;overflow-y:auto}mat-card{max-width:800px;margin:0 auto}mat-card-actions{display:flex;gap:8px;padding:16px}mat-card-actions button{display:flex;align-items:center;gap:8px}::ng-deep mat-spinner circle{stroke:#0033a1}.spinner-container{display:flex;justify-content:center;align-items:center;border:none;height:75vh}.header-content{display:flex;justify-content:space-between;align-items:center}.sortable{cursor:pointer}.sortable:hover{background-color:#f3f3f3}.sort-icon{margin-left:6px;font-size:.95rem;color:#000}.sort-icon.active{color:#415364;font-weight:700}td.mat-cell,th.mat-header-cell{vertical-align:middle}td.mat-cell:last-child,th.mat-header-cell:last-child{text-align:center}#viewIdentity,#attibuteDetails,#managerDetails{padding:8px;margin-bottom:10px;margin-top:10px;width:55px}#attibuteDetails,#managerDetails{width:125px}:host :host-context(.dark-theme) .sortable:hover{background-color:#2c2c2c}:host :host-context(.dark-theme) .sort-icon{margin-left:6px;font-size:.95rem;color:#fff}:host :host-context(.dark-theme) .sort-icon.active{color:#fff;font-weight:700}\n"] }]
        }], ctorParameters: () => [{ type: i1.MatDialog }, { type: SailPointSDKService }, { type: i0.ChangeDetectorRef }], propDecorators: { paginator: [{
                type: ViewChild,
                args: [MatPaginator]
            }] } });

class ReportDataService {
    identities = [];
    dataLoadedSubject = new BehaviorSubject(false);
    isCompleteDataSubject = new BehaviorSubject(false);
    // Expose as observable to allow components to react to data loaded state
    dataLoaded$ = this.dataLoadedSubject.asObservable();
    isCompleteData$ = this.isCompleteDataSubject.asObservable();
    constructor() { }
    setIdentities(identities, isCompleteDataset) {
        this.identities = [...identities];
        this.dataLoadedSubject.next(true);
        this.isCompleteDataSubject.next(isCompleteDataset);
    }
    getIdentities() {
        return [...this.identities]; // Return a copy to prevent direct modification
    }
    clearIdentities() {
        this.identities = [];
        this.dataLoadedSubject.next(false);
        this.isCompleteDataSubject.next(false);
    }
    hasLoadedData() {
        return this.dataLoadedSubject.getValue() && this.identities.length > 0;
    }
    isDataComplete() {
        return this.isCompleteDataSubject.getValue();
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: ReportDataService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: ReportDataService, providedIn: 'root' });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: ReportDataService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [] });

class IdentityDetailViewComponent {
    route;
    router;
    dataService;
    // Data properties
    displayedIdentities = [];
    allIdentities = [];
    loading = true;
    filterCategory = '';
    filterValue = '';
    title = '';
    // Table configuration
    displayedColumns = [
        'name',
        'alias',
        'emailAddress',
        'identityStatus',
        'lifecycleState',
    ];
    pageSize = 10;
    pageIndex = 0;
    totalCount = 0;
    constructor(route, router, dataService) {
        this.route = route;
        this.router = router;
        this.dataService = dataService;
    }
    ngOnInit() {
        // Get the filter category and value from the route params
        this.route.queryParams.subscribe((params) => {
            this.filterCategory = params['category'] || '';
            this.filterValue = params['value'] || '';
            this.title = this.generateTitle(this.filterCategory, this.filterValue);
            this.loadFilteredIdentities();
        });
    }
    loadFilteredIdentities() {
        this.loading = true;
        // Get all identities from the service
        const allIdentities = this.dataService.getIdentities();
        // Apply filtering based on category and value
        if (this.filterCategory && this.filterValue) {
            this.allIdentities = this.filterIdentities(allIdentities, this.filterCategory, this.filterValue);
        }
        else {
            this.allIdentities = [...allIdentities];
        }
        this.totalCount = this.allIdentities.length;
        this.updateDisplayedIdentities();
        this.loading = false;
    }
    filterIdentities(identities, category, value) {
        return identities.filter((identity) => {
            switch (category) {
                case 'status':
                    return identity.identityStatus === value;
                case 'manager':
                    // For manager status (with/without)
                    if (value === 'With Manager') {
                        return identity.managerRef && identity.managerRef.id;
                    }
                    else {
                        return !identity.managerRef || !identity.managerRef.id;
                    }
                case 'lifecycle':
                    // special case for "Unknown" filter
                    if (value === 'Unknown') {
                        // neither a populated lifecycleState nor a cloudLifecycleState attribute
                        const hasStateName = !!identity.lifecycleState?.stateName;
                        const hasCloud = !!(identity.attributes &&
                            'cloudLifecycleState' in identity.attributes &&
                            identity.attributes.cloudLifecycleState);
                        return !hasStateName && !hasCloud;
                    }
                    // normal matching
                    if (identity.lifecycleState?.stateName) {
                        return identity.lifecycleState.stateName === value;
                    }
                    if (identity.attributes &&
                        'cloudLifecycleState' in identity.attributes) {
                        return identity.attributes.cloudLifecycleState === value;
                    }
                    return false;
                default:
                    return true;
            }
        });
    }
    generateTitle(category, value) {
        if (!category || !value) {
            return 'All Identities';
        }
        switch (category) {
            case 'status':
                return `Identities with Status: ${value}`;
            case 'manager':
                return `Identities ${value}`; // 'With Manager' or 'Without Manager'
            case 'lifecycle':
                return `Identities in Lifecycle State: ${value}`;
            default:
                return `Filtered Identities: ${value}`;
        }
    }
    updateDisplayedIdentities() {
        const startIndex = this.pageIndex * this.pageSize;
        this.displayedIdentities = this.allIdentities.slice(startIndex, startIndex + this.pageSize);
    }
    onPageChange(event) {
        this.pageIndex = event.pageIndex;
        this.pageSize = event.pageSize;
        this.updateDisplayedIdentities();
    }
    sortData(sort) {
        if (!sort.active || sort.direction === '') {
            return;
        }
        this.allIdentities = this.allIdentities.sort((a, b) => {
            const isAsc = sort.direction === 'asc';
            switch (sort.active) {
                case 'name':
                    return this.compare(a.name || '', b.name || '', isAsc);
                case 'alias':
                    return this.compare(a.alias || '', b.alias || '', isAsc);
                case 'emailAddress':
                    return this.compare(a.emailAddress || '', b.emailAddress || '', isAsc);
                case 'identityStatus':
                    return this.compare(a.identityStatus || '', b.identityStatus || '', isAsc);
                case 'lifecycleState': {
                    const aState = a.lifecycleState?.stateName || '';
                    const bState = b.lifecycleState?.stateName || '';
                    return this.compare(aState, bState, isAsc);
                }
                default:
                    return 0;
            }
        });
        this.updateDisplayedIdentities();
    }
    compare(a, b, isAsc) {
        return (a < b ? -1 : 1) * (isAsc ? 1 : -1);
    }
    navigateBack() {
        void this.router.navigate(['/report-example']);
    }
    formatLifecycleState(identity) {
        if (identity.lifecycleState && identity.lifecycleState.stateName) {
            return identity.lifecycleState.stateName;
        }
        else if (identity.attributes &&
            'cloudLifecycleState' in identity.attributes) {
            return identity.attributes.cloudLifecycleState;
        }
        return 'Unknown';
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: IdentityDetailViewComponent, deps: [{ token: i1$2.ActivatedRoute }, { token: i1$2.Router }, { token: ReportDataService }], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "20.1.3", type: IdentityDetailViewComponent, isStandalone: true, selector: "app-identity-detail-view", ngImport: i0, template: "<div class=\"identity-detail-container\">\r\n  <mat-toolbar color=\"primary\">\r\n    <button mat-icon-button (click)=\"navigateBack()\" aria-label=\"Back to charts\">\r\n      <mat-icon>arrow_back</mat-icon>\r\n    </button>\r\n    <span class=\"toolbar-title\">{{ title }}</span>\r\n    \r\n    <div class=\"spacer\"></div>\r\n    \r\n    <span *ngIf=\"totalCount > 0\" class=\"count-badge\">\r\n      {{ totalCount }} identities\r\n    </span>\r\n  </mat-toolbar>\r\n\r\n  <div class=\"content\">\r\n    <div *ngIf=\"loading\" class=\"loading-container\">\r\n      <mat-spinner diameter=\"40\"></mat-spinner>\r\n      <p>Loading identity details...</p>\r\n    </div>\r\n\r\n    <div *ngIf=\"!loading\" class=\"table-container\">\r\n      <mat-card>\r\n        <mat-card-content>\r\n          <div *ngIf=\"allIdentities.length === 0\" class=\"no-data\">\r\n            <mat-icon>info</mat-icon>\r\n            <p>No identities match the selected criteria</p>\r\n            <button mat-raised-button color=\"primary\" (click)=\"navigateBack()\">\r\n              Back to Charts\r\n            </button>\r\n          </div>\r\n\r\n          <ng-container *ngIf=\"allIdentities.length > 0\">\r\n            <!-- Filter form -->\r\n            <div class=\"filter-container\">\r\n              <h3>{{ filterCategory }}: {{ filterValue }}</h3>\r\n            </div>\r\n\r\n            <!-- Identity table -->\r\n            <table mat-table [dataSource]=\"displayedIdentities\" matSort (matSortChange)=\"sortData($event)\" class=\"identity-table\">\r\n              \r\n              <!-- Name Column -->\r\n              <ng-container matColumnDef=\"name\">\r\n                <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\r\n                <td mat-cell *matCellDef=\"let identity\">{{ identity.name }}</td>\r\n              </ng-container>\r\n\r\n              <!-- Alias Column -->\r\n              <ng-container matColumnDef=\"alias\">\r\n                <th mat-header-cell *matHeaderCellDef mat-sort-header>Username</th>\r\n                <td mat-cell *matCellDef=\"let identity\">{{ identity.alias || '\u2013' }}</td>\r\n              </ng-container>\r\n\r\n              <!-- Email Column -->\r\n              <ng-container matColumnDef=\"emailAddress\">\r\n                <th mat-header-cell *matHeaderCellDef mat-sort-header>Email</th>\r\n                <td mat-cell *matCellDef=\"let identity\">{{ identity.emailAddress || '\u2013' }}</td>\r\n              </ng-container>\r\n\r\n              <!-- Status Column -->\r\n              <ng-container matColumnDef=\"identityStatus\">\r\n                <th mat-header-cell *matHeaderCellDef mat-sort-header>Status</th>\r\n                <td mat-cell *matCellDef=\"let identity\">{{ identity.identityStatus || 'Unknown' }}</td>\r\n              </ng-container>\r\n\r\n              <!-- Lifecycle State Column -->\r\n              <ng-container matColumnDef=\"lifecycleState\">\r\n                <th mat-header-cell *matHeaderCellDef mat-sort-header>Lifecycle State</th>\r\n                <td mat-cell *matCellDef=\"let identity\">{{ formatLifecycleState(identity) }}</td>\r\n              </ng-container>\r\n\r\n              <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n              <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n            </table>\r\n\r\n            <!-- Pagination -->\r\n            <mat-paginator \r\n              [length]=\"totalCount\"\r\n              [pageSize]=\"pageSize\"\r\n              [pageSizeOptions]=\"[5, 10, 25, 100]\"\r\n              (page)=\"onPageChange($event)\"\r\n              aria-label=\"Select page of identities\">\r\n            </mat-paginator>\r\n          </ng-container>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n  </div>\r\n</div>", styles: [".identity-detail-container{height:100%;display:flex;flex-direction:column}.toolbar-title{margin-left:16px}.spacer{flex:1 1 auto}.content{padding:24px;flex:1;overflow-y:auto}mat-card{max-width:1200px;margin:0 auto}.loading-container,.no-data{display:flex;flex-direction:column;align-items:center;justify-content:center;padding:64px;text-align:center}.no-data mat-icon{font-size:48px;height:48px;width:48px;margin-bottom:16px;color:#607d8b}.no-data button{margin-top:24px}.filter-container{margin-bottom:16px;display:flex;align-items:center}.filter-container h3{margin:0;font-weight:500;color:#3f51b5}.identity-table{width:100%;margin-bottom:16px}.mat-mdc-row:hover{background-color:#0000000a}.count-badge{background-color:#fff3;border-radius:16px;padding:4px 12px;font-size:14px}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: RouterModule }, { kind: "ngmodule", type: MatButtonModule }, { kind: "component", type: i5.MatButton, selector: "    button[matButton], a[matButton], button[mat-button], button[mat-raised-button],    button[mat-flat-button], button[mat-stroked-button], a[mat-button], a[mat-raised-button],    a[mat-flat-button], a[mat-stroked-button]  ", inputs: ["matButton"], exportAs: ["matButton", "matAnchor"] }, { kind: "component", type: i5.MatIconButton, selector: "button[mat-icon-button], a[mat-icon-button], button[matIconButton], a[matIconButton]", exportAs: ["matButton", "matAnchor"] }, { kind: "ngmodule", type: MatCardModule }, { kind: "component", type: i6$4.MatCard, selector: "mat-card", inputs: ["appearance"], exportAs: ["matCard"] }, { kind: "directive", type: i6$4.MatCardContent, selector: "mat-card-content" }, { kind: "ngmodule", type: MatIconModule }, { kind: "component", type: i6.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "ngmodule", type: MatTableModule }, { kind: "component", type: i6$3.MatTable, selector: "mat-table, table[mat-table]", exportAs: ["matTable"] }, { kind: "directive", type: i6$3.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { kind: "directive", type: i6$3.MatHeaderRowDef, selector: "[matHeaderRowDef]", inputs: ["matHeaderRowDef", "matHeaderRowDefSticky"] }, { kind: "directive", type: i6$3.MatColumnDef, selector: "[matColumnDef]", inputs: ["matColumnDef"] }, { kind: "directive", type: i6$3.MatCellDef, selector: "[matCellDef]" }, { kind: "directive", type: i6$3.MatRowDef, selector: "[matRowDef]", inputs: ["matRowDefColumns", "matRowDefWhen"] }, { kind: "directive", type: i6$3.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { kind: "directive", type: i6$3.MatCell, selector: "mat-cell, td[mat-cell]" }, { kind: "component", type: i6$3.MatHeaderRow, selector: "mat-header-row, tr[mat-header-row]", exportAs: ["matHeaderRow"] }, { kind: "component", type: i6$3.MatRow, selector: "mat-row, tr[mat-row]", exportAs: ["matRow"] }, { kind: "ngmodule", type: MatToolbarModule }, { kind: "component", type: i8$2.MatToolbar, selector: "mat-toolbar", inputs: ["color"], exportAs: ["matToolbar"] }, { kind: "ngmodule", type: MatPaginatorModule }, { kind: "component", type: i9.MatPaginator, selector: "mat-paginator", inputs: ["color", "pageIndex", "length", "pageSize", "pageSizeOptions", "hidePageSize", "showFirstLastButtons", "selectConfig", "disabled"], outputs: ["page"], exportAs: ["matPaginator"] }, { kind: "ngmodule", type: MatSortModule }, { kind: "directive", type: i10.MatSort, selector: "[matSort]", inputs: ["matSortActive", "matSortStart", "matSortDirection", "matSortDisableClear", "matSortDisabled"], outputs: ["matSortChange"], exportAs: ["matSort"] }, { kind: "component", type: i10.MatSortHeader, selector: "[mat-sort-header]", inputs: ["mat-sort-header", "arrowPosition", "start", "disabled", "sortActionDescription", "disableClear"], exportAs: ["matSortHeader"] }, { kind: "ngmodule", type: MatProgressSpinnerModule }, { kind: "component", type: i8.MatProgressSpinner, selector: "mat-progress-spinner, mat-spinner", inputs: ["color", "mode", "value", "diameter", "strokeWidth"], exportAs: ["matProgressSpinner"] }, { kind: "ngmodule", type: MatInputModule }, { kind: "ngmodule", type: MatFormFieldModule }], preserveWhitespaces: true });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: IdentityDetailViewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-identity-detail-view', standalone: true, imports: [
                        CommonModule,
                        RouterModule,
                        MatButtonModule,
                        MatCardModule,
                        MatIconModule,
                        MatTableModule,
                        MatToolbarModule,
                        MatPaginatorModule,
                        MatSortModule,
                        MatProgressSpinnerModule,
                        MatInputModule,
                        MatFormFieldModule,
                    ], template: "<div class=\"identity-detail-container\">\r\n  <mat-toolbar color=\"primary\">\r\n    <button mat-icon-button (click)=\"navigateBack()\" aria-label=\"Back to charts\">\r\n      <mat-icon>arrow_back</mat-icon>\r\n    </button>\r\n    <span class=\"toolbar-title\">{{ title }}</span>\r\n    \r\n    <div class=\"spacer\"></div>\r\n    \r\n    <span *ngIf=\"totalCount > 0\" class=\"count-badge\">\r\n      {{ totalCount }} identities\r\n    </span>\r\n  </mat-toolbar>\r\n\r\n  <div class=\"content\">\r\n    <div *ngIf=\"loading\" class=\"loading-container\">\r\n      <mat-spinner diameter=\"40\"></mat-spinner>\r\n      <p>Loading identity details...</p>\r\n    </div>\r\n\r\n    <div *ngIf=\"!loading\" class=\"table-container\">\r\n      <mat-card>\r\n        <mat-card-content>\r\n          <div *ngIf=\"allIdentities.length === 0\" class=\"no-data\">\r\n            <mat-icon>info</mat-icon>\r\n            <p>No identities match the selected criteria</p>\r\n            <button mat-raised-button color=\"primary\" (click)=\"navigateBack()\">\r\n              Back to Charts\r\n            </button>\r\n          </div>\r\n\r\n          <ng-container *ngIf=\"allIdentities.length > 0\">\r\n            <!-- Filter form -->\r\n            <div class=\"filter-container\">\r\n              <h3>{{ filterCategory }}: {{ filterValue }}</h3>\r\n            </div>\r\n\r\n            <!-- Identity table -->\r\n            <table mat-table [dataSource]=\"displayedIdentities\" matSort (matSortChange)=\"sortData($event)\" class=\"identity-table\">\r\n              \r\n              <!-- Name Column -->\r\n              <ng-container matColumnDef=\"name\">\r\n                <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\r\n                <td mat-cell *matCellDef=\"let identity\">{{ identity.name }}</td>\r\n              </ng-container>\r\n\r\n              <!-- Alias Column -->\r\n              <ng-container matColumnDef=\"alias\">\r\n                <th mat-header-cell *matHeaderCellDef mat-sort-header>Username</th>\r\n                <td mat-cell *matCellDef=\"let identity\">{{ identity.alias || '\u2013' }}</td>\r\n              </ng-container>\r\n\r\n              <!-- Email Column -->\r\n              <ng-container matColumnDef=\"emailAddress\">\r\n                <th mat-header-cell *matHeaderCellDef mat-sort-header>Email</th>\r\n                <td mat-cell *matCellDef=\"let identity\">{{ identity.emailAddress || '\u2013' }}</td>\r\n              </ng-container>\r\n\r\n              <!-- Status Column -->\r\n              <ng-container matColumnDef=\"identityStatus\">\r\n                <th mat-header-cell *matHeaderCellDef mat-sort-header>Status</th>\r\n                <td mat-cell *matCellDef=\"let identity\">{{ identity.identityStatus || 'Unknown' }}</td>\r\n              </ng-container>\r\n\r\n              <!-- Lifecycle State Column -->\r\n              <ng-container matColumnDef=\"lifecycleState\">\r\n                <th mat-header-cell *matHeaderCellDef mat-sort-header>Lifecycle State</th>\r\n                <td mat-cell *matCellDef=\"let identity\">{{ formatLifecycleState(identity) }}</td>\r\n              </ng-container>\r\n\r\n              <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n              <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n            </table>\r\n\r\n            <!-- Pagination -->\r\n            <mat-paginator \r\n              [length]=\"totalCount\"\r\n              [pageSize]=\"pageSize\"\r\n              [pageSizeOptions]=\"[5, 10, 25, 100]\"\r\n              (page)=\"onPageChange($event)\"\r\n              aria-label=\"Select page of identities\">\r\n            </mat-paginator>\r\n          </ng-container>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n  </div>\r\n</div>", styles: [".identity-detail-container{height:100%;display:flex;flex-direction:column}.toolbar-title{margin-left:16px}.spacer{flex:1 1 auto}.content{padding:24px;flex:1;overflow-y:auto}mat-card{max-width:1200px;margin:0 auto}.loading-container,.no-data{display:flex;flex-direction:column;align-items:center;justify-content:center;padding:64px;text-align:center}.no-data mat-icon{font-size:48px;height:48px;width:48px;margin-bottom:16px;color:#607d8b}.no-data button{margin-top:24px}.filter-container{margin-bottom:16px;display:flex;align-items:center}.filter-container h3{margin:0;font-weight:500;color:#3f51b5}.identity-table{width:100%;margin-bottom:16px}.mat-mdc-row:hover{background-color:#0000000a}.count-badge{background-color:#fff3;border-radius:16px;padding:4px 12px;font-size:14px}\n"] }]
        }], ctorParameters: () => [{ type: i1$2.ActivatedRoute }, { type: i1$2.Router }, { type: ReportDataService }] });

/// <reference path="../../global.ts" />
class ThemeService {
    // Check if the app is running inside Electron
    isElectron = typeof window !== 'undefined' && !!window.electronAPI;
    // Observable for dark mode status
    isDarkSubject = new BehaviorSubject(false);
    isDark$ = this.isDarkSubject.asObservable();
    // Emits whenever a logo is updated
    logoUpdated$ = new Subject();
    // Observable for the active theme config
    themeSubject = new BehaviorSubject(null);
    theme$ = this.themeSubject.asObservable();
    // Last raw configuration read from disk
    lastRawConfig = {};
    constructor() {
        // Load theme on startup
        void this.loadTheme();
    }
    // Returns the most recently read config object
    getRawConfig() {
        return this.lastRawConfig;
    }
    /**
     * Loads a theme from localStorage or Electron config.
     * If `apply` is true, applies the theme to the DOM.
     */
    async loadTheme(mode, apply = true) {
        const currentMode = mode ??
            localStorage.getItem('themeMode') ??
            'light';
        let config;
        if (this.isElectron) {
            const raw = await window.electronAPI.readConfig();
            this.lastRawConfig = raw;
            config =
                raw[`theme-${currentMode}`] ??
                    (await this.getDefaultTheme(currentMode));
        }
        else {
            const stored = localStorage.getItem(`theme-${currentMode}`);
            config = stored
                ? JSON.parse(stored)
                : await this.getDefaultTheme(currentMode);
        }
        if (apply) {
            this.applyTheme(config, currentMode);
        }
        return config;
    }
    /**
     * Saves a theme configuration and applies it.
     */
    async saveTheme(config, mode) {
        localStorage.setItem('themeMode', mode);
        const themeToSave = structuredClone(config);
        if (this.isElectron) {
            const raw = await window.electronAPI.readConfig();
            raw[`theme-${mode}`] = themeToSave;
            this.lastRawConfig = raw;
            await window.electronAPI.writeConfig(raw);
        }
        else {
            localStorage.setItem(`theme-${mode}`, JSON.stringify(themeToSave));
        }
        console.log(`[ThemeService] Saving theme (${mode}):`, config);
        this.applyTheme(themeToSave, mode);
    }
    /**
     * Validates if a given logo path is a file or base64 URL.
     */
    isValidLogoPath(value) {
        if (!value)
            return false;
        if (value.startsWith('file://'))
            return true;
        if (value.startsWith('data:'))
            return true;
        return false;
    }
    /**
     * Applies the given theme config to the DOM.
     */
    applyTheme(config, mode) {
        const { primary, secondary, primaryText, secondaryText, hoverText, background, } = config;
        // Fallback to default logos if missing or invalid
        if (!this.isValidLogoPath(config.logoLight)) {
            config.logoLight = 'assets/icons/logo.png';
        }
        if (!this.isValidLogoPath(config.logoDark)) {
            config.logoDark = 'assets/icons/logo-dark.png';
        }
        // Apply CSS variables for theme colors
        document.body.style.setProperty('--theme-primary', primary);
        document.body.style.setProperty('--theme-secondary', secondary);
        document.body.style.setProperty('--theme-primary-text', primaryText);
        document.body.style.setProperty('--theme-secondary-text', secondaryText);
        document.body.style.setProperty('--theme-hover-text', hoverText);
        document.body.style.setProperty('--theme-background', background);
        // Apply light or dark theme class
        document.body.classList.remove('light-theme', 'dark-theme');
        document.body.classList.add(`${mode}-theme`);
        // Emit updated theme config
        this.isDarkSubject.next(mode === 'dark');
        this.themeSubject.next(structuredClone(config));
    }
    /**
     * Returns the current saved mode.
     */
    getCurrentMode() {
        return localStorage.getItem('themeMode') ?? 'light';
    }
    /**
     * Returns the default theme for the specified mode.
     * If running in Electron and logos exist, includes custom logos.
     */
    async getDefaultTheme(mode) {
        const fallbackLight = 'assets/icons/logo.png';
        const fallbackDark = 'assets/icons/logo-dark.png';
        let logoLight = fallbackLight;
        let logoDark = fallbackDark;
        if (this.isElectron && window.electronAPI.checkLogoExists) {
            const userLogoLightExists = await window.electronAPI.checkLogoExists('logo.png');
            const userLogoDarkExists = await window.electronAPI.checkLogoExists('logo-dark.png');
            if (userLogoLightExists) {
                logoLight = await window.electronAPI.getLogoDataUrl('logo.png');
            }
            if (userLogoDarkExists) {
                logoDark = await window.electronAPI.getLogoDataUrl('logo-dark.png');
            }
        }
        return {
            primary: mode === 'dark' ? '#54c0e8' : '#0071ce',
            secondary: mode === 'dark' ? '#f48fb1' : '#6c63ff',
            primaryText: mode === 'dark' ? '#ffffff' : '#415364',
            secondaryText: mode === 'dark' ? '#cccccc' : '#415364',
            hoverText: mode === 'dark' ? '#54c0e8' : '#ffffff',
            background: mode === 'dark' ? '#151316' : '#ffffff',
            logoLight,
            logoDark,
        };
    }
    /**
     * Waits for a file to appear on disk, useful after saving a logo.
     */
    async waitForFile(path, timeout = 1000) {
        const interval = 100;
        const retries = timeout / interval;
        for (let i = 0; i < retries; i++) {
            const exists = await window.electronAPI.checkLogoExists(path.split('/').pop());
            if (exists)
                return true;
            await new Promise((res) => setTimeout(res, interval));
        }
        return false;
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: ThemeService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: ThemeService, providedIn: 'root' });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: ThemeService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [] });

class IdentityStatusChartComponent {
    router;
    themeService;
    destroy$ = new Subject();
    isDark = false;
    constructor(router, themeService) {
        this.router = router;
        this.themeService = themeService;
        this.themeService.isDark$
            .pipe(takeUntil(this.destroy$))
            .subscribe(isDark => {
            this.isDark = isDark;
            if (this.identities.length > 0) {
                this.renderIdentityStatusChart();
            }
        });
    }
    identities = [];
    barChartContainer;
    // Chart dimensions
    width = 700;
    height = 400;
    margin = { top: 20, right: 30, bottom: 60, left: 40 };
    ngOnChanges(changes) {
        if (changes['identities'] && this.identities.length > 0) {
            this.renderIdentityStatusChart();
        }
    }
    renderIdentityStatusChart() {
        if (!this.barChartContainer)
            return;
        const element = this.barChartContainer.nativeElement;
        d3.select(element).selectAll('*').remove();
        // Count identities by status
        const statusCounts = {};
        this.identities.forEach(identity => {
            const status = identity.identityStatus || 'Unknown';
            statusCounts[status] = (statusCounts[status] || 0) + 1;
        });
        const data = Object.entries(statusCounts).map(([key, value]) => ({ status: key, count: value }));
        const svg = d3.select(element)
            .append('svg')
            .attr('width', this.width)
            .attr('height', this.height)
            .append('g')
            .attr('transform', `translate(${this.margin.left},${this.margin.top})`);
        const x = d3.scaleBand()
            .domain(data.map(d => d.status))
            .range([0, this.width - this.margin.left - this.margin.right])
            .padding(0.2);
        const y = d3.scaleLinear()
            .domain([0, d3.max(data, d => d.count) || 0])
            .nice()
            .range([this.height - this.margin.top - this.margin.bottom, 0]);
        // Add X axis
        svg.append('g')
            .attr('transform', `translate(0,${this.height - this.margin.top - this.margin.bottom})`)
            .call(d3.axisBottom(x))
            .selectAll('text')
            .attr('transform', 'translate(-10,0)rotate(-45)')
            .style('text-anchor', 'end');
        // Add Y axis
        svg.append('g')
            .call(d3.axisLeft(y));
        // Color scale
        const color = d3.scaleOrdinal()
            .domain(data.map(d => d.status))
            .range(d3.schemeCategory10);
        // Add bars with click events
        svg.selectAll('rect')
            .data(data)
            .enter()
            .append('rect')
            .attr('x', d => x(d.status) || 0)
            .attr('y', d => y(d.count))
            .attr('width', x.bandwidth())
            .attr('height', d => this.height - this.margin.top - this.margin.bottom - y(d.count))
            .attr('fill', d => color(d.status))
            .attr('rx', 4)
            .attr('ry', 4)
            .style('cursor', 'pointer') // Add pointer cursor to indicate clickable
            .on('click', (event, d) => {
            // Navigate to details view with status filter
            void this.router.navigate(['/report-example/details'], {
                queryParams: {
                    category: 'status',
                    value: d.status
                }
            });
        });
        // Add title with theme-aware color
        svg.append('text')
            .attr('x', (this.width - this.margin.left - this.margin.right) / 2)
            .attr('y', -5)
            .attr('text-anchor', 'middle')
            .style('font-size', '16px')
            .style('font-weight', 'bold')
            .style('fill', this.isDark ? '#ffffff' : '#000000')
            .text('Identities by Status');
        // Add clickable labels
        svg.selectAll('.label')
            .data(data)
            .enter()
            .append('text')
            .attr('class', 'label')
            .attr('x', d => (x(d.status) || 0) + x.bandwidth() / 2)
            .attr('y', d => y(d.count) - 5)
            .attr('text-anchor', 'middle')
            .style('cursor', 'pointer') // Add pointer cursor
            .style('fill', this.isDark ? '#ffffff' : '#000000')
            .text(d => d.count)
            .on('click', (event, d) => {
            // Navigate to details view with status filter
            void this.router.navigate(['/report-example/details'], {
                queryParams: {
                    category: 'status',
                    value: d.status
                }
            });
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: IdentityStatusChartComponent, deps: [{ token: i1$2.Router }, { token: ThemeService }], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "20.1.3", type: IdentityStatusChartComponent, isStandalone: true, selector: "app-identity-status-chart", inputs: { identities: "identities" }, viewQueries: [{ propertyName: "barChartContainer", first: true, predicate: ["barChart"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: "<div class=\"chart-container\">\r\n  <div #barChart class=\"chart\"></div>\r\n</div>", styles: [".chart-container{padding:16px;display:flex;justify-content:center}.chart{width:100%;min-height:400px}:host ::ng-deep .label{font-size:12px;font-weight:500}:host ::ng-deep .axis-label{font-size:14px;font-weight:500}:host ::ng-deep rect:hover{opacity:.8;stroke:#333;stroke-width:1px}:host ::ng-deep .label:hover{font-weight:700}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }], preserveWhitespaces: true });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: IdentityStatusChartComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-identity-status-chart', standalone: true, imports: [
                        CommonModule,
                    ], template: "<div class=\"chart-container\">\r\n  <div #barChart class=\"chart\"></div>\r\n</div>", styles: [".chart-container{padding:16px;display:flex;justify-content:center}.chart{width:100%;min-height:400px}:host ::ng-deep .label{font-size:12px;font-weight:500}:host ::ng-deep .axis-label{font-size:14px;font-weight:500}:host ::ng-deep rect:hover{opacity:.8;stroke:#333;stroke-width:1px}:host ::ng-deep .label:hover{font-weight:700}\n"] }]
        }], ctorParameters: () => [{ type: i1$2.Router }, { type: ThemeService }], propDecorators: { identities: [{
                type: Input
            }], barChartContainer: [{
                type: ViewChild,
                args: ['barChart', { static: true }]
            }] } });

class ManagerDistributionChartComponent {
    router;
    themeService;
    destroy$ = new Subject();
    isDark = false;
    constructor(router, themeService) {
        this.router = router;
        this.themeService = themeService;
        this.themeService.isDark$
            .pipe(takeUntil(this.destroy$))
            .subscribe(isDark => {
            this.isDark = isDark;
            if (this.identities.length > 0) {
                this.renderManagerDistributionChart();
            }
        });
    }
    identities = [];
    pieChartContainer;
    // Chart dimensions
    width = 700;
    height = 400;
    ngOnChanges(changes) {
        if (changes['identities'] && this.identities.length > 0) {
            this.renderManagerDistributionChart();
        }
    }
    renderManagerDistributionChart() {
        if (!this.pieChartContainer)
            return;
        const element = this.pieChartContainer.nativeElement;
        d3.select(element).selectAll('*').remove();
        // Count identities with/without managers
        const withManager = this.identities.filter(i => i.managerRef && i.managerRef.id).length;
        const withoutManager = this.identities.length - withManager;
        const data = [
            { label: 'With Manager', value: withManager },
            { label: 'Without Manager', value: withoutManager }
        ];
        const radius = Math.min(this.width, this.height) / 2 - 50;
        const svg = d3.select(element)
            .append('svg')
            .attr('width', this.width)
            .attr('height', this.height)
            .append('g')
            .attr('transform', `translate(${this.width / 2},${this.height / 2})`);
        const color = d3.scaleOrdinal()
            .domain(data.map(d => d.label))
            .range(['#4CAF50', '#F44336']);
        const pie = d3.pie()
            .value(d => d.value);
        const arc = d3.arc()
            .innerRadius(0)
            .outerRadius(radius);
        const outerArc = d3.arc()
            .innerRadius(radius * 0.9)
            .outerRadius(radius * 0.9);
        const arcs = svg.selectAll('arc')
            .data(pie(data))
            .enter()
            .append('g')
            .attr('class', 'arc');
        arcs.append('path')
            .attr('d', d => {
            // Cast to any to bypass type checking for D3's complex types
            // Using 'as any' is required here since D3's type system doesn't properly align
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            return arc(d) || '';
        })
            .attr('fill', d => color(d.data.label))
            .style('cursor', 'pointer') // Add pointer cursor
            .on('click', (event, d) => {
            // Navigate to details view with manager filter
            void this.router.navigate(['/report-example/details'], {
                queryParams: {
                    category: 'manager',
                    value: d.data.label
                }
            });
        });
        // Add title with theme-aware color
        svg.append('text')
            .attr('x', 0)
            .attr('y', -radius - 20)
            .attr('text-anchor', 'middle')
            .style('font-size', '16px')
            .style('font-weight', 'bold')
            .style('fill', this.isDark ? '#ffffff' : '#000000')
            .text('Manager Distribution');
        // Add labels with lines
        arcs.append('text')
            .attr('transform', d => {
            // Cast to any to bypass type checking for D3's complex types
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            const pos = outerArc.centroid(d) || [0, 0];
            const midAngle = d.startAngle + (d.endAngle - d.startAngle) / 2;
            pos[0] = radius * 0.99 * (midAngle < Math.PI ? 1 : -1);
            return `translate(${pos[0]},${pos[1]})`;
        })
            .attr('dy', '.35em')
            .attr('text-anchor', d => {
            const midAngle = d.startAngle + (d.endAngle - d.startAngle) / 2;
            return midAngle < Math.PI ? 'start' : 'end';
        })
            .attr('class', 'pie-label')
            .style('cursor', 'pointer')
            .style('fill', this.isDark ? '#ffffff' : '#000000')
            .text(d => `${d.data.label}: ${d.data.value} (${Math.round(d.data.value / this.identities.length * 100)}%)`)
            .on('click', (event, d) => {
            // Navigate to details view with manager filter
            void this.router.navigate(['/report-example/details'], {
                queryParams: {
                    category: 'manager',
                    value: d.data.label
                }
            });
        });
        // Add polylines
        arcs.append('polyline')
            .attr('points', d => {
            // Cast to any to bypass type checking for D3's complex types
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            const pos = outerArc.centroid(d) || [0, 0];
            const midAngle = d.startAngle + (d.endAngle - d.startAngle) / 2;
            pos[0] = radius * 0.95 * (midAngle < Math.PI ? 1 : -1);
            // Cast to any to bypass type checking for D3's complex types
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            const arcCentroid = arc.centroid(d) || [0, 0];
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            const outerArcCentroid = outerArc.centroid(d) || [0, 0];
            return `${arcCentroid[0]},${arcCentroid[1]},${outerArcCentroid[0]},${outerArcCentroid[1]},${pos[0]},${pos[1]}`;
        })
            .style('fill', 'none')
            .style('stroke', 'gray')
            .style('stroke-width', 1);
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: ManagerDistributionChartComponent, deps: [{ token: i1$2.Router }, { token: ThemeService }], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "20.1.3", type: ManagerDistributionChartComponent, isStandalone: true, selector: "app-manager-distribution-chart", inputs: { identities: "identities" }, viewQueries: [{ propertyName: "pieChartContainer", first: true, predicate: ["pieChart"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: "<div class=\"chart-container\">\r\n  <div #pieChart class=\"chart\"></div>\r\n</div>", styles: [".chart-container{padding:16px;display:flex;justify-content:center}.chart{width:100%;min-height:400px}:host ::ng-deep text{font-size:12px;font-weight:500}:host ::ng-deep path:hover{opacity:.8;stroke:#fff;stroke-width:2px}:host ::ng-deep .pie-label:hover{font-weight:700}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }], preserveWhitespaces: true });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: ManagerDistributionChartComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-manager-distribution-chart', standalone: true, imports: [
                        CommonModule,
                    ], template: "<div class=\"chart-container\">\r\n  <div #pieChart class=\"chart\"></div>\r\n</div>", styles: [".chart-container{padding:16px;display:flex;justify-content:center}.chart{width:100%;min-height:400px}:host ::ng-deep text{font-size:12px;font-weight:500}:host ::ng-deep path:hover{opacity:.8;stroke:#fff;stroke-width:2px}:host ::ng-deep .pie-label:hover{font-weight:700}\n"] }]
        }], ctorParameters: () => [{ type: i1$2.Router }, { type: ThemeService }], propDecorators: { identities: [{
                type: Input
            }], pieChartContainer: [{
                type: ViewChild,
                args: ['pieChart', { static: true }]
            }] } });

class LifecycleStateChartComponent {
    router;
    themeService;
    destroy$ = new Subject();
    isDark = false;
    constructor(router, themeService) {
        this.router = router;
        this.themeService = themeService;
        this.themeService.isDark$
            .pipe(takeUntil(this.destroy$))
            .subscribe(isDark => {
            this.isDark = isDark;
            if (this.identities.length > 0) {
                this.renderLifecycleStateChart();
            }
        });
    }
    identities = [];
    lifecycleChartContainer;
    // Chart dimensions
    width = 700;
    height = 400;
    margin = { top: 20, right: 30, bottom: 60, left: 40 };
    ngOnChanges(changes) {
        if (changes['identities'] && this.identities.length > 0) {
            this.renderLifecycleStateChart();
        }
    }
    renderLifecycleStateChart() {
        if (!this.lifecycleChartContainer)
            return;
        const element = this.lifecycleChartContainer.nativeElement;
        d3.select(element).selectAll('*').remove();
        // Count identities by lifecycle state
        const lifecycleCounts = {};
        this.identities.forEach(identity => {
            let state = 'Unknown';
            if (identity.lifecycleState && identity.lifecycleState.stateName) {
                state = identity.lifecycleState.stateName;
            }
            else if (identity.attributes && 'cloudLifecycleState' in identity.attributes) {
                state = identity.attributes.cloudLifecycleState;
            }
            lifecycleCounts[state] = (lifecycleCounts[state] || 0) + 1;
        });
        const data = Object.entries(lifecycleCounts)
            .map(([key, value]) => ({ state: key, count: value }))
            .sort((a, b) => b.count - a.count);
        const svg = d3.select(element)
            .append('svg')
            .attr('width', this.width)
            .attr('height', this.height)
            .append('g')
            .attr('transform', `translate(${this.margin.left},${this.margin.top})`);
        const x = d3.scaleBand()
            .domain(data.map(d => d.state))
            .range([0, this.width - this.margin.left - this.margin.right])
            .padding(0.2);
        const y = d3.scaleLinear()
            .domain([0, d3.max(data, d => d.count) || 0])
            .nice()
            .range([this.height - this.margin.top - this.margin.bottom, 0]);
        // Add X axis
        svg.append('g')
            .attr('transform', `translate(0,${this.height - this.margin.top - this.margin.bottom})`)
            .call(d3.axisBottom(x))
            .selectAll('text')
            .attr('transform', 'translate(-10,0)rotate(-45)')
            .style('text-anchor', 'end');
        // Add Y axis
        svg.append('g')
            .call(d3.axisLeft(y));
        // Color scale
        const color = d3.scaleOrdinal()
            .domain(data.map(d => d.state))
            .range(d3.schemeSet2);
        // Add horizontal lines
        svg.selectAll('.grid-line')
            .data(y.ticks())
            .enter()
            .append('line')
            .attr('class', 'grid-line')
            .attr('x1', 0)
            .attr('x2', this.width - this.margin.left - this.margin.right)
            .attr('y1', d => y(d))
            .attr('y2', d => y(d))
            .attr('stroke', '#e0e0e0')
            .attr('stroke-width', 0.5);
        // Add clickable bars
        svg.selectAll('rect')
            .data(data)
            .enter()
            .append('rect')
            .attr('x', d => x(d.state) || 0)
            .attr('y', d => y(d.count))
            .attr('width', x.bandwidth())
            .attr('height', d => this.height - this.margin.top - this.margin.bottom - y(d.count))
            .attr('fill', d => color(d.state))
            .attr('rx', 4)
            .attr('ry', 4)
            .style('cursor', 'pointer')
            .on('click', (event, d) => {
            // Navigate to details view with lifecycle state filter
            void this.router.navigate(['/report-example/details'], {
                queryParams: {
                    category: 'lifecycle',
                    value: d.state
                }
            });
        });
        // Add title with theme-aware color
        svg.append('text')
            .attr('x', (this.width - this.margin.left - this.margin.right) / 2)
            .attr('y', -5)
            .attr('text-anchor', 'middle')
            .style('font-size', '16px')
            .style('font-weight', 'bold')
            .style('fill', this.isDark ? '#ffffff' : '#000000')
            .text('Identities by Lifecycle State');
        // Add clickable labels
        svg.selectAll('.label')
            .data(data)
            .enter()
            .append('text')
            .attr('class', 'label')
            .attr('x', d => (x(d.state) || 0) + x.bandwidth() / 2)
            .attr('y', d => y(d.count) - 5)
            .attr('text-anchor', 'middle')
            .style('cursor', 'pointer')
            .style('fill', this.isDark ? '#ffffff' : '#000000')
            .text(d => d.count)
            .on('click', (event, d) => {
            // Navigate to details view with lifecycle state filter
            void this.router.navigate(['/report-example/details'], {
                queryParams: {
                    category: 'lifecycle',
                    value: d.state
                }
            });
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: LifecycleStateChartComponent, deps: [{ token: i1$2.Router }, { token: ThemeService }], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "20.1.3", type: LifecycleStateChartComponent, isStandalone: true, selector: "app-lifecycle-state-chart", inputs: { identities: "identities" }, viewQueries: [{ propertyName: "lifecycleChartContainer", first: true, predicate: ["lifecycleChart"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: "<div class=\"chart-container\">\r\n  <div #lifecycleChart class=\"chart\"></div>\r\n</div>", styles: [".chart-container{padding:16px;display:flex;justify-content:center}.chart{width:100%;min-height:400px}:host ::ng-deep .label{font-size:12px;font-weight:500}:host ::ng-deep .axis-label{font-size:14px;font-weight:500}:host ::ng-deep .grid-line{stroke:#e0e0e0;stroke-width:.5}:host ::ng-deep rect:hover{opacity:.8;stroke:#333;stroke-width:1px}:host ::ng-deep .label:hover{font-weight:700}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }], preserveWhitespaces: true });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: LifecycleStateChartComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-lifecycle-state-chart', standalone: true, imports: [
                        CommonModule,
                    ], template: "<div class=\"chart-container\">\r\n  <div #lifecycleChart class=\"chart\"></div>\r\n</div>", styles: [".chart-container{padding:16px;display:flex;justify-content:center}.chart{width:100%;min-height:400px}:host ::ng-deep .label{font-size:12px;font-weight:500}:host ::ng-deep .axis-label{font-size:14px;font-weight:500}:host ::ng-deep .grid-line{stroke:#e0e0e0;stroke-width:.5}:host ::ng-deep rect:hover{opacity:.8;stroke:#333;stroke-width:1px}:host ::ng-deep .label:hover{font-weight:700}\n"] }]
        }], ctorParameters: () => [{ type: i1$2.Router }, { type: ThemeService }], propDecorators: { identities: [{
                type: Input
            }], lifecycleChartContainer: [{
                type: ViewChild,
                args: ['lifecycleChart', { static: true }]
            }] } });

class ReportExampleComponent {
    sdk;
    dataService;
    themeService;
    destroy$ = new Subject();
    title = 'Identity Analytics';
    loadingMessage = 'Loading identity data...';
    isCancelled = false;
    isLoadingComplete = false;
    isDark = false;
    // Data properties
    identities = [];
    loading = false;
    hasError = false;
    errorMessage = '';
    totalLoaded = 0;
    constructor(sdk, dataService, themeService) {
        this.sdk = sdk;
        this.dataService = dataService;
        this.themeService = themeService;
        this.themeService.isDark$
            .pipe(takeUntil(this.destroy$))
            .subscribe(isDark => {
            this.isDark = isDark;
        });
    }
    ngOnInit() {
        // Check if data is already loaded in the service
        if (this.dataService.hasLoadedData()) {
            console.log('Using cached identity data');
            this.identities = this.dataService.getIdentities();
            this.totalLoaded = this.identities.length;
            this.isLoadingComplete = this.dataService.isDataComplete();
        }
        else {
            // No cached data, load from API
            void this.loadIdentities();
        }
    }
    cancelLoading() {
        this.isCancelled = true;
        console.log('Loading cancelled by user');
        this.loadingMessage = 'Loading cancelled. Displaying partial results...';
    }
    async loadIdentities() {
        this.loading = true;
        this.hasError = false;
        this.identities = [];
        this.isCancelled = false;
        this.isLoadingComplete = false;
        const BATCH_SIZE = 250; // API max limit
        const MAX_PARALLEL_REQUESTS = 8; // Number of parallel fetch threads
        let offset = 0;
        this.totalLoaded = 0;
        try {
            // First, make one request to get an idea of the total count
            const initialResponse = await this.sdk.listIdentities({
                limit: BATCH_SIZE,
                offset: 0,
                count: true
            });
            const initialBatch = initialResponse.data || [];
            this.identities = [...initialBatch];
            this.totalLoaded = initialBatch.length;
            // If the first batch is less than BATCH_SIZE, we already have all the data
            if (initialBatch.length < BATCH_SIZE) {
                this.isLoadingComplete = true;
                console.log(`Completed loading ${this.identities.length} total identities`);
                this.dataService.setIdentities(this.identities, this.isLoadingComplete);
                this.loading = false;
                return;
            }
            // Start with offset after the first batch
            offset = BATCH_SIZE;
            // Continue fetching batches in parallel until cancelled or no more data
            while (!this.isCancelled) {
                this.loadingMessage = `Loading identities... (${this.totalLoaded} loaded so far)`;
                // Create an array of promises for parallel requests
                const batchPromises = [];
                for (let i = 0; i < MAX_PARALLEL_REQUESTS && !this.isCancelled; i++) {
                    const currentOffset = offset + (i * BATCH_SIZE);
                    // Create a promise for each batch request
                    const batchPromise = this.sdk.listIdentities({
                        limit: BATCH_SIZE,
                        offset: currentOffset,
                        count: true
                    });
                    batchPromises.push(batchPromise);
                }
                if (batchPromises.length === 0) {
                    break; // Exit if no promises were created (cancelled)
                }
                // Wait for all parallel requests to complete
                const batchResponses = await Promise.all(batchPromises);
                // Process all responses
                let hasMoreData = false;
                for (const response of batchResponses) {
                    const batchData = response.data || [];
                    // Add the batch to our collected identities
                    this.identities = [...this.identities, ...batchData];
                    // Check if this batch indicates more data available
                    if (batchData.length === BATCH_SIZE) {
                        hasMoreData = true;
                    }
                }
                this.totalLoaded = this.identities.length;
                // Update offset for next parallel batch
                offset += (BATCH_SIZE * MAX_PARALLEL_REQUESTS);
                // If no batch was full size, we've reached the end
                if (!hasMoreData) {
                    this.isLoadingComplete = true;
                    break;
                }
            }
            if (this.isCancelled) {
                console.log(`Loading cancelled. Loaded ${this.identities.length} identities so far.`);
            }
            else {
                console.log(`Completed loading ${this.identities.length} total identities`);
                this.isLoadingComplete = true;
            }
            this.loadingMessage = 'Loading identity data...'; // Reset the message for next time
            // Store identities in the shared service with completion state
            this.dataService.setIdentities(this.identities, this.isLoadingComplete);
        }
        catch (error) {
            this.hasError = true;
            this.errorMessage = `Error loading identities: ${String(error)}`;
        }
        finally {
            this.loading = false;
        }
    }
    refresh() {
        // Force reload from API, ignoring cache
        this.isCancelled = false;
        this.isLoadingComplete = false;
        void this.loadIdentities();
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: ReportExampleComponent, deps: [{ token: SailPointSDKService }, { token: ReportDataService }, { token: ThemeService }], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "20.1.3", type: ReportExampleComponent, isStandalone: true, selector: "app-report-example", ngImport: i0, template: "<div class=\"report-example-container\">\r\n  <mat-toolbar color=\"primary\">\r\n    <mat-icon>insert_chart</mat-icon>\r\n    <span class=\"toolbar-title\">{{ title }}</span>\r\n    \r\n    <div class=\"spacer\"></div>\r\n    \r\n    <button mat-icon-button (click)=\"refresh()\" aria-label=\"Refresh data\">\r\n      <mat-icon>refresh</mat-icon>\r\n    </button>\r\n  </mat-toolbar>\r\n\r\n  <div class=\"content\">\r\n    <div *ngIf=\"loading\" class=\"loading-container\">\r\n      <mat-spinner diameter=\"40\"></mat-spinner>\r\n      <p>{{ loadingMessage }}</p>\r\n      <button mat-raised-button color=\"warn\" (click)=\"cancelLoading()\" class=\"cancel-button\">\r\n        Cancel & View Partial Results\r\n      </button>\r\n    </div>\r\n\r\n    <div *ngIf=\"hasError\" class=\"error-container\">\r\n      <mat-icon color=\"warn\">error</mat-icon>\r\n      <p>{{ errorMessage }}</p>\r\n      <button mat-raised-button color=\"primary\" (click)=\"refresh()\">\r\n        Try Again\r\n      </button>\r\n    </div>\r\n\r\n    <div *ngIf=\"!loading && !hasError\" class=\"charts-container\">\r\n      <mat-card>\r\n        <mat-card-header>\r\n          <mat-card-title>Identity Data Visualization</mat-card-title>\r\n          <mat-card-subtitle>\r\n            Visual analytics based on identity data\r\n            <span *ngIf=\"!isLoadingComplete && totalLoaded > 0\" class=\"partial-data-badge\">\r\n              Partial Data ({{ totalLoaded }} identities)\r\n            </span>\r\n          </mat-card-subtitle>\r\n        </mat-card-header>\r\n        \r\n        <mat-card-content>\r\n          <div *ngIf=\"identities.length === 0\" class=\"no-data\">\r\n            <mat-icon>info</mat-icon>\r\n            <p>No identity data available</p>\r\n          </div>\r\n\r\n          <div *ngIf=\"identities.length > 0\" class=\"charts-content\">\r\n            <div class=\"chart-section\">\r\n              <h3>Status Distribution</h3>\r\n              <mat-divider></mat-divider>\r\n              <app-identity-status-chart [identities]=\"identities\"></app-identity-status-chart>\r\n            </div>\r\n\r\n            <div class=\"chart-section\">\r\n              <h3>Manager Distribution</h3>\r\n              <mat-divider></mat-divider>\r\n              <app-manager-distribution-chart [identities]=\"identities\"></app-manager-distribution-chart>\r\n            </div>\r\n\r\n            <div class=\"chart-section\">\r\n              <h3>Lifecycle States</h3>\r\n              <mat-divider></mat-divider>\r\n              <app-lifecycle-state-chart [identities]=\"identities\"></app-lifecycle-state-chart>\r\n            </div>\r\n            \r\n            <div class=\"data-summary\" [ngStyle]=\"{'--background-color': isDark ? '#333333' : '#f5f5f5', '--text-color': isDark ? '#ffffff' : 'inherit'}\">\r\n              <p>\r\n                <strong>Total Identities:</strong> {{ identities.length }}\r\n                <span *ngIf=\"!isLoadingComplete && identities.length > 0\" class=\"partial-data-note\">\r\n                  (Partial data - loading was cancelled)\r\n                </span>\r\n                <span *ngIf=\"isLoadingComplete\" class=\"complete-data-note\">\r\n                  (Complete dataset)\r\n                </span>\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n  </div>\r\n</div>\r\n", styles: [".report-example-container{height:100%;display:flex;flex-direction:column}.toolbar-title{margin-left:16px}.spacer{flex:1 1 auto}.content{padding:24px;flex:1;overflow-y:auto}mat-card{max-width:900px;margin:0 auto}.loading-container,.error-container,.no-data{display:flex;flex-direction:column;align-items:center;justify-content:center;padding:64px;text-align:center}.error-container mat-icon,.no-data mat-icon{font-size:48px;height:48px;width:48px;margin-bottom:16px}.error-container mat-icon{color:#f44336}.charts-container{width:100%}.charts-content{margin-top:16px}.chart-section{margin-bottom:48px}.chart-section h3{font-size:18px;font-weight:500;margin-bottom:8px}.chart-container{padding:16px;display:flex;justify-content:center}.chart{width:100%;min-height:400px}.data-summary{margin-top:24px;padding:16px;background-color:var(--background-color, #f5f5f5);color:var(--text-color, inherit);border-radius:4px}.cancel-button{margin-top:16px}.partial-data-badge{display:inline-block;background-color:#ff9800;color:#fff;border-radius:4px;padding:2px 8px;font-size:12px;margin-left:8px;font-weight:500}.partial-data-note{color:#ff9800;font-style:italic;margin-left:6px}.complete-data-note{color:#4caf50;font-style:italic;margin-left:6px}::ng-deep .label{font-size:12px;font-weight:500}::ng-deep .axis-label{font-size:14px;font-weight:500}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "ngmodule", type: RouterModule }, { kind: "ngmodule", type: MatButtonModule }, { kind: "component", type: i5.MatButton, selector: "    button[matButton], a[matButton], button[mat-button], button[mat-raised-button],    button[mat-flat-button], button[mat-stroked-button], a[mat-button], a[mat-raised-button],    a[mat-flat-button], a[mat-stroked-button]  ", inputs: ["matButton"], exportAs: ["matButton", "matAnchor"] }, { kind: "component", type: i5.MatIconButton, selector: "button[mat-icon-button], a[mat-icon-button], button[matIconButton], a[matIconButton]", exportAs: ["matButton", "matAnchor"] }, { kind: "ngmodule", type: MatCardModule }, { kind: "component", type: i6$4.MatCard, selector: "mat-card", inputs: ["appearance"], exportAs: ["matCard"] }, { kind: "directive", type: i6$4.MatCardContent, selector: "mat-card-content" }, { kind: "component", type: i6$4.MatCardHeader, selector: "mat-card-header" }, { kind: "directive", type: i6$4.MatCardSubtitle, selector: "mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]" }, { kind: "directive", type: i6$4.MatCardTitle, selector: "mat-card-title, [mat-card-title], [matCardTitle]" }, { kind: "ngmodule", type: MatIconModule }, { kind: "component", type: i6.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "ngmodule", type: MatTableModule }, { kind: "ngmodule", type: MatToolbarModule }, { kind: "component", type: i8$2.MatToolbar, selector: "mat-toolbar", inputs: ["color"], exportAs: ["matToolbar"] }, { kind: "ngmodule", type: MatProgressSpinnerModule }, { kind: "component", type: i8.MatProgressSpinner, selector: "mat-progress-spinner, mat-spinner", inputs: ["color", "mode", "value", "diameter", "strokeWidth"], exportAs: ["matProgressSpinner"] }, { kind: "ngmodule", type: MatTabsModule }, { kind: "ngmodule", type: MatDividerModule }, { kind: "component", type: i10$1.MatDivider, selector: "mat-divider", inputs: ["vertical", "inset"] }, { kind: "component", type: IdentityStatusChartComponent, selector: "app-identity-status-chart", inputs: ["identities"] }, { kind: "component", type: ManagerDistributionChartComponent, selector: "app-manager-distribution-chart", inputs: ["identities"] }, { kind: "component", type: LifecycleStateChartComponent, selector: "app-lifecycle-state-chart", inputs: ["identities"] }], preserveWhitespaces: true });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: ReportExampleComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-report-example', standalone: true, imports: [
                        CommonModule,
                        RouterModule,
                        MatButtonModule,
                        MatCardModule,
                        MatIconModule,
                        MatTableModule,
                        MatToolbarModule,
                        MatProgressSpinnerModule,
                        MatTabsModule,
                        MatDividerModule,
                        IdentityStatusChartComponent,
                        ManagerDistributionChartComponent,
                        LifecycleStateChartComponent
                    ], template: "<div class=\"report-example-container\">\r\n  <mat-toolbar color=\"primary\">\r\n    <mat-icon>insert_chart</mat-icon>\r\n    <span class=\"toolbar-title\">{{ title }}</span>\r\n    \r\n    <div class=\"spacer\"></div>\r\n    \r\n    <button mat-icon-button (click)=\"refresh()\" aria-label=\"Refresh data\">\r\n      <mat-icon>refresh</mat-icon>\r\n    </button>\r\n  </mat-toolbar>\r\n\r\n  <div class=\"content\">\r\n    <div *ngIf=\"loading\" class=\"loading-container\">\r\n      <mat-spinner diameter=\"40\"></mat-spinner>\r\n      <p>{{ loadingMessage }}</p>\r\n      <button mat-raised-button color=\"warn\" (click)=\"cancelLoading()\" class=\"cancel-button\">\r\n        Cancel & View Partial Results\r\n      </button>\r\n    </div>\r\n\r\n    <div *ngIf=\"hasError\" class=\"error-container\">\r\n      <mat-icon color=\"warn\">error</mat-icon>\r\n      <p>{{ errorMessage }}</p>\r\n      <button mat-raised-button color=\"primary\" (click)=\"refresh()\">\r\n        Try Again\r\n      </button>\r\n    </div>\r\n\r\n    <div *ngIf=\"!loading && !hasError\" class=\"charts-container\">\r\n      <mat-card>\r\n        <mat-card-header>\r\n          <mat-card-title>Identity Data Visualization</mat-card-title>\r\n          <mat-card-subtitle>\r\n            Visual analytics based on identity data\r\n            <span *ngIf=\"!isLoadingComplete && totalLoaded > 0\" class=\"partial-data-badge\">\r\n              Partial Data ({{ totalLoaded }} identities)\r\n            </span>\r\n          </mat-card-subtitle>\r\n        </mat-card-header>\r\n        \r\n        <mat-card-content>\r\n          <div *ngIf=\"identities.length === 0\" class=\"no-data\">\r\n            <mat-icon>info</mat-icon>\r\n            <p>No identity data available</p>\r\n          </div>\r\n\r\n          <div *ngIf=\"identities.length > 0\" class=\"charts-content\">\r\n            <div class=\"chart-section\">\r\n              <h3>Status Distribution</h3>\r\n              <mat-divider></mat-divider>\r\n              <app-identity-status-chart [identities]=\"identities\"></app-identity-status-chart>\r\n            </div>\r\n\r\n            <div class=\"chart-section\">\r\n              <h3>Manager Distribution</h3>\r\n              <mat-divider></mat-divider>\r\n              <app-manager-distribution-chart [identities]=\"identities\"></app-manager-distribution-chart>\r\n            </div>\r\n\r\n            <div class=\"chart-section\">\r\n              <h3>Lifecycle States</h3>\r\n              <mat-divider></mat-divider>\r\n              <app-lifecycle-state-chart [identities]=\"identities\"></app-lifecycle-state-chart>\r\n            </div>\r\n            \r\n            <div class=\"data-summary\" [ngStyle]=\"{'--background-color': isDark ? '#333333' : '#f5f5f5', '--text-color': isDark ? '#ffffff' : 'inherit'}\">\r\n              <p>\r\n                <strong>Total Identities:</strong> {{ identities.length }}\r\n                <span *ngIf=\"!isLoadingComplete && identities.length > 0\" class=\"partial-data-note\">\r\n                  (Partial data - loading was cancelled)\r\n                </span>\r\n                <span *ngIf=\"isLoadingComplete\" class=\"complete-data-note\">\r\n                  (Complete dataset)\r\n                </span>\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n  </div>\r\n</div>\r\n", styles: [".report-example-container{height:100%;display:flex;flex-direction:column}.toolbar-title{margin-left:16px}.spacer{flex:1 1 auto}.content{padding:24px;flex:1;overflow-y:auto}mat-card{max-width:900px;margin:0 auto}.loading-container,.error-container,.no-data{display:flex;flex-direction:column;align-items:center;justify-content:center;padding:64px;text-align:center}.error-container mat-icon,.no-data mat-icon{font-size:48px;height:48px;width:48px;margin-bottom:16px}.error-container mat-icon{color:#f44336}.charts-container{width:100%}.charts-content{margin-top:16px}.chart-section{margin-bottom:48px}.chart-section h3{font-size:18px;font-weight:500;margin-bottom:8px}.chart-container{padding:16px;display:flex;justify-content:center}.chart{width:100%;min-height:400px}.data-summary{margin-top:24px;padding:16px;background-color:var(--background-color, #f5f5f5);color:var(--text-color, inherit);border-radius:4px}.cancel-button{margin-top:16px}.partial-data-badge{display:inline-block;background-color:#ff9800;color:#fff;border-radius:4px;padding:2px 8px;font-size:12px;margin-left:8px;font-weight:500}.partial-data-note{color:#ff9800;font-style:italic;margin-left:6px}.complete-data-note{color:#4caf50;font-style:italic;margin-left:6px}::ng-deep .label{font-size:12px;font-weight:500}::ng-deep .axis-label{font-size:14px;font-weight:500}\n"] }]
        }], ctorParameters: () => [{ type: SailPointSDKService }, { type: ReportDataService }, { type: ThemeService }] });

const REPORT_EXAMPLE_ROUTES = [
    {
        path: '',
        component: ReportExampleComponent
    },
    {
        path: 'details',
        component: IdentityDetailViewComponent
    }
];

class SailpointComponentsComponent {
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: SailpointComponentsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "20.1.3", type: SailpointComponentsComponent, isStandalone: true, selector: "app-sailpoint-components", ngImport: i0, template: `
    <p>
      sailpoint-components works!
    </p>
  `, isInline: true, styles: [""], preserveWhitespaces: true });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: SailpointComponentsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-sailpoint-components', imports: [], template: `
    <p>
      sailpoint-components works!
    </p>
  ` }]
        }] });

class SailpointComponentsService {
    constructor() { }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: SailpointComponentsService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: SailpointComponentsService, providedIn: 'root' });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: SailpointComponentsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [] });

/// <reference path="../../global.ts" />
// Angular core and common modules
class ThemePickerComponent {
    themeService;
    cdr;
    snackBar;
    title = 'Theme Picker';
    selectedLogoFileName = '';
    // Reference to the logo <img> in the template
    logoImageRef;
    // now type the fields so that `key` is ONLY one of the keys of ThemeConfig:
    colorFields = [
        { label: 'Primary', key: 'primary' },
        { label: 'Secondary', key: 'secondary' },
        { label: 'Primary Text', key: 'primaryText' },
        { label: 'Secondary Text', key: 'secondaryText' },
        { label: 'Hover Text', key: 'hoverText' },
        { label: 'Background', key: 'background' },
    ];
    // Track current theme mode
    mode = 'light'; // Will be initialized in constructor
    // Spinner visibility
    loading = false;
    // Factory for empty theme object
    emptyTheme() {
        return {
            primary: '',
            secondary: '',
            primaryText: '',
            secondaryText: '',
            hoverText: '',
            background: '',
            logoLight: '',
            logoDark: '',
        };
    }
    // Store theme colors for each mode
    lightColors = { ...this.emptyTheme() };
    darkColors = { ...this.emptyTheme() };
    // Getter for current mode's color config
    get colors() {
        return this.mode === 'dark' ? this.darkColors : this.lightColors;
    }
    // Setter for updating current mode's color config
    set colors(value) {
        if (this.mode === 'dark') {
            this.darkColors = structuredClone(value);
        }
        else {
            this.lightColors = structuredClone(value);
        }
    }
    ignoreNextDarkChange = false; // reserved for preventing recursive theme toggling (not used here)
    ngOnInit() {
        // Restore mode from local storage
        const storedMode = localStorage.getItem('themeMode') ?? 'light';
        this.mode = storedMode;
        // Load theme config for selected mode
        void this.loadThemeForMode().then(() => {
            // Subscribe to dark mode changes from ThemeService
            this.themeService.isDark$.subscribe((isDark) => {
                const newMode = isDark ? 'dark' : 'light';
                if (newMode === this.mode)
                    return; // Avoid redundant updates
                this.mode = newMode;
                void this.loadThemeForMode(); // Reload theme config on mode change
            });
        });
    }
    // Handler for manual mode toggle (e.g., from UI switch)
    async onModeChange() {
        localStorage.setItem('themeMode', this.mode);
        const loaded = await this.themeService.loadTheme(this.mode, false); // Don't apply automatically
        this.colors = structuredClone(loaded);
        this.themeService['applyTheme'](this.colors, this.mode); // Apply manually
    }
    // Set selected logo file from file input
    selectedLogoFile;
    onFileSelected(event) {
        const input = event.target;
        if (!input.files?.length) {
            return;
        }
        const file = input.files[0];
        // only allow PNG
        if (file.type !== 'image/png' &&
            !file.name.toLowerCase().endsWith('.png')) {
            this.snackBar.open('Please select a PNG image.', 'Close', {
                duration: 3000,
            });
            input.value = ''; // clear invalid selection
            return;
        }
        this.selectedLogoFile = file;
        this.selectedLogoFileName = file.name;
    }
    // Load both light and dark themes into memory (from config or default)
    async loadThemeForMode() {
        const raw = this.themeService.getRawConfig();
        this.lightColors =
            raw?.['theme-light'] ??
                (await this.themeService.getDefaultTheme('light'));
        this.darkColors =
            raw?.['theme-dark'] ?? (await this.themeService.getDefaultTheme('dark'));
        // now populate the displayed “filename” field
        this.selectedLogoFileName =
            this.mode === 'dark'
                ? this.darkColors.logoDarkFileName || ''
                : this.lightColors.logoLightFileName || '';
    }
    constructor(themeService, cdr, snackBar) {
        this.themeService = themeService;
        this.cdr = cdr;
        this.snackBar = snackBar;
        // Initialize mode after dependency injection
        this.mode = this.themeService.getCurrentMode();
    }
    // Utility: Read file input into Uint8Array buffer
    readFileAsBuffer(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => resolve(new Uint8Array(reader.result));
            reader.onerror = reject;
            reader.readAsArrayBuffer(file);
        });
    }
    async onResetLogo() {
        if (this.mode === 'dark') {
            this.darkColors.logoDark = 'assets/icons/logo-dark.png';
            this.darkColors.logoDarkFileName = '';
        }
        else {
            this.lightColors.logoLight = 'assets/icons/logo.png';
            this.lightColors.logoLightFileName = '';
        }
        this.selectedLogoFile = undefined;
        this.selectedLogoFileName = '';
        await this.themeService.saveTheme(this.mode === 'dark' ? this.darkColors : this.lightColors, this.mode);
        this.themeService.logoUpdated$.next();
    }
    // Main action to apply the selected theme and optional new logo
    async apply() {
        this.loading = true;
        this.cdr.detectChanges(); // Ensure spinner updates in UI
        try {
            if (this.selectedLogoFile) {
                const buffer = await this.readFileAsBuffer(this.selectedLogoFile);
                const originalFileName = this.selectedLogoFile.name;
                const fileName = this.mode === 'dark' ? 'logo-dark.png' : 'logo.png';
                // Save the logo image to disk and wait for it to be ready
                await window.electronAPI?.writeLogo(buffer, fileName);
                await this.themeService.waitForFile(fileName);
                // Retrieve the base64 image URL for display
                const base64 = await window.electronAPI.getLogoDataUrl(fileName);
                const updatedColors = structuredClone(this.colors);
                // Assign the base64 image as the logo
                if (this.mode === 'dark') {
                    updatedColors.logoDark = base64;
                    updatedColors.logoDarkFileName = originalFileName;
                }
                else {
                    updatedColors.logoLight = base64;
                    updatedColors.logoLightFileName = originalFileName; // Keep original name for light mode
                }
                this.selectedLogoFileName = originalFileName;
                this.colors = updatedColors;
                this.selectedLogoFile = undefined;
            }
            // Save updated theme config
            await this.themeService.saveTheme(this.mode === 'dark' ? this.darkColors : this.lightColors, this.mode);
            // Apply the new theme to the UI
            this.themeService['applyTheme'](this.colors, this.mode);
            this.themeService.logoUpdated$.next(); // Notify subscribers (like the app component)
            // Wait for logo update event or timeout to avoid UI stalling
            await Promise.race([
                new Promise((resolve) => {
                    const sub = this.themeService.logoUpdated$.subscribe(() => {
                        resolve();
                        sub.unsubscribe();
                    });
                }),
                new Promise((resolve) => setTimeout(resolve, 1000)), // fallback timeout
            ]);
        }
        catch (err) {
            console.error('Failed to apply theme:', err);
        }
        finally {
            this.loading = false;
            this.cdr.detectChanges(); // Stop spinner
        }
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: ThemePickerComponent, deps: [{ token: ThemeService }, { token: i0.ChangeDetectorRef }, { token: i4.MatSnackBar }], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "20.1.3", type: ThemePickerComponent, isStandalone: true, selector: "app-theme-picker", viewQueries: [{ propertyName: "logoImageRef", first: true, predicate: ["logoImage"], descendants: true }], ngImport: i0, template: "<div class=\"theme-picker-container\">\r\n  <mat-toolbar color=\"primary\">\r\n    <mat-icon>palette</mat-icon>\r\n    <span class=\"toolbar-title\">{{ title }}</span>\r\n  </mat-toolbar>\r\n\r\n  <div class=\"content\">\r\n    <div class=\"theme-picker\">\r\n      <h2>Theme Customization</h2>\r\n\r\n      <div *ngIf=\"loading\" class=\"spinner-container\">\r\n        <mat-spinner diameter=\"75\"></mat-spinner>\r\n      </div>\r\n\r\n      <!-- Mode selector -->\r\n      <mat-form-field appearance=\"outline\" class=\"form-field\">\r\n        <mat-label>Mode</mat-label>\r\n        <mat-select [(value)]=\"mode\" (selectionChange)=\"onModeChange()\">\r\n          <mat-option value=\"light\">Light</mat-option>\r\n          <mat-option value=\"dark\">Dark</mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n\r\n      <!-- Color + Hex pairs -->\r\n      <ng-container *ngFor=\"let field of colorFields\">\r\n        <div class=\"form-group\">\r\n          <input\r\n            class=\"color-swatch\"\r\n            matInput\r\n            type=\"color\"\r\n            [(ngModel)]=\"colors[field.key]\"\r\n          />\r\n\r\n          <mat-form-field appearance=\"outline\" class=\"hex-field\">\r\n            <mat-label>{{ field.label }} Hex</mat-label>\r\n            <input\r\n              matInput\r\n              type=\"text\"\r\n              [(ngModel)]=\"colors[field.key]\"\r\n              maxlength=\"7\"\r\n              pattern=\"#[A-Fa-f0-9]{6}\"\r\n            />\r\n          </mat-form-field>\r\n        </div>\r\n      </ng-container>\r\n\r\n      <div class=\"form-group\">\r\n        <mat-form-field appearance=\"outline\" class=\"upload-logo-label\">\r\n          <mat-label>Upload Logo ({{ mode }})</mat-label>\r\n\r\n          <input\r\n            matInput\r\n            [value]=\"selectedLogoFileName || 'No file chosen\u2026'\"\r\n            readonly\r\n          />\r\n          <div matSuffix class=\"logo-suffix\">\r\n            <button\r\n              class=\"upload-button\"\r\n              mat-icon-button\r\n              aria-label=\"Select logo file\"\r\n              (click)=\"fileInput.click()\"\r\n            >\r\n              <mat-icon>upload</mat-icon>\r\n            </button>\r\n\r\n            <button\r\n              *ngIf=\"selectedLogoFileName\"\r\n              class=\"reset-button\"\r\n              mat-icon-button\r\n              aria-label=\"Reset to default\"\r\n              (click)=\"onResetLogo()\"\r\n            >\r\n              <mat-icon>autorenew</mat-icon>\r\n            </button>\r\n          </div>\r\n\r\n          <input\r\n            #fileInput\r\n            type=\"file\"\r\n            accept=\"image/png\"\r\n            hidden\r\n            (change)=\"onFileSelected($event)\"\r\n          />\r\n        </mat-form-field>\r\n      </div>\r\n\r\n      <div class=\"actions\">\r\n        <button mat-raised-button color=\"primary\" (click)=\"apply()\">\r\n          Apply\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n", styles: [".theme-picker-container{height:100%;display:flex;flex-direction:column}.spinner-container{position:absolute;top:0;left:0;width:100%;height:100%;display:flex;justify-content:center;align-items:center;z-index:999}.toolbar-title{margin-left:16px}.content{padding:24px;flex:1;overflow-y:auto}mat-card{max-width:800px;margin:0 auto}mat-card-actions{display:flex;gap:8px;padding:16px}mat-card-actions button{display:flex;align-items:center;gap:8px}.theme-picker{max-width:500px;margin:2rem auto;padding:2rem;border-radius:10px;box-shadow:0 4px 10px #00000026;font-family:Segoe UI,sans-serif;transition:background-color .3s ease,color .3s ease;background-color:var(--theme-background)!important;border:1px solid var(--theme-primary-text)!important}.theme-picker h2{text-align:center;margin-bottom:1.5rem;font-size:1.5rem;color:var(--theme-primary-text, #333)}.form-group{display:flex;gap:1rem;align-items:center;margin-bottom:1rem}.color-field{width:4rem;border:none!important;border-radius:.5rem!important;background:none;cursor:pointer}.hex-field{flex:1}.input-row{display:flex;align-items:center;gap:.5rem}.input-row input[type=color]{width:45px;height:45px;padding:0;border:none;background:transparent;cursor:pointer}.color-swatch{width:50px;height:50px;padding:0;border:none!important;border-radius:0!important;background:none;cursor:pointer;margin-bottom:14px}button{width:100%;padding:.75rem;border:none;border-radius:6px;font-size:1rem;font-weight:700;cursor:pointer;transition:background-color .2s ease,box-shadow .2s ease}button:hover{background-color:var(--theme-secondary, #6c63ff);box-shadow:0 3px 6px #0003}@media (max-width: 600px){.theme-picker{padding:1rem}}.mat-mdc-form-field{display:block!important}.upload-logo-label{display:flex;align-items:center;gap:.5rem;flex-wrap:nowrap;width:100%}.upload-logo-label .mat-mdc-form-field-suffix{margin-inline-start:.5rem}.upload-logo-label mat-label{white-space:nowrap;flex:0 0 auto}.upload-logo-label .mat-mdc-input-element{flex:1 1 auto;min-width:0}.upload-logo-label button[matSuffix]{flex:0 0 auto}.upload-button{padding:8px!important}.upload-logo-label ::ng-deep .mat-mdc-text-field-wrapper{padding-inline-end:.25rem!important}.upload-logo-label ::ng-deep .mat-mdc-form-field-icon-suffix{right:.25rem!important}.upload-logo-label{display:flex;align-items:center}.upload-logo-label ::ng-deep .mat-mdc-form-field-suffix.logo-suffix,.upload-logo-label ::ng-deep .mat-mdc-form-field-suffix .logo-suffix{display:flex;align-items:center;gap:.5rem;margin-inline-start:.5rem}.upload-logo-label ::ng-deep .mat-mdc-input-element{flex:1 1 auto;min-width:0}.upload-logo-label .upload-button,.upload-logo-label .reset-button{width:2.5rem;height:2.5rem;padding:8px!important}.upload-logo-label .upload-button{margin-right:3px}\n"], dependencies: [{ kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i1$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1$1.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { kind: "directive", type: i1$1.PatternValidator, selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", inputs: ["pattern"] }, { kind: "directive", type: i1$1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: MatButtonModule }, { kind: "component", type: i5.MatButton, selector: "    button[matButton], a[matButton], button[mat-button], button[mat-raised-button],    button[mat-flat-button], button[mat-stroked-button], a[mat-button], a[mat-raised-button],    a[mat-flat-button], a[mat-stroked-button]  ", inputs: ["matButton"], exportAs: ["matButton", "matAnchor"] }, { kind: "component", type: i5.MatIconButton, selector: "button[mat-icon-button], a[mat-icon-button], button[matIconButton], a[matIconButton]", exportAs: ["matButton", "matAnchor"] }, { kind: "ngmodule", type: MatCardModule }, { kind: "ngmodule", type: MatIconModule }, { kind: "component", type: i6.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "ngmodule", type: MatTableModule }, { kind: "ngmodule", type: MatToolbarModule }, { kind: "component", type: i8$2.MatToolbar, selector: "mat-toolbar", inputs: ["color"], exportAs: ["matToolbar"] }, { kind: "ngmodule", type: MatProgressSpinnerModule }, { kind: "component", type: i8.MatProgressSpinner, selector: "mat-progress-spinner, mat-spinner", inputs: ["color", "mode", "value", "diameter", "strokeWidth"], exportAs: ["matProgressSpinner"] }, { kind: "ngmodule", type: MatFormFieldModule }, { kind: "component", type: i6$2.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i6$2.MatLabel, selector: "mat-label" }, { kind: "directive", type: i6$2.MatSuffix, selector: "[matSuffix], [matIconSuffix], [matTextSuffix]", inputs: ["matTextSuffix"] }, { kind: "ngmodule", type: MatInputModule }, { kind: "directive", type: i8$1.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly", "disabledInteractive"], exportAs: ["matInput"] }, { kind: "ngmodule", type: MatSnackBarModule }, { kind: "ngmodule", type: MatSelectModule }, { kind: "component", type: i11.MatSelect, selector: "mat-select", inputs: ["aria-describedby", "panelClass", "disabled", "disableRipple", "tabIndex", "hideSingleSelectionIndicator", "placeholder", "required", "multiple", "disableOptionCentering", "compareWith", "value", "aria-label", "aria-labelledby", "errorStateMatcher", "typeaheadDebounceInterval", "sortComparator", "id", "panelWidth", "canSelectNullableOptions"], outputs: ["openedChange", "opened", "closed", "selectionChange", "valueChange"], exportAs: ["matSelect"] }, { kind: "component", type: i11.MatOption, selector: "mat-option", inputs: ["value", "id", "disabled"], outputs: ["onSelectionChange"], exportAs: ["matOption"] }], preserveWhitespaces: true });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: ThemePickerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-theme-picker', standalone: true, imports: [
                        FormsModule,
                        CommonModule,
                        MatButtonModule,
                        MatCardModule,
                        MatIconModule,
                        MatTableModule,
                        MatToolbarModule,
                        MatProgressSpinnerModule,
                        MatFormFieldModule,
                        MatInputModule,
                        MatSnackBarModule,
                        MatSelectModule,
                    ], template: "<div class=\"theme-picker-container\">\r\n  <mat-toolbar color=\"primary\">\r\n    <mat-icon>palette</mat-icon>\r\n    <span class=\"toolbar-title\">{{ title }}</span>\r\n  </mat-toolbar>\r\n\r\n  <div class=\"content\">\r\n    <div class=\"theme-picker\">\r\n      <h2>Theme Customization</h2>\r\n\r\n      <div *ngIf=\"loading\" class=\"spinner-container\">\r\n        <mat-spinner diameter=\"75\"></mat-spinner>\r\n      </div>\r\n\r\n      <!-- Mode selector -->\r\n      <mat-form-field appearance=\"outline\" class=\"form-field\">\r\n        <mat-label>Mode</mat-label>\r\n        <mat-select [(value)]=\"mode\" (selectionChange)=\"onModeChange()\">\r\n          <mat-option value=\"light\">Light</mat-option>\r\n          <mat-option value=\"dark\">Dark</mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n\r\n      <!-- Color + Hex pairs -->\r\n      <ng-container *ngFor=\"let field of colorFields\">\r\n        <div class=\"form-group\">\r\n          <input\r\n            class=\"color-swatch\"\r\n            matInput\r\n            type=\"color\"\r\n            [(ngModel)]=\"colors[field.key]\"\r\n          />\r\n\r\n          <mat-form-field appearance=\"outline\" class=\"hex-field\">\r\n            <mat-label>{{ field.label }} Hex</mat-label>\r\n            <input\r\n              matInput\r\n              type=\"text\"\r\n              [(ngModel)]=\"colors[field.key]\"\r\n              maxlength=\"7\"\r\n              pattern=\"#[A-Fa-f0-9]{6}\"\r\n            />\r\n          </mat-form-field>\r\n        </div>\r\n      </ng-container>\r\n\r\n      <div class=\"form-group\">\r\n        <mat-form-field appearance=\"outline\" class=\"upload-logo-label\">\r\n          <mat-label>Upload Logo ({{ mode }})</mat-label>\r\n\r\n          <input\r\n            matInput\r\n            [value]=\"selectedLogoFileName || 'No file chosen\u2026'\"\r\n            readonly\r\n          />\r\n          <div matSuffix class=\"logo-suffix\">\r\n            <button\r\n              class=\"upload-button\"\r\n              mat-icon-button\r\n              aria-label=\"Select logo file\"\r\n              (click)=\"fileInput.click()\"\r\n            >\r\n              <mat-icon>upload</mat-icon>\r\n            </button>\r\n\r\n            <button\r\n              *ngIf=\"selectedLogoFileName\"\r\n              class=\"reset-button\"\r\n              mat-icon-button\r\n              aria-label=\"Reset to default\"\r\n              (click)=\"onResetLogo()\"\r\n            >\r\n              <mat-icon>autorenew</mat-icon>\r\n            </button>\r\n          </div>\r\n\r\n          <input\r\n            #fileInput\r\n            type=\"file\"\r\n            accept=\"image/png\"\r\n            hidden\r\n            (change)=\"onFileSelected($event)\"\r\n          />\r\n        </mat-form-field>\r\n      </div>\r\n\r\n      <div class=\"actions\">\r\n        <button mat-raised-button color=\"primary\" (click)=\"apply()\">\r\n          Apply\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n", styles: [".theme-picker-container{height:100%;display:flex;flex-direction:column}.spinner-container{position:absolute;top:0;left:0;width:100%;height:100%;display:flex;justify-content:center;align-items:center;z-index:999}.toolbar-title{margin-left:16px}.content{padding:24px;flex:1;overflow-y:auto}mat-card{max-width:800px;margin:0 auto}mat-card-actions{display:flex;gap:8px;padding:16px}mat-card-actions button{display:flex;align-items:center;gap:8px}.theme-picker{max-width:500px;margin:2rem auto;padding:2rem;border-radius:10px;box-shadow:0 4px 10px #00000026;font-family:Segoe UI,sans-serif;transition:background-color .3s ease,color .3s ease;background-color:var(--theme-background)!important;border:1px solid var(--theme-primary-text)!important}.theme-picker h2{text-align:center;margin-bottom:1.5rem;font-size:1.5rem;color:var(--theme-primary-text, #333)}.form-group{display:flex;gap:1rem;align-items:center;margin-bottom:1rem}.color-field{width:4rem;border:none!important;border-radius:.5rem!important;background:none;cursor:pointer}.hex-field{flex:1}.input-row{display:flex;align-items:center;gap:.5rem}.input-row input[type=color]{width:45px;height:45px;padding:0;border:none;background:transparent;cursor:pointer}.color-swatch{width:50px;height:50px;padding:0;border:none!important;border-radius:0!important;background:none;cursor:pointer;margin-bottom:14px}button{width:100%;padding:.75rem;border:none;border-radius:6px;font-size:1rem;font-weight:700;cursor:pointer;transition:background-color .2s ease,box-shadow .2s ease}button:hover{background-color:var(--theme-secondary, #6c63ff);box-shadow:0 3px 6px #0003}@media (max-width: 600px){.theme-picker{padding:1rem}}.mat-mdc-form-field{display:block!important}.upload-logo-label{display:flex;align-items:center;gap:.5rem;flex-wrap:nowrap;width:100%}.upload-logo-label .mat-mdc-form-field-suffix{margin-inline-start:.5rem}.upload-logo-label mat-label{white-space:nowrap;flex:0 0 auto}.upload-logo-label .mat-mdc-input-element{flex:1 1 auto;min-width:0}.upload-logo-label button[matSuffix]{flex:0 0 auto}.upload-button{padding:8px!important}.upload-logo-label ::ng-deep .mat-mdc-text-field-wrapper{padding-inline-end:.25rem!important}.upload-logo-label ::ng-deep .mat-mdc-form-field-icon-suffix{right:.25rem!important}.upload-logo-label{display:flex;align-items:center}.upload-logo-label ::ng-deep .mat-mdc-form-field-suffix.logo-suffix,.upload-logo-label ::ng-deep .mat-mdc-form-field-suffix .logo-suffix{display:flex;align-items:center;gap:.5rem;margin-inline-start:.5rem}.upload-logo-label ::ng-deep .mat-mdc-input-element{flex:1 1 auto;min-width:0}.upload-logo-label .upload-button,.upload-logo-label .reset-button{width:2.5rem;height:2.5rem;padding:8px!important}.upload-logo-label .upload-button{margin-right:3px}\n"] }]
        }], ctorParameters: () => [{ type: ThemeService }, { type: i0.ChangeDetectorRef }, { type: i4.MatSnackBar }], propDecorators: { logoImageRef: [{
                type: ViewChild,
                args: ['logoImage']
            }] } });

let description$z = 'Use the account attribute transform to look up an account for a particular source on an identity and return a specific attribute value from that account.';
function createAccountAttribute() {
    return {
        id: Uid.next(),
        componentType: 'task',
        name: 'Account Attribute',
        type: 'accountAttribute',
        description: description$z,
        properties: {
            attributeName: '',
            sourceName: '',
            accountSortAttribute: null,
            accountSortDescending: false,
            accountReturnFirstLink: false,
            accountFilter: null,
            accountPropertyFilter: null,
        },
    };
}
function createAccountAttributeModel(sources) {
    return createStepModel('accountAttribute', 'task', (step) => {
        step
            .property('attributeName')
            .value(createStringValueModel({
            minLength: 1,
        }))
            .hint("The name of the account attribute to retrieve.")
            .label('Account Attribute Name');
        step
            .property('sourceName')
            .value(createChoiceValueModel({ choices: sources }))
            .hint("The source from which to retrieve the account attribute.")
            .label('Source Name');
        step
            .property('accountSortAttribute')
            .value(createNullableVariableValueModel({
            valueType: 'string',
            isRequired: false
        }))
            .hint("This configuration's value is a string name of the attribute to use when determining the ordering of returned accounts when there are multiple entries.")
            .label('Account Sort Attribute');
        step
            .property('accountSortDescending')
            .value(createBooleanValueModel({
            defaultValue: true,
        }))
            .hint("This configuration's value is a boolean (true/false). It controls the sort order when there are multiple accounts.")
            .label('Sort Descending');
        step
            .property('accountReturnFirstLink')
            .value(createBooleanValueModel({
            defaultValue: true,
        }))
            .hint("This configuration's value is a boolean (true/false). It controls which account to source a value from for an attribute. If this flag is set to true, the transform returns the value from the first account in the list, even if it is null. If this flag is set to false, the transform returns the first non-null value.")
            .label('Return First Link');
        step
            .property('accountFilter')
            .value(createNullableVariableValueModel({
            valueType: 'string',
            isRequired: false
        }))
            .hint("This expression queries the database to narrow search results. This configuration's value is a sailpoint.object.Filter expression for searching against the database. The default filter always includes the source and identity, and any subsequent expressions are combined in an AND operation with the existing search criteria.")
            .label('Account Filter');
        step
            .property('accountPropertyFilter')
            .value(createNullableVariableValueModel({
            valueType: 'string',
            isRequired: false
        }))
            .hint("Use this expression to search and filter accounts in memory. This configuration's value is a sailpoint.object.Filter expression for searching against the returned result set.")
            .label('Account Property Filter');
    });
}
async function getAvailableSources(sdk) {
    const response = await sdk.listSources();
    const sourceMap = new Map();
    response.data.forEach(source => {
        if (typeof source.name === 'string' && typeof source.id === 'string') {
            sourceMap.set(source.name, source.id);
        }
    });
    return {
        names: response.data.map(source => source.name),
        map: sourceMap
    };
}
function serializeAccountAttribute(step) {
    const { accountSortDescending, accountReturnFirstLink, accountSortAttribute, accountFilter, accountPropertyFilter, } = step.properties;
    const attributes = {
        attributeName: step.properties.attributeName,
        sourceName: step.properties.sourceName,
    };
    if (accountSortDescending !== false)
        attributes.accountSortDescending = accountSortDescending;
    if (accountReturnFirstLink !== false)
        attributes.accountReturnFirstLink = accountReturnFirstLink;
    if (accountSortAttribute != null)
        attributes.accountSortAttribute = accountSortAttribute;
    if (accountFilter !== null)
        attributes.accountFilter = accountFilter;
    if (accountPropertyFilter !== null)
        attributes.accountPropertyFilter = accountPropertyFilter;
    return {
        name: step.name,
        type: step.type,
        attributes,
    };
}
function deserializeAccountAttribute(data) {
    return {
        id: Uid.next(),
        componentType: 'task',
        type: 'accountAttribute',
        name: data.name ?? 'Account Attribute',
        description: description$z,
        properties: {
            attributeName: data.attributes.attributeName ?? '',
            sourceName: data.attributes.sourceName ?? '',
            accountSortAttribute: data.attributes.accountSortAttribute ?? null,
            accountSortDescending: data.attributes.accountSortDescending ?? false,
            accountReturnFirstLink: data.attributes.accountReturnFirstLink ?? false,
            accountFilter: data.attributes.accountFilter ?? null,
            accountPropertyFilter: data.attributes.accountPropertyFilter ?? null,
        }
    };
}
function isAccountAttributeStep(step) {
    return step.type === 'accountAttribute';
}
function getAccountAttributeIcon() {
    const svg = `
  <svg xmlns="http://www.w3.org/2000/svg" height="24" width="24" viewBox="0 0 24 24" fill="gray">
    <path d="M12 12c2.7 0 5-2.3 5-5s-2.3-5-5-5-5 2.3-5 5 2.3 5 5 5zm0 2c-3.3 0-10 1.7-10 5v3h20v-3c0-3.3-6.7-5-10-5z"/>
  </svg>`;
    const encoded = encodeURIComponent(svg.trim());
    return `data:image/svg+xml,${encoded}`;
}

let description$y = 'Use the concatenation transform to join two or more string values into a combined output. The concatenation transform often joins elements such as first and last name into a full display name, but it has many other uses';
function createConcat() {
    return {
        id: Uid.next(),
        componentType: 'switch',
        description: description$y,
        name: 'Concatenate',
        type: 'concat',
        properties: {},
        branches: {
            variable1: [],
            variable2: [],
        },
    };
}
const ConcatModel = createStepModel('concat', 'switch', () => { });
function serializeConcat(step) {
    const arrayOfValues = [];
    for (const [, sequence] of Object.entries(step.branches)) {
        for (const step of sequence) {
            arrayOfValues.push(serializeStep(step));
        }
    }
    return {
        name: step.name,
        type: step.type,
        attributes: {
            values: arrayOfValues,
        },
    };
}
function deserializeConcat(data) {
    const branches = {};
    data.attributes.values.forEach((element, index) => {
        const key = element.name ?? `Variable${index}`;
        branches[key] = [deserializeToStep(element)];
    });
    return {
        id: Uid.next(),
        componentType: 'switch',
        description: description$y,
        type: 'concat',
        name: data.name ? `Concatenate (${data.name})` : 'Concatenate',
        properties: {},
        branches: branches,
    };
}
function isConcatStep(step) {
    return step.type === 'concat';
}
function getConcatIcon() {
    const svg = `
  <svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24">
  <path d="M0 0h24v24H0z" fill="none"/>
  <path fill="gray" d="M22 12l-4 4-1.41-1.41L18.17 13h-5.23c-.34 3.1-2.26 5.72-4.94 7.05C7.96 21.69 6.64 23 5 23c-1.66 0-3-1.34-3-3s1.34-3 3-3c.95 0 1.78.45 2.33 1.14 1.9-1.03 3.26-2.91 3.58-5.14h-3.1C7.4 14.16 6.3 15 5 15c-1.66 0-3-1.34-3-3s1.34-3 3-3c1.3 0 2.4.84 2.82 2h3.1c-.32-2.23-1.69-4.1-3.59-5.14C6.78 6.55 5.95 7 5 7 3.34 7 2 5.66 2 4s1.34-3 3-3c1.64 0 2.96 1.31 2.99 2.95 2.68 1.33 4.6 3.95 4.94 7.05h5.23l-1.58-1.59L18 8l4 4z"/>
  </svg>`;
    const encoded = encodeURIComponent(svg.trim());
    return `data:image/svg+xml,${encoded}`;
}

let description$x = 'Use the static transform to return a fixed string value, or more commonly, to evaluate Velocity Template Language. The latter implementation is often useful when you are using if/then/else logic or iterating through a for loop. The static transform can also take other dynamically provided variables as inputs into the value attribute.';
function createStatic() {
    return {
        id: Uid.next(),
        componentType: 'switch',
        name: 'Static',
        type: 'static',
        description: description$x,
        properties: {
            value: ''
        },
        branches: {},
    };
}
const StaticModel = createStepModel('static', 'switch', step => {
    step.property('value')
        .value(createStringValueModel({
        minLength: 1,
        multiline: true,
    }))
        .hint('Static values support apache velocity language')
        .label('Static Value');
});
function serializeStatic$1(step) {
    const attributes = {
        value: step.properties.value,
    };
    for (const [branchName, sequence] of Object.entries(step.branches)) {
        if (sequence.length === 1) {
            attributes[branchName] = serializeStep(sequence[0]);
        }
    }
    return {
        name: step.name,
        type: step.type,
        attributes: attributes
    };
}
function deserializeStatic(data) {
    const branches = {};
    const attributes = data.attributes;
    Object.keys(attributes).forEach((key) => {
        if (key !== 'value') {
            branches[key] = [deserializeToStep(attributes[key])];
        }
    });
    return {
        id: Uid.next(),
        componentType: 'switch',
        type: 'static',
        name: data.name ? `Static (${data.name})` : 'Static',
        description: description$x,
        properties: { value: data.attributes.value },
        branches: branches,
    };
}
function isStaticStep(step) {
    return step.type === 'static';
}
function getStaticIcon() {
    const svg = `
  <svg xmlns="http://www.w3.org/2000/svg" enable-background="new 0 0 24 24" height="24" viewBox="0 0 24 24" width="24" fill="gray"><g><rect fill="none" height="24" width="24"/></g><g><g><g>
  // <path d="M2.5,4v3h5v12h3V7h5V4H2.5z M21.5,9h-9v3h3v7h3v-7h3V9z"/></g></g></g>
  // </svg>`;
    const encoded = encodeURIComponent(svg.trim());
    return `data:image/svg+xml,${encoded}`;
}

// velocity-editor-dialog.component.ts
class VelocityEditorDialogComponent {
    dialogRef;
    data;
    fb;
    themeService;
    changeRef;
    editorContainer;
    destroy$ = new Subject();
    isDark = false;
    editorForm;
    editorView;
    originalCode;
    hasChanges = false;
    editorStats = '{"lines":0,"length":0,"selection":0,"cursor":"1:1"}';
    currentTheme = 'light';
    wordWrapEnabled = true;
    identities;
    constructor(dialogRef, data, fb, themeService, changeRef) {
        this.dialogRef = dialogRef;
        this.data = data;
        this.fb = fb;
        this.themeService = themeService;
        this.changeRef = changeRef;
        this.originalCode = data.code || '';
        this.currentTheme = data.theme || 'light';
        this.editorForm = this.fb.group({
            code: [this.originalCode, (control) => Validators.required(control)]
        });
    }
    ngOnInit() {
        // Set dialog configuration
        this.dialogRef.disableClose = true;
        this.dialogRef.backdropClick().subscribe(() => {
            this.onCancel();
        });
        this.themeService.isDark$
            .pipe(takeUntil(this.destroy$))
            .subscribe(isDark => {
            this.isDark = isDark;
            this.recreateEditor();
        });
    }
    renderIdentityStatusChart() {
        throw new Error('Method not implemented.');
    }
    ngAfterViewInit() {
        this.initializeCodeMirror();
    }
    ngOnDestroy() {
        if (this.editorView) {
            this.editorView.destroy();
        }
    }
    initializeCodeMirror() {
        // Auto-format code if requested
        let initialCode = this.originalCode;
        initialCode = this.formatVelocityCode(this.originalCode);
        this.originalCode = initialCode; // Update original to formatted version
        const extensions = this.getExtensions();
        const state = EditorState.create({
            doc: initialCode,
            extensions
        });
        this.editorView = new EditorView({
            state,
            parent: this.editorContainer.nativeElement,
            dispatch: (tr) => {
                this.editorView.update([tr]);
                if (tr.docChanged) {
                    const currentValue = this.editorView.state.doc.toString();
                    this.editorForm.patchValue({ code: currentValue });
                    this.hasChanges = currentValue !== this.originalCode;
                    this.updateEditorStats();
                }
                if (tr.selection) {
                    this.updateEditorStats();
                }
            }
        });
        // Initial stats
        this.updateEditorStats();
        // Focus the editor
        setTimeout(() => {
            this.editorView.focus();
        }, 100);
    }
    getExtensions() {
        const extensions = [
            basicSetup,
            StreamLanguage.define(velocity),
            keymap.of([
                indentWithTab,
                ...searchKeymap,
                ...foldKeymap,
                ...completionKeymap,
                {
                    key: 'Ctrl-s',
                    run: () => {
                        this.onSave();
                        return true;
                    }
                },
                {
                    key: 'Escape',
                    run: () => {
                        this.onCancel();
                        return true;
                    }
                }
            ])
        ];
        // Add word wrapping conditionally
        if (this.wordWrapEnabled) {
            extensions.push(EditorView.lineWrapping);
        }
        // Add readonly mode if specified
        if (this.data.readonly) {
            extensions.push(EditorState.readOnly.of(true));
        }
        // Add theme
        if (this.isDark === true) {
            extensions.push(oneDark);
        }
        else {
            extensions.push(smoothy);
        }
        return extensions;
    }
    updateEditorStats() {
        if (!this.editorView)
            return;
        const state = this.editorView.state;
        const doc = state.doc;
        const selection = state.selection.main;
        this.editorStats = {
            lines: doc.lines,
            length: doc.length,
            selection: selection.empty ? 0 : selection.to - selection.from,
            cursor: `${doc.lineAt(selection.head).number}:${selection.head - doc.lineAt(selection.head).from + 1}`
        };
        this.changeRef.detectChanges();
    }
    toggleWordWrap() {
        this.wordWrapEnabled = !this.wordWrapEnabled;
        this.recreateEditor();
    }
    formatCode() {
        if (!this.editorView)
            return;
        const currentCode = this.editorView.state.doc.toString();
        // Basic Velocity code formatting
        const formattedCode = this.formatVelocityCode(currentCode);
        if (formattedCode !== currentCode) {
            this.editorView.dispatch({
                changes: {
                    from: 0,
                    to: this.editorView.state.doc.length,
                    insert: formattedCode
                }
            });
        }
    }
    formatVelocityCode(code) {
        // First, handle single-line concatenated Velocity directives
        let formatted = this.splitConcatenatedDirectives(code);
        // Split into lines and process each one
        const lines = formatted.split('\n');
        let indentLevel = 0;
        const indentSize = 2;
        let inComment = false;
        const formattedLines = lines.map((line) => {
            const trimmed = line.trim();
            // Handle multi-line comments
            if (trimmed.startsWith('#*')) {
                inComment = true;
            }
            if (trimmed.endsWith('*#')) {
                inComment = false;
                return ' '.repeat(indentLevel * indentSize) + trimmed;
            }
            if (inComment) {
                return ' '.repeat(indentLevel * indentSize) + trimmed;
            }
            // Skip empty lines
            if (!trimmed) {
                return '';
            }
            // Handle block end directives - decrease indent before formatting
            if (this.isBlockEndDirective(trimmed)) {
                indentLevel = Math.max(0, indentLevel - 1);
            }
            // Handle else/elseif - same level as if
            if (this.isElseDirective(trimmed)) {
                const currentIndent = Math.max(0, indentLevel - 1);
                const formattedLine = ' '.repeat(currentIndent * indentSize) + this.formatVelocityLine(trimmed);
                return formattedLine;
            }
            // Apply current indentation
            const formattedLine = ' '.repeat(indentLevel * indentSize) + this.formatVelocityLine(trimmed);
            // Handle block start directives - increase indent after formatting
            if (this.isBlockStartDirective(trimmed)) {
                indentLevel++;
            }
            return formattedLine;
        });
        // Clean up extra blank lines
        let result = formattedLines.join('\n');
        // Remove multiple consecutive blank lines
        result = result.replace(/\n\s*\n\s*\n/g, '\n\n');
        // Add spacing around major blocks
        result = this.addBlockSpacing(result);
        return result;
    }
    splitConcatenatedDirectives(code) {
        // Handle single-line concatenated Velocity directives
        let formatted = code;
        // Split lines that have multiple directives concatenated
        const lines = formatted.split('\n');
        const expandedLines = [];
        lines.forEach(line => {
            const trimmed = line.trim();
            // Skip if line is already properly formatted or is a comment
            if (!trimmed || trimmed.startsWith('##') || trimmed.startsWith('#*')) {
                expandedLines.push(line);
                return;
            }
            // Check if this line has concatenated directives
            if (this.hasConcatenatedDirectives(trimmed)) {
                const splitLine = this.splitVelocityDirectiveLine(trimmed);
                expandedLines.push(...splitLine);
            }
            else {
                expandedLines.push(line);
            }
        });
        return expandedLines.join('\n');
    }
    hasConcatenatedDirectives(line) {
        // Count directive occurrences (including #{else} format)
        const directivePattern = /#(if|elseif|else|end|foreach|while|macro|define|set|parse|include)\b|#{else}/g;
        const matches = line.match(directivePattern);
        return !!matches && matches.length > 1;
    }
    splitVelocityDirectiveLine(line) {
        const result = [];
        let i = 0;
        while (i < line.length) {
            const char = line[i];
            // Look for directive starts
            if (char === '#') {
                const remainingLine = line.substring(i);
                // Check for #{else} first, then other directives
                let directiveMatch;
                if (remainingLine.startsWith('#{else}')) {
                    directiveMatch = { 0: '#{else}', 1: 'else', length: 7 };
                }
                else {
                    const match = remainingLine.match(/^#(if|elseif|else|end|foreach|while|macro|define|set|parse|include)\b/);
                    if (match) {
                        directiveMatch = { 0: match[0], 1: match[1], length: match[0].length };
                    }
                }
                if (directiveMatch) {
                    // Find the end of this directive
                    let directiveEnd;
                    if (directiveMatch[1] === 'else' && remainingLine.startsWith('#{else}')) {
                        // Special handling for #{else}
                        directiveEnd = i + 7; // Length of '#{else}'
                        result.push('#{else}');
                    }
                    else if (directiveMatch[1] === 'end' || directiveMatch[1] === 'else') {
                        // Simple directives without parameters
                        directiveEnd = i + directiveMatch.length;
                        result.push(line.substring(i, directiveEnd));
                    }
                    else {
                        // Complex directives with parameters
                        directiveEnd = this.findDirectiveEnd(line, i);
                        const directive = line.substring(i, directiveEnd).trim();
                        result.push(directive);
                    }
                    i = directiveEnd;
                }
                else {
                    // Not a directive, treat as content
                    const nextDirectivePos = this.findNextDirective(line, i + 1);
                    const content = line.substring(i, nextDirectivePos).trim();
                    if (content) {
                        result.push(content);
                    }
                    i = nextDirectivePos;
                }
            }
            else {
                // Find content until next directive
                const nextDirectivePos = this.findNextDirective(line, i);
                const content = line.substring(i, nextDirectivePos).trim();
                if (content) {
                    result.push(content);
                }
                i = nextDirectivePos;
            }
            // Safety check to prevent infinite loop
            if (i === 0) {
                i++;
            }
        }
        return result.length > 0 ? result : [line];
    }
    findNextDirective(line, startPos) {
        let inString = false;
        let stringChar = '';
        let parenCount = 0;
        for (let i = startPos; i < line.length; i++) {
            const char = line[i];
            const prevChar = line[i - 1];
            // Handle string literals (including escaped quotes)
            if (!inString && (char === '"' || char === "'")) {
                if (prevChar !== '\\') {
                    inString = true;
                    stringChar = char;
                }
            }
            else if (inString && char === stringChar) {
                if (prevChar !== '\\') {
                    inString = false;
                    stringChar = '';
                }
            }
            if (!inString) {
                // Handle parentheses
                if (char === '(') {
                    parenCount++;
                }
                else if (char === ')') {
                    parenCount--;
                }
                // Look for directive starts when not inside parentheses or strings
                if (char === '#' && parenCount === 0) {
                    const remainingLine = line.substring(i);
                    if (remainingLine.startsWith('#{else}') ||
                        remainingLine.match(/^#(if|elseif|else|end|foreach|while|macro|define|set|parse|include)\b/)) {
                        return i;
                    }
                }
            }
        }
        return line.length;
    }
    findDirectiveEnd(line, startPos) {
        let pos = startPos;
        let parenCount = 0;
        let inString = false;
        let stringChar = '';
        // Skip the directive name
        while (pos < line.length && /[a-zA-Z#{}]/.test(line[pos])) {
            pos++;
        }
        // For directives without parameters (like #else, #end), return immediately
        if (pos >= line.length || line[pos] !== '(') {
            // Check for #{else} format
            if (line.substring(startPos).startsWith('#{else}')) {
                return startPos + 7;
            }
            // Look for the next directive or end of line
            const nextDirectivePos = line.indexOf('#', pos);
            return nextDirectivePos > 0 ? nextDirectivePos : line.length;
        }
        // Handle directives with parameters
        while (pos < line.length) {
            const char = line[pos];
            const prevChar = line[pos - 1];
            // Handle string literals (including escaped quotes)
            if (!inString && (char === '"' || char === "'")) {
                // Check if it's not escaped (handle \" and \')
                if (prevChar !== '\\') {
                    inString = true;
                    stringChar = char;
                }
            }
            else if (inString && char === stringChar) {
                // Check if it's not escaped
                if (prevChar !== '\\') {
                    inString = false;
                    stringChar = '';
                }
            }
            if (!inString) {
                if (char === '(') {
                    parenCount++;
                }
                else if (char === ')') {
                    parenCount--;
                    if (parenCount === 0) {
                        return pos + 1; // Include the closing parenthesis
                    }
                }
            }
            pos++;
        }
        return pos;
    }
    formatVelocityLine(line) {
        let formatted = line;
        // Handle escaped quotes in strings - convert \" back to "
        formatted = formatted.replace(/\\"/g, '"');
        formatted = formatted.replace(/\\'/g, "'");
        // Add spaces around operators in #set statements
        if (formatted.startsWith('#set')) {
            formatted = formatted.replace(/\s*=\s*/g, ' = ');
            formatted = formatted.replace(/\s*\+\s*/g, ' + ');
            formatted = formatted.replace(/\s*-\s*/g, ' - ');
            formatted = formatted.replace(/\s*\*\s*/g, ' * ');
            formatted = formatted.replace(/\s*\/\s*/g, ' / ');
        }
        // Add spaces around comparison operators
        formatted = formatted.replace(/\s*==\s*/g, ' == ');
        formatted = formatted.replace(/\s*!=\s*/g, ' != ');
        formatted = formatted.replace(/\s*<=\s*/g, ' <= ');
        formatted = formatted.replace(/\s*>=\s*/g, ' >= ');
        formatted = formatted.replace(/\s*&&\s*/g, ' && ');
        formatted = formatted.replace(/\s*\|\|\s*/g, ' || ');
        // Format method calls with proper spacing
        formatted = formatted.replace(/\s*\(\s*/g, '(');
        formatted = formatted.replace(/\s*\)\s*/g, ')');
        formatted = formatted.replace(/\s*,\s*/g, ', ');
        // Format array/list literals
        formatted = formatted.replace(/\[\s*/g, '[');
        formatted = formatted.replace(/\s*\]/g, ']');
        // Format object literals
        formatted = formatted.replace(/\{\s*/g, '{');
        formatted = formatted.replace(/\s*\}/g, '}');
        // Clean up extra spaces
        formatted = formatted.replace(/\s+/g, ' ');
        return formatted;
    }
    isBlockStartDirective(line) {
        const blockStarts = [
            '#if', '#foreach', '#while', '#macro', '#define',
            '#@', '#{', '#parse', '#include', '#evaluate'
        ];
        return blockStarts.some(directive => line.startsWith(directive + '(') ||
            line.startsWith(directive + ' ') ||
            line === directive);
    }
    isBlockEndDirective(line) {
        return line.startsWith('#end');
    }
    isElseDirective(line) {
        return line.startsWith('#else') || line.startsWith('#{else}');
    }
    addBlockSpacing(code) {
        let result = code;
        // Add space before major block directives (but not after #end and not if already has content after)
        const majorBlocks = ['#if', '#foreach', '#while', '#macro', '#define'];
        majorBlocks.forEach(block => {
            // Only add spacing before blocks that don't already have proper spacing
            // and are not immediately after another directive
            const regex = new RegExp(`(\\n(?!\\s*$)(?!\\s*#)(?!\\n))(?=\\s*\\${block})`, 'g');
            result = result.replace(regex, '\n\n');
        });
        // Add space after #end directives (but only when not followed by another #end or end of string)
        result = result.replace(/(#end[^\n]*)\n(?!\s*$)(?!\s*#end)(?!\s*\n)/g, '$1\n\n');
        // Add space before and after macro definitions
        result = result.replace(/(\n)(\s*#macro)/g, '$1\n$2');
        result = result.replace(/(#end\s*##[^\n]*macro[^\n]*)\n/g, '$1\n\n');
        // Remove any double spacing that might have been created after directive blocks
        // but preserve intentional spacing elsewhere
        result = result.replace(/(\n\s*#\w+[^\n]*)\n\n(\s*#)/g, '$1\n$2');
        result = result.replace(/(\n\s*#\w+[^\n]*)\n\n(\s*\$)/g, '$1\n$2');
        return result;
    }
    compressVelocityCode(code) {
        // Split into lines and process each one
        const lines = code.split('\n');
        const compressedParts = [];
        lines.forEach(line => {
            const trimmed = line.trim();
            // Skip empty lines
            if (!trimmed) {
                return;
            }
            // Skip comments (but preserve inline comments that might be important)
            if (trimmed.startsWith('##') && !trimmed.includes('#end')) {
                return;
            }
            compressedParts.push(trimmed);
        });
        // Join all parts together
        let compressed = compressedParts.join('');
        // Only do minimal cleanup - don't over-process
        compressed = this.minimalCleanupCompressed(compressed);
        return compressed;
    }
    minimalCleanupCompressed(code) {
        let cleaned = code;
        // Only clean up obvious extra spaces while preserving string content
        cleaned = this.preserveStringsWhileProcessing(cleaned, (content) => {
            // Only remove spaces around commas and parentheses - be conservative
            content = content.replace(/\s*,\s*/g, ',');
            content = content.replace(/\(\s+/g, '(');
            content = content.replace(/\s+\)/g, ')');
            // Clean up multiple spaces
            content = content.replace(/\s+/g, ' ');
            return content;
        });
        return cleaned;
    }
    preserveStringsWhileProcessing(code, processor) {
        const stringMarkers = [];
        let inString = false;
        let stringChar = '';
        let stringStart = 0;
        // Find all string literals
        for (let i = 0; i < code.length; i++) {
            const char = code[i];
            const prevChar = code[i - 1];
            if (!inString && (char === '"' || char === "'")) {
                if (prevChar !== '\\') {
                    inString = true;
                    stringChar = char;
                    stringStart = i;
                }
            }
            else if (inString && char === stringChar) {
                if (prevChar !== '\\') {
                    stringMarkers.push({
                        start: stringStart,
                        end: i + 1,
                        content: code.substring(stringStart, i + 1)
                    });
                    inString = false;
                    stringChar = '';
                }
            }
        }
        // Replace strings with placeholders
        let processableCode = code;
        const placeholders = [];
        stringMarkers.reverse().forEach((marker, index) => {
            const placeholder = `__STRING_PLACEHOLDER_${index}__`;
            placeholders.unshift(marker.content);
            processableCode = processableCode.substring(0, marker.start) +
                placeholder +
                processableCode.substring(marker.end);
        });
        // Process the code without strings
        const processedCode = processor(processableCode);
        // Restore strings
        let result = processedCode;
        placeholders.forEach((stringContent, index) => {
            const placeholder = `__STRING_PLACEHOLDER_${index}__`;
            result = result.replace(placeholder, stringContent);
        });
        return result;
    }
    recreateEditor() {
        if (!this.editorView)
            return;
        const currentCode = this.editorView.state.doc.toString();
        const currentSelection = this.editorView.state.selection;
        this.editorView.destroy();
        const extensions = this.getExtensions();
        const state = EditorState.create({
            doc: currentCode,
            extensions,
            selection: currentSelection
        });
        this.editorView = new EditorView({
            state,
            parent: this.editorContainer.nativeElement,
            dispatch: (tr) => {
                this.editorView.update([tr]);
                if (tr.docChanged) {
                    const currentValue = this.editorView.state.doc.toString();
                    this.editorForm.patchValue({ code: currentValue });
                    this.hasChanges = currentValue !== this.originalCode;
                    this.updateEditorStats();
                }
                if (tr.selection) {
                    this.updateEditorStats();
                }
            }
        });
        this.updateEditorStats();
    }
    onSave() {
        if (this.editorForm.valid && this.editorView) {
            const code = this.editorView.state.doc.toString();
            const compressedCode = this.compressVelocityCode(code);
            this.dialogRef.close({
                code: compressedCode,
                saved: true
            });
        }
    }
    onCancel() {
        if (this.hasChanges) {
            const confirmClose = window.confirm('You have unsaved changes. Are you sure you want to close?');
            if (!confirmClose) {
                return;
            }
        }
        this.dialogRef.close({
            code: this.originalCode,
            saved: false
        });
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: VelocityEditorDialogComponent, deps: [{ token: i1.MatDialogRef }, { token: MAT_DIALOG_DATA }, { token: i1$1.FormBuilder }, { token: ThemeService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "20.1.3", type: VelocityEditorDialogComponent, isStandalone: true, selector: "app-velocity-editor-dialog", viewQueries: [{ propertyName: "editorContainer", first: true, predicate: ["editorContainer"], descendants: true, static: true }], ngImport: i0, template: "<div class=\"velocity-editor-dialog\" (keydown)=\"$event.stopPropagation()\">\r\n      <h2 mat-dialog-title>{{ data.title || 'Edit Velocity Code' }}</h2>\r\n      \r\n      <mat-dialog-content class=\"dialog-content\">\r\n        <form [formGroup]=\"editorForm\" class=\"editor-form\">\r\n          <div class=\"editor-toolbar\">\r\n            <div class=\"toolbar-left\">\r\n              <button \r\n                mat-icon-button \r\n                matTooltip=\"Format Code\"\r\n                type=\"button\" \r\n                (click)=\"formatCode()\"\r\n                title=\"Format Code\">\r\n                <mat-icon>code</mat-icon>\r\n              </button>\r\n              <button \r\n                mat-icon-button \r\n                type=\"button\" \r\n                (click)=\"toggleWordWrap()\"\r\n                title=\"Toggle Word Wrap\">\r\n                <mat-icon>wrap_text</mat-icon>\r\n              </button>\r\n            </div>\r\n            <div class=\"toolbar-right\">\r\n              <span class=\"editor-info\" *ngIf=\"editorStats\">\r\n                <span class=\"info-item\">Lines: {{ editorStats.lines }}</span>\r\n                <span class=\"info-item\">Length: {{ editorStats.length }}</span>\r\n                <span class=\"info-item\">Sel: {{ editorStats.selection }}</span>\r\n                <span class=\"info-item\">Pos: {{ editorStats.cursor }}</span>\r\n              </span>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"code-editor-container\" #editorContainer>\r\n            <!-- CodeMirror will be mounted here -->\r\n          </div>\r\n        </form>\r\n      </mat-dialog-content>\r\n      \r\n      <mat-dialog-actions align=\"end\" class=\"dialog-actions\">\r\n        <button \r\n          mat-button \r\n          type=\"button\" \r\n          (click)=\"onCancel()\"\r\n          class=\"cancel-btn\">\r\n          Cancel\r\n        </button>\r\n        <button \r\n          mat-raised-button \r\n          color=\"primary\" \r\n          type=\"button\"\r\n          (click)=\"onSave()\"\r\n          [disabled]=\"!editorForm.valid || !hasChanges\"\r\n          class=\"save-btn\">\r\n          Save\r\n        </button>\r\n      </mat-dialog-actions>\r\n    </div>", styles: [".velocity-editor-dialog{width:100%;max-width:1000px;height:700px;display:flex;flex-direction:column}.dialog-content{flex:1;padding:0 24px;overflow:hidden}.editor-form{height:100%;display:flex;flex-direction:column}.editor-toolbar{display:flex;justify-content:space-between;align-items:center;padding:8px 0;border-bottom:1px solid #e0e0e0;margin-bottom:8px}.toolbar-left{display:flex;gap:4px}.toolbar-right{display:flex;align-items:center}.editor-info{display:flex;gap:12px;font-size:12px;color:#666}.info-item{padding:2px 6px;background:#f5f5f5;border-radius:3px;font-family:monospace}.code-editor-container{flex:1;border:1px solid #ddd;border-radius:4px;overflow:hidden;position:relative}.dialog-actions{padding:16px 24px;border-top:1px solid #eee}.cancel-btn{margin-right:8px}::ng-deep .cm-editor{height:100%;font-family:Fira Code,Consolas,Monaco,Courier New,monospace;font-size:14px}::ng-deep .cm-content{padding:16px}::ng-deep .cm-focused{outline:none}::ng-deep .cm-scroller{font-family:Fira Code,Consolas,Monaco,Courier New,monospace}::ng-deep .cm-velocity-variable{color:#06c;font-weight:700}::ng-deep .cm-velocity-directive{color:#c60;font-weight:700}::ng-deep .cm-velocity-comment{color:#666;font-style:italic}::ng-deep .cm-velocity-string{color:#090}::ng-deep .cm-velocity-number{color:#909}::ng-deep .cm-editor.cm-focused.cm-dark{outline:none}::ng-deep .cm-dark .cm-velocity-variable{color:#4fc3f7}::ng-deep .cm-dark .cm-velocity-directive{color:#ffb74d}::ng-deep .cm-dark .cm-velocity-comment{color:#999}::ng-deep .cm-dark .cm-velocity-string{color:#81c784}::ng-deep .cm-dark .cm-velocity-number{color:#ce93d8}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i1$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i1$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i1$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "ngmodule", type: MatDialogModule }, { kind: "directive", type: i1.MatDialogTitle, selector: "[mat-dialog-title], [matDialogTitle]", inputs: ["id"], exportAs: ["matDialogTitle"] }, { kind: "directive", type: i1.MatDialogActions, selector: "[mat-dialog-actions], mat-dialog-actions, [matDialogActions]", inputs: ["align"] }, { kind: "directive", type: i1.MatDialogContent, selector: "[mat-dialog-content], mat-dialog-content, [matDialogContent]" }, { kind: "ngmodule", type: MatButtonModule }, { kind: "component", type: i5.MatButton, selector: "    button[matButton], a[matButton], button[mat-button], button[mat-raised-button],    button[mat-flat-button], button[mat-stroked-button], a[mat-button], a[mat-raised-button],    a[mat-flat-button], a[mat-stroked-button]  ", inputs: ["matButton"], exportAs: ["matButton", "matAnchor"] }, { kind: "component", type: i5.MatIconButton, selector: "button[mat-icon-button], a[mat-icon-button], button[matIconButton], a[matIconButton]", exportAs: ["matButton", "matAnchor"] }, { kind: "ngmodule", type: MatFormFieldModule }, { kind: "ngmodule", type: MatInputModule }, { kind: "ngmodule", type: MatIconModule }, { kind: "component", type: i6.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }], preserveWhitespaces: true });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: VelocityEditorDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-velocity-editor-dialog', standalone: true, imports: [
                        CommonModule,
                        ReactiveFormsModule,
                        MatDialogModule,
                        MatButtonModule,
                        MatFormFieldModule,
                        MatInputModule,
                        MatIconModule
                    ], template: "<div class=\"velocity-editor-dialog\" (keydown)=\"$event.stopPropagation()\">\r\n      <h2 mat-dialog-title>{{ data.title || 'Edit Velocity Code' }}</h2>\r\n      \r\n      <mat-dialog-content class=\"dialog-content\">\r\n        <form [formGroup]=\"editorForm\" class=\"editor-form\">\r\n          <div class=\"editor-toolbar\">\r\n            <div class=\"toolbar-left\">\r\n              <button \r\n                mat-icon-button \r\n                matTooltip=\"Format Code\"\r\n                type=\"button\" \r\n                (click)=\"formatCode()\"\r\n                title=\"Format Code\">\r\n                <mat-icon>code</mat-icon>\r\n              </button>\r\n              <button \r\n                mat-icon-button \r\n                type=\"button\" \r\n                (click)=\"toggleWordWrap()\"\r\n                title=\"Toggle Word Wrap\">\r\n                <mat-icon>wrap_text</mat-icon>\r\n              </button>\r\n            </div>\r\n            <div class=\"toolbar-right\">\r\n              <span class=\"editor-info\" *ngIf=\"editorStats\">\r\n                <span class=\"info-item\">Lines: {{ editorStats.lines }}</span>\r\n                <span class=\"info-item\">Length: {{ editorStats.length }}</span>\r\n                <span class=\"info-item\">Sel: {{ editorStats.selection }}</span>\r\n                <span class=\"info-item\">Pos: {{ editorStats.cursor }}</span>\r\n              </span>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"code-editor-container\" #editorContainer>\r\n            <!-- CodeMirror will be mounted here -->\r\n          </div>\r\n        </form>\r\n      </mat-dialog-content>\r\n      \r\n      <mat-dialog-actions align=\"end\" class=\"dialog-actions\">\r\n        <button \r\n          mat-button \r\n          type=\"button\" \r\n          (click)=\"onCancel()\"\r\n          class=\"cancel-btn\">\r\n          Cancel\r\n        </button>\r\n        <button \r\n          mat-raised-button \r\n          color=\"primary\" \r\n          type=\"button\"\r\n          (click)=\"onSave()\"\r\n          [disabled]=\"!editorForm.valid || !hasChanges\"\r\n          class=\"save-btn\">\r\n          Save\r\n        </button>\r\n      </mat-dialog-actions>\r\n    </div>", styles: [".velocity-editor-dialog{width:100%;max-width:1000px;height:700px;display:flex;flex-direction:column}.dialog-content{flex:1;padding:0 24px;overflow:hidden}.editor-form{height:100%;display:flex;flex-direction:column}.editor-toolbar{display:flex;justify-content:space-between;align-items:center;padding:8px 0;border-bottom:1px solid #e0e0e0;margin-bottom:8px}.toolbar-left{display:flex;gap:4px}.toolbar-right{display:flex;align-items:center}.editor-info{display:flex;gap:12px;font-size:12px;color:#666}.info-item{padding:2px 6px;background:#f5f5f5;border-radius:3px;font-family:monospace}.code-editor-container{flex:1;border:1px solid #ddd;border-radius:4px;overflow:hidden;position:relative}.dialog-actions{padding:16px 24px;border-top:1px solid #eee}.cancel-btn{margin-right:8px}::ng-deep .cm-editor{height:100%;font-family:Fira Code,Consolas,Monaco,Courier New,monospace;font-size:14px}::ng-deep .cm-content{padding:16px}::ng-deep .cm-focused{outline:none}::ng-deep .cm-scroller{font-family:Fira Code,Consolas,Monaco,Courier New,monospace}::ng-deep .cm-velocity-variable{color:#06c;font-weight:700}::ng-deep .cm-velocity-directive{color:#c60;font-weight:700}::ng-deep .cm-velocity-comment{color:#666;font-style:italic}::ng-deep .cm-velocity-string{color:#090}::ng-deep .cm-velocity-number{color:#909}::ng-deep .cm-editor.cm-focused.cm-dark{outline:none}::ng-deep .cm-dark .cm-velocity-variable{color:#4fc3f7}::ng-deep .cm-dark .cm-velocity-directive{color:#ffb74d}::ng-deep .cm-dark .cm-velocity-comment{color:#999}::ng-deep .cm-dark .cm-velocity-string{color:#81c784}::ng-deep .cm-dark .cm-velocity-number{color:#ce93d8}\n"] }]
        }], ctorParameters: () => [{ type: i1.MatDialogRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }, { type: i1$1.FormBuilder }, { type: ThemeService }, { type: i0.ChangeDetectorRef }], propDecorators: { editorContainer: [{
                type: ViewChild,
                args: ['editorContainer', { static: true }]
            }] } });

// auto-save.service.ts
class AutoSaveService {
    STORAGE_KEY = 'sailpoint_transforms_autosave';
    UNSAVED_CHANGES_KEY = 'sailpoint_transforms_unsaved';
    unsavedChangesSubject = new BehaviorSubject(new Set());
    unsavedChanges$ = this.unsavedChangesSubject.asObservable();
    constructor() {
        this.loadUnsavedChanges();
    }
    /**
     * Auto-save a transform locally
     */
    autoSave(transformId, name, definition, isNew = false, cloudVersion) {
        const savedTransform = {
            id: isNew ? undefined : transformId,
            name,
            definition,
            lastModified: Date.now(),
            isNew,
            cloudVersion,
        };
        const key = this.getStorageKey(transformId, isNew);
        localStorage.setItem(key, JSON.stringify(savedTransform));
        // Mark as having unsaved changes
        this.markAsUnsaved(transformId);
        console.log(`Auto-saved transform: ${name}`);
    }
    /**
     * Get locally saved transform
     */
    getLocalSave(transformId, isNew = false) {
        const key = this.getStorageKey(transformId, isNew);
        const saved = localStorage.getItem(key);
        if (!saved) {
            return null;
        }
        try {
            return JSON.parse(saved);
        }
        catch (error) {
            console.error('Failed to parse saved transform:', error);
            return null;
        }
    }
    /**
     * Clear local save after successful cloud sync
     */
    clearLocalSave(transformId, isNew = false) {
        const key = this.getStorageKey(transformId, isNew);
        localStorage.removeItem(key);
        // Remove from unsaved changes
        this.markAsSaved(transformId);
        console.log(`Cleared local save for transform: ${transformId}`);
    }
    /**
     * Get all locally saved transforms
     */
    getAllLocalSaves() {
        const saves = [];
        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key?.startsWith(this.STORAGE_KEY)) {
                const saved = localStorage.getItem(key);
                if (saved) {
                    try {
                        saves.push(JSON.parse(saved));
                    }
                    catch (error) {
                        console.error('Failed to parse saved transform:', error);
                    }
                }
            }
        }
        return saves.sort((a, b) => b.lastModified - a.lastModified);
    }
    /**
     * Check if transform has local changes
     */
    hasLocalChanges(transformId) {
        return this.unsavedChangesSubject.value.has(transformId);
    }
    /**
     * Check if transform definition differs from cloud version
     */
    hasUnsavedChanges(transformId, currentDefinition) {
        const localSave = this.getLocalSave(transformId);
        const cloudVersion = localSave?.cloudVersion;
        if (!cloudVersion) {
            console.warn('[AutoSave] No cloud version found for transform:', transformId);
            return false;
        }
        const normalizedCloud = this.normalizeDefinition(cloudVersion);
        const normalizedCurrent = this.normalizeDefinition(currentDefinition);
        const isDifferent = !isEqual(normalizedCloud, normalizedCurrent);
        return isDifferent;
    }
    normalizeDefinition(def) {
        console.log('[AutoSave] Normalizing definition:', def);
        const clone = cloneDeep(def);
        if (typeof clone !== 'object' || clone === null) {
            return clone;
        }
        // Remove irrelevant top-level fields
        delete clone.id;
        // Normalize top-level name (Static (X) → X, Concatenate (X) → X)
        if (typeof clone.name === 'string') {
            const match = clone.name.match(/^(Static|Concatenate) \((.+)\)$/);
            if (match) {
                clone.name = match[2].trim();
            }
        }
        // Normalize or remove internal
        if ('internal' in clone &&
            (clone.internal === false || clone.internal === undefined)) {
            delete clone.internal;
        }
        // Recursively clean nested "name" fields
        function deepCleanNames(obj) {
            if (Array.isArray(obj)) {
                obj.forEach(deepCleanNames);
            }
            else if (typeof obj === 'object' && obj !== null) {
                delete obj.name;
                // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-unsafe-argument
                Object.entries(obj).forEach(([_unusedKey, val]) => deepCleanNames(val));
            }
        }
        // Apply deep clean to attributes
        if (typeof clone.attributes === 'object' && clone.attributes !== null) {
            deepCleanNames(clone.attributes);
        }
        return clone;
    }
    /**
     * Get time since last auto-save
     */
    getTimeSinceLastSave(transformId, isNew = false) {
        const localSave = this.getLocalSave(transformId, isNew);
        if (!localSave) {
            return null;
        }
        const timeDiff = Date.now() - localSave.lastModified;
        const minutes = Math.floor(timeDiff / 60000);
        const seconds = Math.floor((timeDiff % 60000) / 1000);
        if (minutes > 0) {
            return `${minutes}m ago`;
        }
        else {
            return `${seconds}s ago`;
        }
    }
    getStorageKey(transformId, isNew) {
        if (isNew) {
            return `${this.STORAGE_KEY}_new_${Date.now()}`;
        }
        return `${this.STORAGE_KEY}_${transformId}`;
    }
    markAsUnsaved(transformId) {
        const current = this.unsavedChangesSubject.value;
        const updated = new Set(current);
        updated.add(transformId);
        this.unsavedChangesSubject.next(updated);
        this.saveUnsavedChanges(updated);
    }
    markAsSaved(transformId) {
        const current = this.unsavedChangesSubject.value;
        const updated = new Set(current);
        updated.delete(transformId);
        this.unsavedChangesSubject.next(updated);
        this.saveUnsavedChanges(updated);
    }
    saveUnsavedChanges(changes) {
        localStorage.setItem(this.UNSAVED_CHANGES_KEY, JSON.stringify(Array.from(changes)));
    }
    loadUnsavedChanges() {
        const saved = localStorage.getItem(this.UNSAVED_CHANGES_KEY);
        if (saved) {
            try {
                const changes = JSON.parse(saved);
                this.unsavedChangesSubject.next(new Set(changes));
            }
            catch (error) {
                console.error('Failed to load unsaved changes:', error);
            }
        }
    }
    /**
     * Clear all local saves (useful for cleanup)
     */
    clearAllLocalSaves() {
        const keysToRemove = [];
        for (let i = 0; i < localStorage.length; i++) {
            const key = localStorage.key(i);
            if (key?.startsWith(this.STORAGE_KEY)) {
                keysToRemove.push(key);
            }
        }
        keysToRemove.forEach((key) => localStorage.removeItem(key));
        localStorage.removeItem(this.UNSAVED_CHANGES_KEY);
        this.unsavedChangesSubject.next(new Set());
        console.log('Cleared all local saves');
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: AutoSaveService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: AutoSaveService, providedIn: 'root' });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: AutoSaveService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [] });

let description$w = 'The base64 decode transform allows you to take incoming data that has been encoded using a Base64-based text encoding scheme and render the data in its original binary format.';
function createBase64Decode() {
    return {
        id: Uid.next(),
        componentType: 'switch',
        name: 'Base64 Decode',
        type: 'base64Decode',
        description: description$w,
        properties: {},
        branches: {
            input: [],
        },
    };
}
function serializeBase64Decode(step) {
    const attributes = {};
    if (step.branches.input.length > 0) {
        attributes.input = serializeStep(step.branches.input[0]);
    }
    return {
        name: step.name,
        type: step.type,
        attributes: attributes,
    };
}
function deserializeBase64Decode(data) {
    const step = {
        id: Uid.next(),
        componentType: 'switch',
        name: data.name ?? 'Base64 Decode',
        type: 'base64Decode',
        description: description$w,
        properties: {},
        branches: {
            input: [],
        },
    };
    if (data.attributes.input) {
        step.branches.input.push(deserializeToStep(data.attributes.input));
    }
    return step;
}
function isBase64DecodeStep(step) {
    return step.type === 'base64Decode';
}
function getBase64DecodeIcon() {
    const svg = `<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24">
    <path d="M0 0h24v24H0z" fill="none"/><path fill="grey" d="M12 17c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm6-9h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6h1.9c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm0 12H6V10h12v10z"/></svg>`;
    const encoded = encodeURIComponent(svg.trim());
    return `data:image/svg+xml,${encoded}`;
}

let description$v = 'The base64 encode transform allows you to take incoming data and encode it using a Base64-based text encoding scheme. The output of the transform is a string comprising 64 basic ASCII characters.';
function createBase64Encode() {
    return {
        id: Uid.next(),
        componentType: 'switch',
        name: 'Base64 Encode',
        type: 'base64Encode',
        description: description$v,
        properties: {},
        branches: {
            input: [],
        },
    };
}
function serializeBase64Encode(step) {
    const attributes = {};
    if (step.branches.input.length > 0) {
        attributes.input = serializeStep(step.branches.input[0]);
    }
    return {
        name: step.name,
        type: step.type,
        attributes: attributes,
    };
}
function deserializeBase64Encode(data) {
    const step = {
        id: Uid.next(),
        componentType: 'switch',
        name: data.name ?? 'Base64 Encode',
        type: 'base64Encode',
        description: description$v,
        properties: {},
        branches: {
            input: [],
        },
    };
    if (data.attributes.input) {
        step.branches.input.push(deserializeToStep(data.attributes.input));
    }
    return step;
}
function isBase64EncodeStep(step) {
    return step.type === 'base64Encode';
}
function getBase64EncodeIcon() {
    const svg = `<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24">
    <path d="M0 0h24v24H0z" fill="none"/><path fill="grey" d="M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z"/></svg>`;
    const encoded = encodeURIComponent(svg.trim());
    return `data:image/svg+xml,${encoded}`;
}

let description$u = 'Use the conditional transform to output different values depending on simple conditional logic. This is a convenient transform - the same capability can be implemented with a "static" transform, but this transform has greater simplicity and null-safe error checking.';
function createConditional() {
    return {
        id: Uid.next(),
        componentType: 'switch',
        name: 'Conditional',
        type: 'conditional',
        description: description$u,
        properties: {
            expression: '',
        },
        branches: {
            positiveCondition: [],
            negativeCondition: [],
        },
    };
}
const ConditionalModel = createStepModel('conditional', 'switch', (step) => {
    step
        .property('expression')
        .value(createStringValueModel({
        minLength: 1,
        multiline: true,
        pattern: new RegExp('^.+\\s+eq\\s.+$'),
    }))
        .hint('Conditional expression, e.g. $department eq Science, eq is the only supported operator')
        .label('Expression');
});
function serializeConditional(step) {
    const attributes = {
        expression: step.properties.expression,
    };
    for (const [branchName, sequence] of Object.entries(step.branches)) {
        if (sequence.length === 1) {
            attributes[branchName] = serializeStep(sequence[0]);
        }
    }
    return {
        name: step.name,
        type: step.type,
        attributes: attributes,
    };
}
function deserializeConditional(data) {
    const branches = {};
    const attributes = data.attributes;
    Object.keys(attributes).forEach((key) => {
        if (key !== 'expression') {
            branches[key] = [deserializeToStep(attributes[key])];
        }
    });
    return {
        id: Uid.next(),
        componentType: 'switch',
        type: 'conditional',
        name: data.name ?? 'Conditional',
        description: description$u,
        properties: { expression: data.attributes.expression },
        branches: branches,
    };
}
function isConditionalStep(step) {
    return step.type === 'conditional';
}
function getConditionalIcon() {
    const svg = `<svg xmlns="http://www.w3.org/2000/svg" enable-background="new 0 0 24 24" height="24" viewBox="0 0 24 24" width="24" fill="gray"><g><rect fill="none" height="24" width="24" x="0"/></g><g><g><g><path d="M9.01,14H2v2h7.01v3L13,15l-3.99-4V14z M14.99,13v-3H22V8h-7.01V5L11,9L14.99,13z"/></g></g></g></svg>`;
    const encoded = encodeURIComponent(svg.trim());
    return `data:image/svg+xml,${encoded}`;
}

let description$t = 'Use the date compare transform to compare two dates and, depending on the comparison result, return one value if one date is after the other or return a different value if it is before the other.';
function createDateCompare() {
    return {
        id: Uid.next(),
        componentType: 'switch',
        name: 'Date Compare',
        type: 'dateCompare',
        description: description$t,
        properties: {
            operator: '',
        },
        branches: {
            positiveCondition: [],
            negativeCondition: [],
            firstDate: [],
            secondDate: [],
        },
    };
}
const DateCompareModel = createStepModel('dateCompare', 'switch', (step) => {
    step
        .property('operator')
        .value(createChoiceValueModel({
        choices: [
            'GT',
            'GTE',
            'LT',
            'LTE',
        ],
    }))
        .hint('Comparison operator, e.g. gt, gte, lt, lte')
        .label('Operator');
});
function serializeDateCompare(step) {
    const attributes = {
        operator: step.properties.operator,
    };
    for (const [branchName, sequence] of Object.entries(step.branches)) {
        if (sequence.length === 1) {
            attributes[branchName] = serializeStep(sequence[0]);
        }
    }
    return {
        name: step.name,
        type: step.type,
        attributes: attributes,
    };
}
function deserializeDateCompare(data) {
    const branches = {};
    const attributes = data.attributes;
    Object.keys(attributes).forEach((key) => {
        if (key !== 'operator') {
            branches[key] = [deserializeToStep(attributes[key])];
        }
    });
    return {
        id: Uid.next(),
        componentType: 'switch',
        type: 'dateCompare',
        name: data.name ?? `Date Compare`,
        description: description$t,
        properties: { operator: data.attributes.operator },
        branches: branches,
    };
}
function isDateCompareStep(step) {
    return step.type === 'dateCompare';
}
const operatorMap = {
    "LT": "Less Than",
    "LTE": "Less Than or Equal To",
    "GT": "Greater Than",
    "GTE": "Greater Than or Equal To",
};
function getDateCompareIcon() {
    const svg = `
      <svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24">
      <path d="M0 0h24v24H0z" fill="none"/>
      <path fill="gray" d="M20 3h-1V1h-2v2H7V1H5v2H4c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 18H4V8h16v13z"/>
      </svg>`;
    const encoded = encodeURIComponent(svg.trim());
    return `data:image/svg+xml,${encoded}`;
}

let description$s = 'Use the date format transform to convert datetime strings from one format to another. This is often useful when you are syncing data from one system to another, where each application uses a different format for date and time data.';
function createDateFormat() {
    return {
        id: Uid.next(),
        componentType: 'switch',
        name: 'Date Format',
        type: 'dateFormat',
        description: description$s,
        properties: {
            inputFormat: 'ISO8601',
            outputFormat: 'MM/dd/yyyy',
            customInputFormat: '', // Add this for custom input format
            customOutputFormat: '', // Add this for custom output format
        },
        branches: {
            input: [],
        },
    };
}
const DateFormatModel = createStepModel('dateFormat', 'switch', (step) => {
    step
        .property('inputFormat')
        .value(createChoiceValueModel({
        choices: [
            'ISO8601',
            'LDAP',
            'PEOPLE_SOFT',
            'EPOCH_TIME_JAVA',
            'EPOCH_TIME_WIN32',
            'CUSTOM'
        ],
        defaultValue: 'ISO8601',
    }))
        .hint('This string value indicates either the explicit SimpleDateFormat or the built-in named format of the incoming data.')
        .label('Input Format');
    step
        .property('outputFormat')
        .value(createChoiceValueModel({
        choices: [
            'ISO8601',
            'LDAP',
            'PEOPLE_SOFT',
            'EPOCH_TIME_JAVA',
            'EPOCH_TIME_WIN32',
            'CUSTOM'
        ],
        defaultValue: 'ISO8601',
    }))
        .hint('This string value indicates either the explicit SimpleDateFormat or the built-in named format that the data is formatted into.')
        .label('Output Format');
    // Add custom format properties
    step
        .property('customInputFormat')
        .value(createStringValueModel({
        minLength: 0,
    }))
        .hint('Custom SimpleDateFormat pattern for input (e.g., yyyy-MM-dd HH:mm:ss)')
        .label('Custom Input Format');
    step
        .property('customOutputFormat')
        .value(createStringValueModel({
        minLength: 0,
    }))
        .hint('Custom SimpleDateFormat pattern for output (e.g., dd/MM/yyyy)')
        .label('Custom Output Format');
});
function serializeDateFormat(step) {
    const attributes = {
        // Use custom format if CUSTOM is selected, otherwise use the selected format
        inputFormat: step.properties.inputFormat === 'CUSTOM'
            ? step.properties.customInputFormat
            : step.properties.inputFormat,
        outputFormat: step.properties.outputFormat === 'CUSTOM'
            ? step.properties.customOutputFormat
            : step.properties.outputFormat,
    };
    if (step.branches.input.length > 0) {
        attributes.input = serializeStep(step.branches.input[0]);
    }
    return {
        name: step.name,
        type: step.type,
        attributes: attributes,
    };
}
function deserializeDateFormat(data) {
    const step = {
        id: Uid.next(),
        componentType: 'switch',
        name: data.name ?? 'Date Format',
        type: 'dateFormat',
        description: description$s,
        properties: {
            inputFormat: 'ISO8601',
            outputFormat: 'MM/dd/yyyy',
            customInputFormat: '',
            customOutputFormat: '',
        },
        branches: {
            input: [],
        },
    };
    // Determine if the incoming format is a known format or custom
    const knownFormats = ['ISO8601', 'LDAP', 'PEOPLE_SOFT', 'EPOCH_TIME_JAVA', 'EPOCH_TIME_WIN32'];
    if (data.attributes.inputFormat) {
        if (data.attributes.inputFormat && knownFormats.includes(data.attributes.inputFormat)) {
            step.properties.inputFormat = data.attributes.inputFormat;
        }
        else {
            step.properties.inputFormat = 'CUSTOM';
            step.properties.customInputFormat = data.attributes.inputFormat ? String(data.attributes.inputFormat) : '';
        }
    }
    if (data.attributes.outputFormat) {
        if (data.attributes.outputFormat && knownFormats.includes(data.attributes.outputFormat)) {
            step.properties.outputFormat = data.attributes.outputFormat;
        }
        else {
            step.properties.outputFormat = 'CUSTOM';
            step.properties.customOutputFormat = data.attributes.outputFormat ? String(data.attributes.outputFormat) : '';
        }
    }
    if (data.attributes.input) {
        step.branches.input.push(deserializeToStep(data.attributes.input));
    }
    return step;
}
function isDateFormatStep(step) {
    return step.type === 'dateFormat';
}
function getDateFormatIcon() {
    const svg = `
  <svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24">
  <path d="M0 0h24v24H0z" fill="none"/>
  <path fill="gray" d="M9 11H7v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2zm2-7h-1V2h-2v2H8V2H6v2H5c-1.11 0-1.99.9-1.99 2L3 20c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 16H5V9h14v11z"/>
  </svg>`;
    const encoded = encodeURIComponent(svg.trim());
    return `data:image/svg+xml,${encoded}`;
}
const DateFormatMap = {
    "ISO8601": "ISO8601",
    "LDAP": "LDAP",
    "PEOPLE_SOFT": "PeopleSoft",
    "EPOCH_TIME_JAVA": "Epoch Time (Java)",
    "EPOCH_TIME_WIN32": "Epoch Time (Win32)",
    "CUSTOM": "Custom SimpleDateFormat",
};
// Helper function to validate SimpleDateFormat patterns
function validateDateFormatPattern(pattern) {
    if (!pattern || pattern.trim() === '') {
        return { isValid: false, error: 'Pattern cannot be empty' };
    }
    // Basic validation for common SimpleDateFormat patterns
    const validPatterns = /^[yMdHhmsaEGwWDFkKzZSX\s\-/.,:'"]*$/;
    if (!validPatterns.test(pattern)) {
        return { isValid: false, error: 'Invalid characters in date pattern' };
    }
    return { isValid: true };
}
// Helper function to get example output for a given pattern
function getDateFormatExample(pattern) {
    const examples = {
        'yyyy-MM-dd': '2024-03-15',
        'MM/dd/yyyy': '03/15/2024',
        'dd/MM/yyyy': '15/03/2024',
        'yyyy-MM-dd HH:mm:ss': '2024-03-15 14:30:45',
        'MMM dd, yyyy': 'Mar 15, 2024',
        'EEEE, MMMM dd, yyyy': 'Friday, March 15, 2024',
        'HH:mm:ss': '14:30:45',
        'yyyy-DDD': '2024-075',
    };
    return examples[pattern] || 'Example: 2024-03-15';
}

let description$r = 'Use the date math transform to add, subtract, and round components of a timestamp\'s incoming value. It also allows you to work with a referential value of "now" to run operations against the current date and time instead of a fixed value.';
function createDateMath() {
    return {
        id: Uid.next(),
        componentType: 'switch',
        name: 'Date Math',
        type: 'dateMath',
        description: description$r,
        properties: {
            expression: '',
            roundUp: false,
            useBuilder: true, // Toggle between builder and manual input
            baseDate: 'input', // 'input' or 'now'
            operations: [], // Array of operations for the builder
        },
        branches: {
            input: [],
        },
    };
}
const DateMathModel = createStepModel('dateMath', 'switch', (step) => {
    step
        .property('useBuilder')
        .value(createBooleanValueModel({
        defaultValue: true,
    }))
        .hint('Use the visual builder or enter expression manually')
        .label('Use Visual Builder');
    step
        .property('baseDate')
        .value(createChoiceValueModel({
        choices: ['input', 'now'],
        defaultValue: 'input',
    }))
        .hint('Start with input date or current date/time')
        .label('Base Date');
    step
        .property('expression')
        .value(createStringValueModel({
        minLength: 1,
    }))
        .hint('A string value of the date and time components to operate on, along with the math operations to execute. Multiple operations on multiple components are supported. See <a href="https://developer.sailpoint.com/docs/extensibility/transforms/operations/date-math#transform-structure" target="_blank">Date Math Expression</a> for more details')
        .label('Expression');
    step
        .property('roundUp')
        .value(createBooleanValueModel({
        defaultValue: false,
    }))
        .hint('This true or false value indicates whether the transform rounds up or down when the expression defines a rounding ("/") operation. If this value is not provided, the transform defaults to false.')
        .label('Round Up');
});
function serializeDateMath(step) {
    const attributes = {};
    // If using builder, construct expression from operations
    if (step.properties.useBuilder && step.properties.operations && step.properties.operations.length > 0) {
        let expression = step.properties.baseDate === 'now' ? 'now' : '';
        for (const op of step.properties.operations) {
            // For rounding operations, there's no value
            if (op.operation === '/') {
                expression += `${op.operation}${op.unit}`;
            }
            else {
                expression += `${op.operation}${op.value}${op.unit}`;
            }
        }
        attributes.expression = expression || (step.properties.baseDate === 'now' ? 'now' : '');
    }
    else {
        // Use manual expression
        attributes.expression = step.properties.expression;
    }
    if (step.properties.roundUp === true) {
        attributes.roundUp = step.properties.roundUp;
    }
    if (step.branches.input.length > 0) {
        attributes.input = serializeStep(step.branches.input[0]);
    }
    return {
        name: step.name,
        type: step.type,
        attributes: attributes,
    };
}
function deserializeDateMath(data) {
    console.log('Deserializing Date Math step:', data);
    const step = {
        id: Uid.next(),
        componentType: 'switch',
        name: data.name ?? 'Date Math',
        type: 'dateMath',
        description: description$r,
        properties: {
            expression: data.attributes.expression || '',
            roundUp: data.attributes.roundUp ?? false,
            useBuilder: true,
            baseDate: 'input',
            operations: [],
        },
        branches: {
            input: [],
        },
    };
    // Try to parse expression into operations for builder
    if (data.attributes.expression) {
        const parsed = parseExpressionToOperations(data.attributes.expression);
        step.properties.baseDate = parsed.baseDate;
        step.properties.operations = parsed.operations;
    }
    if (data.attributes.input) {
        step.branches.input.push(deserializeToStep(data.attributes.input));
    }
    return step;
}
function parseExpressionToOperations(expression) {
    if (!expression) {
        return { baseDate: 'input', operations: [] };
    }
    const baseDate = expression.startsWith('now') ? 'now' : 'input';
    const operations = [];
    // Remove 'now' from beginning if present
    let remaining = expression.startsWith('now') ? expression.substring(3) : expression;
    // Parse operations using regex - make the value group optional for rounding operations
    const operationRegex = /([+\-/])(\d*)([yMwdhms])/g;
    let match;
    while ((match = operationRegex.exec(remaining)) !== null) {
        const [, operation, value, unit] = match;
        console.log(`Found operation: ${operation}, value: ${value}, unit: ${unit}`);
        // For rounding operations (/), there's no value
        if (operation === '/') {
            operations.push({
                operation: operation,
                unit: unit
            });
        }
        else {
            // For add/subtract operations, parse the value
            operations.push({
                operation: operation,
                value: parseInt(value, 10),
                unit: unit
            });
        }
    }
    return { baseDate, operations };
}
function buildExpressionFromOperations(baseDate, operations) {
    let expression = baseDate === 'now' ? 'now' : '';
    for (const op of operations) {
        expression += `${op.operation}${op.value}${op.unit}`;
    }
    return expression || (baseDate === 'now' ? 'now' : '');
}
function isDateMathStep(step) {
    return step.type === 'dateMath';
}
function getDateMathIcon() {
    const svg = `<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24">
    <path d="M0 0h24v24H0zm0 0h24v24H0z" fill="none"/>
    <path fill="gray" d="M16.05 16.29l2.86-3.07c.38-.39.72-.79 1.04-1.18.32-.39.59-.78.82-1.17.23-.39.41-.78.54-1.17.13-.39.19-.79.19-1.18 0-.53-.09-1.02-.27-1.46-.18-.44-.44-.81-.78-1.11-.34-.31-.77-.54-1.26-.71-.51-.16-1.08-.24-1.72-.24-.69 0-1.31.11-1.85.32-.54.21-1 .51-1.36.88-.37.37-.65.8-.84 1.3-.18.47-.27.97-.28 1.5h2.14c.01-.31.05-.6.13-.87.09-.29.23-.54.4-.75.18-.21.41-.37.68-.49.27-.12.6-.18.96-.18.31 0 .58.05.81.15.23.1.43.25.59.43.16.18.28.4.37.65.08.25.13.52.13.81 0 .22-.03.43-.08.65-.06.22-.15.45-.29.7-.14.25-.32.53-.56.83-.23.3-.52.65-.88 1.03l-4.17 4.55V18H22v-1.71h-5.95zM8 7H6v4H2v2h4v4h2v-4h4v-2H8V7z"/>
    </svg>`;
    const encoded = encodeURIComponent(svg.trim());
    return `data:image/svg+xml,${encoded}`;
}
// Helper functions for the UI
const DateMathUnits = {
    'y': 'Years',
    'M': 'Months',
    'w': 'Weeks',
    'd': 'Days',
    'h': 'Hours',
    'm': 'Minutes',
    's': 'Seconds'
};
const DateMathOperations = {
    '+': 'Add',
    '-': 'Subtract',
    '/': 'Round to'
};
function getDateMathExamples() {
    return [
        { expression: 'now', description: 'Current date and time' },
        { expression: 'now/h', description: 'Current time rounded to the hour' },
        { expression: 'now+1w', description: 'One week from now' },
        { expression: 'now+1y+1M+2d-4h+1m-3s/s', description: 'Complex calculation rounded to seconds' },
        { expression: '+3M', description: 'Add 3 months to input date' },
        { expression: '-1d', description: 'Subtract 1 day from input date' },
        { expression: '/d', description: 'Round input date to start of day' }
    ];
}

let description$q = 'Use the decompose diacritical marks transform to clean or standardize symbols used within language to inform the reader how to say or pronounce a letter. These symbols are often incompatible with downstream applications and must be standardized to another character set such as ASCII.';
function createDecomposeDiacriticalMarks() {
    return {
        id: Uid.next(),
        componentType: 'switch',
        name: 'Decompose Diacritical Marks',
        type: 'decomposeDiacriticalMarks',
        description: description$q,
        properties: {},
        branches: {
            input: [],
        },
    };
}
function serializeDecomposeDiacriticalMarks(step) {
    const attributes = {};
    if (step.branches.input.length > 0) {
        attributes.input = serializeStep(step.branches.input[0]);
    }
    return {
        name: step.name,
        type: step.type,
        attributes: attributes,
    };
}
function deserializeDecomposeDiacriticalMarks(data) {
    const step = {
        id: Uid.next(),
        componentType: 'switch',
        name: data.name ?? 'Decompose Diacritical Marks',
        type: 'decomposeDiacriticalMarks',
        description: description$q,
        properties: {},
        branches: {
            input: [],
        },
    };
    if (data.attributes.input) {
        step.branches.input.push(deserializeToStep(data.attributes.input));
    }
    return step;
}
function isDecomposeDiacriticalMarksStep(step) {
    return step.type === 'decomposeDiacriticalMarks';
}

let description$p = 'Use the E.164 phone transform to convert an incoming phone number string into an E.164-compatible number.';
function createE164Phone() {
    return {
        id: Uid.next(),
        componentType: 'switch',
        name: 'E.164 Phone',
        type: 'e164phone',
        description: description$p,
        properties: {
            defaultRegion: 'US',
        },
        branches: {
            input: [],
        },
    };
}
const E164PhoneModel = createStepModel('e164phone', 'switch', (step) => {
    step
        .property('defaultRegion')
        .value(createChoiceValueModel({
        choices: [
            "AF", "AX", "AL", "DZ", "AS", "AD", "AO", "AI", "AQ", "AG",
            "AR", "AM", "AW", "AU", "AT", "AZ", "BS", "BH", "BD", "BB",
            "BY", "BE", "BZ", "BJ", "BM", "BT", "BO", "BQ", "BA", "BW",
            "BV", "BR", "IO", "BN", "BG", "BF", "BI", "CV", "KH", "CM",
            "CA", "KY", "CF", "TD", "CL", "CN", "CX", "CC", "CO", "KM",
            "CG", "CD", "CK", "CR", "HR", "CU", "CW", "CY", "CZ", "DK",
            "DJ", "DM", "DO", "EC", "EG", "SV", "GQ", "ER", "EE", "SZ",
            "ET", "FK", "FO", "FJ", "FI", "FR", "GF", "PF", "TF", "GA",
            "GM", "GE", "DE", "GH", "GI", "GR", "GL", "GD", "GP", "GU",
            "GT", "GG", "GN", "GW", "GY", "HT", "HM", "VA", "HN", "HK",
            "HU", "IS", "IN", "ID", "IR", "IQ", "IE", "IM", "IL", "IT",
            "JM", "JP", "JE", "JO", "KZ", "KE", "KI", "KP", "KR", "KW",
            "KG", "LA", "LV", "LB", "LS", "LR", "LY", "LI", "LT", "LU",
            "MO", "MG", "MW", "MY", "MV", "ML", "MT", "MH", "MQ", "MR",
            "MU", "YT", "MX", "FM", "MD", "MC", "MN", "ME", "MS", "MA",
            "MZ", "MM", "NA", "NR", "NP", "NL", "NC", "NZ", "NI", "NE",
            "NG", "NU", "NF", "MK", "MP", "NO", "OM", "PK", "PW", "PS",
            "PA", "PG", "PY", "PE", "PH", "PN", "PL", "PT", "PR", "QA",
            "RE", "RO", "RU", "RW", "BL", "SH", "KN", "LC", "MF", "PM",
            "VC", "WS", "SM", "ST", "SA", "SN", "RS", "SC", "SL", "SG",
            "SX", "SK", "SI", "SB", "SO", "ZA", "GS", "SS", "ES", "LK",
            "SD", "SR", "SJ", "SE", "CH", "SY", "TW", "TJ", "TZ", "TH",
            "TL", "TG", "TK", "TO", "TT", "TN", "TR", "TM", "TV", "UG",
            "UA", "AE", "GB", "US", "UY", "UZ", "VU", "VE", "VN", "EH",
            "YE", "ZM", "ZW"
        ],
    }))
        .hint('This is an optional attribute used to define the phone number region to format into. If no defaultRegion is provided, the transform takes US as the default country. The format of the country code must be in ISO 3166-1 alpha-2 format.')
        .label('Default Region');
});
function serializeE164Phone(step) {
    // const match = step.properties.defaultRegion.match(/\(([^)]+)\)/);
    // const code = match ? match[1] : null;
    const attributes = {
        defaultRegion: step.properties.defaultRegion,
    };
    if (step.branches.input.length > 0) {
        attributes.input = serializeStep(step.branches.input[0]);
    }
    return {
        name: step.name,
        type: step.type,
        attributes: attributes,
    };
}
function deserializeE164Phone(data) {
    const step = {
        id: Uid.next(),
        componentType: 'switch',
        name: data.name ?? 'E.164 Phone',
        type: 'e164phone',
        description: description$p,
        properties: {
            defaultRegion: data.attributes?.defaultRegion ?? 'US',
        },
        branches: {
            input: [],
        },
    };
    if (data.attributes?.input) {
        step.branches.input.push(deserializeToStep(data.attributes?.input));
    }
    return step;
}
function isE164PhoneStep(step) {
    return step.type === 'e164phone';
}
const isoAlpha2Map = {
    "AF": "Afghanistan (AF)",
    "AX": "Åland Islands (AX)",
    "AL": "Albania (AL)",
    "DZ": "Algeria (DZ)",
    "AS": "American Samoa (AS)",
    "AD": "Andorra (AD)",
    "AO": "Angola (AO)",
    "AI": "Anguilla (AI)",
    "AQ": "Antarctica (AQ)",
    "AG": "Antigua and Barbuda (AG)",
    "AR": "Argentina (AR)",
    "AM": "Armenia (AM)",
    "AW": "Aruba (AW)",
    "AU": "Australia (AU)",
    "AT": "Austria (AT)",
    "AZ": "Azerbaijan (AZ)",
    "BS": "Bahamas (BS)",
    "BH": "Bahrain (BH)",
    "BD": "Bangladesh (BD)",
    "BB": "Barbados (BB)",
    "BY": "Belarus (BY)",
    "BE": "Belgium (BE)",
    "BZ": "Belize (BZ)",
    "BJ": "Benin (BJ)",
    "BM": "Bermuda (BM)",
    "BT": "Bhutan (BT)",
    "BO": "Bolivia (BO)",
    "BQ": "Bonaire, Sint Eustatius and Saba (BQ)",
    "BA": "Bosnia and Herzegovina (BA)",
    "BW": "Botswana (BW)",
    "BV": "Bouvet Island (BV)",
    "BR": "Brazil (BR)",
    "IO": "British Indian Ocean Territory (IO)",
    "BN": "Brunei Darussalam (BN)",
    "BG": "Bulgaria (BG)",
    "BF": "Burkina Faso (BF)",
    "BI": "Burundi (BI)",
    "CV": "Cabo Verde (CV)",
    "KH": "Cambodia (KH)",
    "CM": "Cameroon (CM)",
    "CA": "Canada (CA)",
    "KY": "Cayman Islands (KY)",
    "CF": "Central African Republic (CF)",
    "TD": "Chad (TD)",
    "CL": "Chile (CL)",
    "CN": "China (CN)",
    "CX": "Christmas Island (CX)",
    "CC": "Cocos (Keeling) Islands (CC)",
    "CO": "Colombia (CO)",
    "KM": "Comoros (KM)",
    "CG": "Congo (CG)",
    "CD": "Congo, Democratic Republic of the (CD)",
    "CK": "Cook Islands (CK)",
    "CR": "Costa Rica (CR)",
    "HR": "Croatia (HR)",
    "CU": "Cuba (CU)",
    "CW": "Curaçao (CW)",
    "CY": "Cyprus (CY)",
    "CZ": "Czechia (CZ)",
    "DK": "Denmark (DK)",
    "DJ": "Djibouti (DJ)",
    "DM": "Dominica (DM)",
    "DO": "Dominican Republic (DO)",
    "EC": "Ecuador (EC)",
    "EG": "Egypt (EG)",
    "SV": "El Salvador (SV)",
    "GQ": "Equatorial Guinea (GQ)",
    "ER": "Eritrea (ER)",
    "EE": "Estonia (EE)",
    "SZ": "Eswatini (SZ)",
    "ET": "Ethiopia (ET)",
    "FK": "Falkland Islands (Malvinas) (FK)",
    "FO": "Faroe Islands (FO)",
    "FJ": "Fiji (FJ)",
    "FI": "Finland (FI)",
    "FR": "France (FR)",
    "GF": "French Guiana (GF)",
    "PF": "French Polynesia (PF)",
    "TF": "French Southern Territories (TF)",
    "GA": "Gabon (GA)",
    "GM": "Gambia (GM)",
    "GE": "Georgia (GE)",
    "DE": "Germany (DE)",
    "GH": "Ghana (GH)",
    "GI": "Gibraltar (GI)",
    "GR": "Greece (GR)",
    "GL": "Greenland (GL)",
    "GD": "Grenada (GD)",
    "GP": "Guadeloupe (GP)",
    "GU": "Guam (GU)",
    "GT": "Guatemala (GT)",
    "GG": "Guernsey (GG)",
    "GN": "Guinea (GN)",
    "GW": "Guinea-Bissau (GW)",
    "GY": "Guyana (GY)",
    "HT": "Haiti (HT)",
    "HM": "Heard Island and McDonald Islands (HM)",
    "VA": "Holy See (VA)",
    "HN": "Honduras (HN)",
    "HK": "Hong Kong (HK)",
    "HU": "Hungary (HU)",
    "IS": "Iceland (IS)",
    "IN": "India (IN)",
    "ID": "Indonesia (ID)",
    "IR": "Iran (IR)",
    "IQ": "Iraq (IQ)",
    "IE": "Ireland (IE)",
    "IM": "Isle of Man (IM)",
    "IL": "Israel (IL)",
    "IT": "Italy (IT)",
    "JM": "Jamaica (JM)",
    "JP": "Japan (JP)",
    "JE": "Jersey (JE)",
    "JO": "Jordan (JO)",
    "KZ": "Kazakhstan (KZ)",
    "KE": "Kenya (KE)",
    "KI": "Kiribati (KI)",
    "KP": "Korea (Democratic People's Republic of) (KP)",
    "KR": "Korea (Republic of) (KR)",
    "KW": "Kuwait (KW)",
    "KG": "Kyrgyzstan (KG)",
    "LA": "Lao People's Democratic Republic (LA)",
    "LV": "Latvia (LV)",
    "LB": "Lebanon (LB)",
    "LS": "Lesotho (LS)",
    "LR": "Liberia (LR)",
    "LY": "Libya (LY)",
    "LI": "Liechtenstein (LI)",
    "LT": "Lithuania (LT)",
    "LU": "Luxembourg (LU)",
    "MO": "Macao (MO)",
    "MG": "Madagascar (MG)",
    "MW": "Malawi (MW)",
    "MY": "Malaysia (MY)",
    "MV": "Maldives (MV)",
    "ML": "Mali (ML)",
    "MT": "Malta (MT)",
    "MH": "Marshall Islands (MH)",
    "MQ": "Martinique (MQ)",
    "MR": "Mauritania (MR)",
    "MU": "Mauritius (MU)",
    "YT": "Mayotte (YT)",
    "MX": "Mexico (MX)",
    "FM": "Micronesia (FM)",
    "MD": "Moldova (MD)",
    "MC": "Monaco (MC)",
    "MN": "Mongolia (MN)",
    "ME": "Montenegro (ME)",
    "MS": "Montserrat (MS)",
    "MA": "Morocco (MA)",
    "MZ": "Mozambique (MZ)",
    "MM": "Myanmar (MM)",
    "NA": "Namibia (NA)",
    "NR": "Nauru (NR)",
    "NP": "Nepal (NP)",
    "NL": "Netherlands (NL)",
    "NC": "New Caledonia (NC)",
    "NZ": "New Zealand (NZ)",
    "NI": "Nicaragua (NI)",
    "NE": "Niger (NE)",
    "NG": "Nigeria (NG)",
    "NU": "Niue (NU)",
    "NF": "Norfolk Island (NF)",
    "MK": "North Macedonia (MK)",
    "MP": "Northern Mariana Islands (MP)",
    "NO": "Norway (NO)",
    "OM": "Oman (OM)",
    "PK": "Pakistan (PK)",
    "PW": "Palau (PW)",
    "PS": "Palestine (PS)",
    "PA": "Panama (PA)",
    "PG": "Papua New Guinea (PG)",
    "PY": "Paraguay (PY)",
    "PE": "Peru (PE)",
    "PH": "Philippines (PH)",
    "PN": "Pitcairn (PN)",
    "PL": "Poland (PL)",
    "PT": "Portugal (PT)",
    "PR": "Puerto Rico (PR)",
    "QA": "Qatar (QA)",
    "RE": "Réunion (RE)",
    "RO": "Romania (RO)",
    "RU": "Russian Federation (RU)",
    "RW": "Rwanda (RW)",
    "BL": "Saint Barthélemy (BL)",
    "SH": "Saint Helena, Ascension and Tristan da Cunha (SH)",
    "KN": "Saint Kitts and Nevis (KN)",
    "LC": "Saint Lucia (LC)",
    "MF": "Saint Martin (MF)",
    "PM": "Saint Pierre and Miquelon (PM)",
    "VC": "Saint Vincent and the Grenadines (VC)",
    "WS": "Samoa (WS)",
    "SM": "San Marino (SM)",
    "ST": "Sao Tome and Principe (ST)",
    "SA": "Saudi Arabia (SA)",
    "SN": "Senegal (SN)",
    "RS": "Serbia (RS)",
    "SC": "Seychelles (SC)",
    "SL": "Sierra Leone (SL)",
    "SG": "Singapore (SG)",
    "SX": "Sint Maarten (SX)",
    "SK": "Slovakia (SK)",
    "SI": "Slovenia (SI)",
    "SB": "Solomon Islands (SB)",
    "SO": "Somalia (SO)",
    "ZA": "South Africa (ZA)",
    "GS": "South Georgia and the South Sandwich Islands (GS)",
    "SS": "South Sudan (SS)",
    "ES": "Spain (ES)",
    "LK": "Sri Lanka (LK)",
    "SD": "Sudan (SD)",
    "SR": "Suriname (SR)",
    "SJ": "Svalbard and Jan Mayen (SJ)",
    "SE": "Sweden (SE)",
    "CH": "Switzerland (CH)",
    "SY": "Syrian Arab Republic (SY)",
    "TW": "Taiwan (TW)",
    "TJ": "Tajikistan (TJ)",
    "TZ": "Tanzania (TZ)",
    "TH": "Thailand (TH)",
    "TL": "Timor-Leste (TL)",
    "TG": "Togo (TG)",
    "TK": "Tokelau (TK)",
    "TO": "Tonga (TO)",
    "TT": "Trinidad and Tobago (TT)",
    "TN": "Tunisia (TN)",
    "TR": "Turkey (TR)",
    "TM": "Turkmenistan (TM)",
    "TV": "Tuvalu (TV)",
    "UG": "Uganda (UG)",
    "UA": "Ukraine (UA)",
    "AE": "United Arab Emirates (AE)",
    "GB": "United Kingdom (GB)",
    "US": "United States (US)",
    "UY": "Uruguay (UY)",
    "UZ": "Uzbekistan (UZ)",
    "VU": "Vanuatu (VU)",
    "VE": "Venezuela (VE)",
    "VN": "Viet Nam (VN)",
    "EH": "Western Sahara (EH)",
    "YE": "Yemen (YE)",
    "ZM": "Zambia (ZM)",
    "ZW": "Zimbabwe (ZW)"
};
function getE164PhoneIcon() {
    const svg = `<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24"><path d="M0 0h24v24H0z" fill="none"/>
        <path fill="gray" d="M6.62 10.79c1.44 2.83 3.76 5.14 6.59 6.59l2.2-2.2c.27-.27.67-.36 1.02-.24 1.12.37 2.33.57 3.57.57.55 0 1 .45 1 1V20c0 .55-.45 1-1 1-9.39 0-17-7.61-17-17 0-.55.45-1 1-1h3.5c.55 0 1 .45 1 1 0 1.25.2 2.45.57 3.57.11.35.03.74-.25 1.02l-2.2 2.2z"/>
        </svg>`;
    const encoded = encodeURIComponent(svg.trim());
    return `data:image/svg+xml,${encoded}`;
}

function createButton(text, clickHandler) {
    const button = document.createElement('button');
    button.innerText = text;
    button.addEventListener('click', clickHandler, false);
    return button;
}
function appendTitle(root, title) {
    const h2 = document.createElement('h2');
    h2.innerText = title;
    root.appendChild(h2);
}
function appendPropertyTitle(root, title) {
    const h3 = document.createElement('h3');
    h3.innerText = title;
    root.appendChild(h3);
}
function appendNameEditor(root, step, editorContext) {
    const input = document.createElement('input');
    input.type = 'text';
    input.value = step.name;
    input.addEventListener('input', () => {
        step.name = input.value;
        editorContext.notifyNameChanged();
    }, false);
    appendPropertyTitle(root, 'Name');
    root.appendChild(input);
}
function appendBranchEditor(root, step, editorContext, typeName) {
    const input = document.createElement('input');
    input.id = 'branch-editor-input'; // Assign an id here
    input.type = 'text';
    appendPropertyTitle(root, typeName);
    root.appendChild(input);
}
function appendConditionEditor(root, value, onChange) {
    const input = document.createElement('input');
    input.type = 'text';
    input.value = value;
    input.addEventListener('input', () => {
        onChange(input.value);
    }, false);
    root.appendChild(input);
}

let description$o = 'Use the first valid transform to perform if/then/else operations on multiple different data points to return the first piece of data that is not null.';
function createFirstValid() {
    return {
        id: Uid.next(),
        componentType: 'switch',
        name: 'First Valid',
        type: 'firstValid',
        description: description$o,
        properties: {
            ignoreErrors: false
        },
        branches: {},
    };
}
const FirstValidModel = createStepModel('firstValid', 'switch', step => {
    step
        .property('ignoreErrors')
        .value(createBooleanValueModel({
        defaultValue: false,
    }))
        .hint('This true or false value indicates whether to proceed to the next option if an error (like an NPE) occurs. Default is false.')
        .label('Ignore Errors');
});
function serializeFirstValid(step) {
    const attributes = {};
    if (step.properties.ignoreErrors === true) {
        attributes.ignoreErrors = step.properties.ignoreErrors;
    }
    for (const [branchName, sequence] of Object.entries(step.branches)) {
        if (sequence.length === 1) {
            attributes[branchName] = serializeStep(sequence[0]);
        }
        else {
            throw new Error(`Branch "${branchName}" must have exactly one step.`);
        }
    }
    return {
        name: step.name,
        type: step.type,
        attributes: attributes
    };
}
function deserializeFirstValid(data) {
    const branches = {};
    const attributes = data.attributes;
    if (attributes.ignoreErrors !== undefined) {
        attributes.ignoreErrors = attributes.ignoreErrors === 'true';
    }
    else {
        attributes.ignoreErrors = false;
    }
    data.attributes.values.forEach((element, index) => {
        const key = element.name ?? `Variable${index}`;
        console.log(`iterating over: ` + element);
        branches[key] = [deserializeToStep(element)];
    });
    return {
        id: Uid.next(),
        componentType: 'switch',
        type: 'firstValid',
        name: data.attributes.label ?? 'First Valid',
        description: description$o,
        properties: { ignoreErrors: attributes.ignoreErrors },
        branches: branches,
    };
}
function appendValueEditor(root, step, editorContext) {
    const select = document.createElement('select');
    const trueOption = document.createElement('option');
    trueOption.value = 'true';
    trueOption.text = 'True';
    select.appendChild(trueOption);
    const falseOption = document.createElement('option');
    falseOption.value = 'false';
    falseOption.text = 'False';
    select.appendChild(falseOption);
    if (step.properties.ignoreErrors !== undefined) {
        select.value = String(step.properties.ignoreErrors);
    }
    select.addEventListener('input', () => {
        step.properties.ignoreErrors = select.value === 'true';
        editorContext.notifyNameChanged();
    }, false);
    appendPropertyTitle(root, 'Value');
    root.appendChild(select);
}
function appendToggleEditor(root, step, editorContext, viewContainerRef) {
    appendPropertyTitle(root, 'Ignore Errors?');
    const toggleRef = viewContainerRef.createComponent(MatSlideToggle);
    toggleRef.instance.checked = !!step.properties.ignoreErrors;
    toggleRef.instance.color = 'primary';
    toggleRef.instance.labelPosition = 'after';
    toggleRef.instance.name = 'ignoreErrorsToggle';
    toggleRef.instance.change.subscribe((event) => {
        step.properties.ignoreErrors = event.checked;
        editorContext.notifyNameChanged();
    });
    root.appendChild(toggleRef.location.nativeElement);
}
function isFirstValidStep(step) {
    return step.type === 'firstValid';
}
function getFirstValidIcon() {
    const svg = `
  <svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24" fill="gray">
  <path d="M0 0h24v24H0z" fill="none"/><path d="M22 11V3h-7v3H9V3H2v8h7V8h2v10h4v3h7v-8h-7v3h-2V8h2v3z"/>
  </svg>`;
    const encoded = encodeURIComponent(svg.trim());
    return `data:image/svg+xml,${encoded}`;
}

let description$n = 'This transform allows you to generate a random string up to 450 characters, using true/false flags to denote whether the string includes numbers and/or special characters.';
function createGenerateRandomString() {
    return {
        id: Uid.next(),
        componentType: 'task',
        name: 'Generate Random String',
        type: 'generateRandomString',
        description: description$n,
        properties: {
            includeNumbers: true,
            includeSpecialChars: true,
            length: 16,
        }
    };
}
const GenerateRandomStringModel = createStepModel('generateRandomString', 'task', (step) => {
    step.property('length').value(createNumberValueModel({
        min: 1,
        max: 450
    })).label('String Length')
        .hint('The length of the random string to generate. Must be between 1 and 450 characters.');
    step
        .property('includeNumbers')
        .value(createBooleanValueModel({
        defaultValue: true,
    }))
        .hint("This configuration's value is a boolean (true/false). It controls whether to include numbers in the generated string.")
        .label('Include Numbers');
    step
        .property('includeSpecialChars')
        .value(createBooleanValueModel({
        defaultValue: true,
    }))
        .hint("This configuration's value is a boolean (true/false). It controls whether to include special characters in the generated string.")
        .label('Include Special Characters');
});
function serializeGenerateRandomString(step) {
    return {
        name: step.name,
        type: "rule",
        attributes: {
            name: "Cloud Services Deployment Utility",
            operation: "generateRandomString",
            includeNumbers: step.properties.includeNumbers,
            includeSpecialChars: step.properties.includeSpecialChars,
            length: step.properties.length,
        }
    };
}
function deserializeGenerateRandomString(data) {
    return {
        id: Uid.next(),
        componentType: 'task',
        type: 'generateRandomString',
        name: data.name ?? 'Generate Random String',
        description: description$n,
        properties: {
            includeNumbers: data.attributes.includeNumbers,
            includeSpecialChars: data.attributes.includeSpecialChars,
            length: data.attributes.length,
        }
    };
}
function isGenerateRandomStringStep(step) {
    return step.type === 'generateRandomString';
}

let description$m = 'This transform allows you to get the rightmost N characters of a string.';
function createGetEndOfString() {
    return {
        id: Uid.next(),
        componentType: 'switch',
        name: 'Get End of String',
        type: 'getEndOfString',
        description: description$m,
        properties: {
            numChars: 4,
        },
        branches: {
            input: [],
        },
    };
}
const GetEndOfStringModel = createStepModel('getEndOfString', 'switch', (step) => {
    step.property('numChars')
        .value(createNumberValueModel({
        min: 1,
        max: 1000
    })).label('Number of Characters')
        .hint('This specifies how many of the rightmost characters within the incoming string the transform returns. If the value of numChars is greater than the string length, the transform returns null.');
});
function serializeGetEndOfString(step) {
    const attributes = {
        name: "Cloud Services Deployment Utility",
        operation: "getEndOfString",
        numChars: step.properties.numChars,
    };
    if (step.branches.input.length > 0) {
        attributes.input = serializeStep(step.branches.input[0]);
    }
    return {
        name: step.name,
        type: "rule",
        attributes: attributes,
    };
}
function deserializeGetEndOfString(data) {
    return {
        id: Uid.next(),
        componentType: 'switch',
        type: 'getEndOfString',
        name: data.name ?? 'Get End of String',
        description: description$m,
        properties: {
            numChars: data.attributes.numChars,
        },
        branches: {
            input: [],
        },
    };
}
function isGetEndOfStringStep(step) {
    return step.type === 'getEndOfString';
}

let description$l = 'This transform allows you to get the identity attribute of another user from within a given identity\'s calculation. For your convenience, the transform allows you to use "manager" as a referential lookup to the target identity.';
function createGetReferenceIdentityAttribute() {
    return {
        id: Uid.next(),
        componentType: 'task',
        name: 'Get Reference Identity Attribute',
        type: 'getReferenceIdentityAttribute',
        description: description$l,
        properties: {
            uid: '',
            attributeName: '',
        }
    };
}
const GetReferenceIdentityAttributeModel = createStepModel('getReferenceIdentityAttribute', 'task', (step) => {
    step
        .property('uid')
        .value(createStringValueModel({
        minLength: 1,
    }))
        .hint('This is the SailPoint User Name (uid) value of the identity whose attribute is desired. For your convenience, you can use the "manager" keyword to look up the user\'s manager and then get that manager\'s identity attribute.')
        .label('SailPoint User Name (uid)');
    step
        .property('attributeName')
        .value(createStringValueModel({
        minLength: 1,
    }))
        .hint('This is the name of the identity attribute to retrieve from the target identity. For example, you might use this to get the "department" attribute of a user\'s manager.')
        .label('Attribute Name');
});
function serializeGetReferenceIdentityAttribute(step) {
    return {
        name: step.name,
        type: "rule",
        attributes: {
            name: "Cloud Services Deployment Utility",
            operation: "getReferenceIdentityAttribute",
            uid: step.properties.uid,
            attributeName: step.properties.attributeName,
        }
    };
}
function deserializeGetReferenceIdentityAttribute(data) {
    return {
        id: Uid.next(),
        componentType: 'task',
        type: 'getReferenceIdentityAttribute',
        name: data.name ?? 'Get Reference Identity Attribute',
        description: description$l,
        properties: {
            uid: data.attributes.uid,
            attributeName: data.attributes.attributeName,
        }
    };
}
function isGetReferenceIdentityAttributeStep(step) {
    return step.type === 'getReferenceIdentityAttribute';
}

let description$k = 'Use the identity attribute transform to get the value of a user\'s identity attribute. This transform is often useful within a source\'s account create or disable profile.';
function createIdentityAttribute() {
    return {
        id: Uid.next(),
        componentType: 'task',
        name: 'Identity Attribute',
        type: 'identityAttribute',
        description: description$k,
        properties: {
            name: '',
        },
    };
}
const IdentityAttributeModel = createStepModel('identityAttribute', 'task', (step) => {
    step
        .property('name')
        .value(createStringValueModel({
        minLength: 1,
    }))
        .hint('The system (camel-cased) name of the identity attribute to bring in.')
        .label('Identity Attribute Name');
});
function serializeIdentityAttribute(step) {
    return {
        name: step.name,
        type: step.type,
        attributes: {
            name: step.properties.name,
        }
    };
}
function deserializeIdentityAttribute(data) {
    return {
        id: Uid.next(),
        componentType: 'task',
        type: 'identityAttribute',
        name: data.name ?? 'Identity Attribute',
        description: description$k,
        properties: {
            name: data.attributes.name,
        }
    };
}
function isIdentityAttributeStep(step) {
    return step.type === 'identityAttribute';
}
function getIdentityAttributeIcon() {
    const svg = `
    <svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24">
    <path d="M0 0h24v24H0z" fill="none"/>
    <path fill="grey" d="M17.81 4.47c-.08 0-.16-.02-.23-.06C15.66 3.42 14 3 12.01 3c-1.98 0-3.86.47-5.57 1.41-.24.13-.54.04-.68-.2-.13-.24-.04-.55.2-.68C7.82 2.52 9.86 2 12.01 2c2.13 0 3.99.47 6.03 1.52.25.13.34.43.21.67-.09.18-.26.28-.44.28zM3.5 9.72c-.1 0-.2-.03-.29-.09-.23-.16-.28-.47-.12-.7.99-1.4 2.25-2.5 3.75-3.27C9.98 4.04 14 4.03 17.15 5.65c1.5.77 2.76 1.86 3.75 3.25.16.22.11.54-.12.7-.23.16-.54.11-.7-.12-.9-1.26-2.04-2.25-3.39-2.94-2.87-1.47-6.54-1.47-9.4.01-1.36.7-2.5 1.7-3.4 2.96-.08.14-.23.21-.39.21zm6.25 12.07c-.13 0-.26-.05-.35-.15-.87-.87-1.34-1.43-2.01-2.64-.69-1.23-1.05-2.73-1.05-4.34 0-2.97 2.54-5.39 5.66-5.39s5.66 2.42 5.66 5.39c0 .28-.22.5-.5.5s-.5-.22-.5-.5c0-2.42-2.09-4.39-4.66-4.39-2.57 0-4.66 1.97-4.66 4.39 0 1.44.32 2.77.93 3.85.64 1.15 1.08 1.64 1.85 2.42.19.2.19.51 0 .71-.11.1-.24.15-.37.15zm7.17-1.85c-1.19 0-2.24-.3-3.1-.89-1.49-1.01-2.38-2.65-2.38-4.39 0-.28.22-.5.5-.5s.5.22.5.5c0 1.41.72 2.74 1.94 3.56.71.48 1.54.71 2.54.71.24 0 .64-.03 1.04-.1.27-.05.53.13.58.41.05.27-.13.53-.41.58-.57.11-1.07.12-1.21.12zM14.91 22c-.04 0-.09-.01-.13-.02-1.59-.44-2.63-1.03-3.72-2.1-1.4-1.39-2.17-3.24-2.17-5.22 0-1.62 1.38-2.94 3.08-2.94 1.7 0 3.08 1.32 3.08 2.94 0 1.07.93 1.94 2.08 1.94s2.08-.87 2.08-1.94c0-3.77-3.25-6.83-7.25-6.83-2.84 0-5.44 1.58-6.61 4.03-.39.81-.59 1.76-.59 2.8 0 .78.07 2.01.67 3.61.1.26-.03.55-.29.64-.26.1-.55-.04-.64-.29-.49-1.31-.73-2.61-.73-3.96 0-1.2.23-2.29.68-3.24 1.33-2.79 4.28-4.6 7.51-4.6 4.55 0 8.25 3.51 8.25 7.83 0 1.62-1.38 2.94-3.08 2.94s-3.08-1.32-3.08-2.94c0-1.07-.93-1.94-2.08-1.94s-2.08.87-2.08 1.94c0 1.71.66 3.31 1.87 4.51.95.94 1.86 1.46 3.27 1.85.27.07.42.35.35.61-.05.23-.26.38-.47.38z"/>
    </svg>`;
    const encoded = encodeURIComponent(svg.trim());
    return `data:image/svg+xml,${encoded}`;
}

let description$j = 'Use the index of transform to get the location of a specific substring within an incoming value. This transform is often useful in conjunction with the substring transform for getting parts of strings that can be dynamic in length or composition. If the substring you are searching for does not occur within the data, the transform returns -1.';
function createIndexOf() {
    return {
        id: Uid.next(),
        componentType: 'switch',
        name: 'Index Of',
        type: 'indexOf',
        description: description$j,
        properties: {
            substring: '',
        },
        branches: {
            input: [],
        },
    };
}
const IndexOfModel = createStepModel('indexOf', 'switch', (step) => {
    step
        .property('substring')
        .value(createStringValueModel({
        minLength: 1,
    }))
        .hint('This string value indicates the substring to find the index of.')
        .label('Search Substring');
});
function serializeIndexOf(step) {
    const attributes = {
        substring: step.properties.substring,
    };
    if (step.branches.input.length > 0) {
        attributes.input = serializeStep(step.branches.input[0]);
    }
    return {
        name: step.name,
        type: step.type,
        attributes: attributes,
    };
}
function deserializeIndexOf(data) {
    const step = {
        id: Uid.next(),
        componentType: 'switch',
        name: data.name ?? 'Index Of',
        type: 'indexOf',
        description: description$j,
        properties: {
            substring: data.attributes.substring,
        },
        branches: {
            input: [],
        },
    };
    if (data.attributes.input) {
        step.branches.input.push(deserializeToStep(data.attributes.input));
    }
    return step;
}
function isIndexOfStep(step) {
    return step.type === 'indexOf';
}

let description$i = 'Use the ISO3166 transform to convert an incoming string into an ISO 3166 country code value. The incoming data must be either a recognized country name or country code';
function createISO3166() {
    return {
        id: Uid.next(),
        componentType: 'switch',
        name: 'ISO 3166',
        type: 'iso3166',
        description: description$i,
        properties: {
            format: 'alpha2',
        },
        branches: {
            input: [],
        },
    };
}
const ISO3166Model = createStepModel('iso3166', 'switch', (step) => {
    step
        .property('format')
        .value(createChoiceValueModel({
        choices: [
            "alpha2",
            "alpha3",
            "numeric",
        ],
    }))
        .hint('This string value indicates the format of the ISO 3166 code. Default is alpha2.')
        .label('Format');
});
function serializeISO3166(step) {
    // const match = step.properties.defaultRegion.match(/\(([^)]+)\)/);
    // const code = match ? match[1] : null;
    const attributes = {
        format: step.properties.format,
    };
    if (step.branches.input.length > 0) {
        attributes.input = serializeStep(step.branches.input[0]);
    }
    return {
        name: step.name,
        type: step.type,
        attributes: attributes,
    };
}
function deserializeISO3166(data) {
    const step = {
        id: Uid.next(),
        componentType: 'switch',
        name: data.name ?? 'ISO 3166',
        type: 'iso3166',
        description: description$i,
        properties: {
            format: data.attributes?.format ?? 'alpha2',
        },
        branches: {
            input: [],
        },
    };
    if (data.attributes?.input) {
        step.branches.input.push(deserializeToStep(data.attributes?.input));
    }
    return step;
}
function isISO3166Step(step) {
    return step.type === 'iso3166';
}
const iso3166Map = {
    "ALPHA2": "Two letter country code (US)",
    "ALPHA3": "Three letter country code (USA)",
    "NUMERIC": "Three digit country code (840)",
};

let description$h = 'Use the last index of transform to get the last location of a specific substring within an incoming value. This transform is often useful in conjunction with the substring transform for getting parts of strings that can be dynamic in length or composition. If the substring you are searching for does not occur within the data, the transform returns -1.';
function createLastIndexOf() {
    return {
        id: Uid.next(),
        componentType: 'switch',
        name: 'Last Index Of',
        type: 'lastIndexOf',
        description: description$h,
        properties: {
            substring: '',
        },
        branches: {
            input: [],
        },
    };
}
const LastIndexOfModel = createStepModel('lastIndexOf', 'switch', (step) => {
    step
        .property('substring')
        .value(createStringValueModel({
        minLength: 1,
    }))
        .hint('This string value indicates the substring to find the last index of.')
        .label('Search Substring');
});
function serializeLastIndexOf(step) {
    const attributes = {
        substring: step.properties.substring,
    };
    if (step.branches.input.length > 0) {
        attributes.input = serializeStep(step.branches.input[0]);
    }
    return {
        name: step.name,
        type: step.type,
        attributes: attributes,
    };
}
function deserializeLastIndexOf(data) {
    const step = {
        id: Uid.next(),
        componentType: 'switch',
        name: data.name ?? 'Last Index Of',
        type: 'lastIndexOf',
        description: description$h,
        properties: {
            substring: data.attributes.substring,
        },
        branches: {
            input: [],
        },
    };
    if (data.attributes.input) {
        step.branches.input.push(deserializeToStep(data.attributes.input));
    }
    return step;
}
function isLastIndexOfStep(step) {
    return step.type === 'lastIndexOf';
}

let description$g = 'Use the left pad transform to pad an incoming string with a user-supplied character out to a specific number of characters. This transform is often useful for data normalization situations in which data such as employee IDs are not uniform in length but need to be for downstream systems.';
function createLeftPad() {
    return {
        id: Uid.next(),
        componentType: 'switch',
        name: 'Left Pad',
        type: 'leftPad',
        description: description$g,
        properties: {
            padding: '',
            length: 0
        },
        branches: {
            input: [],
        },
    };
}
const LeftPadModel = createStepModel('leftPad', 'switch', (step) => {
    step
        .property('padding')
        .value(createStringValueModel({
        minLength: 1,
    }))
        .hint('This string value represents the character the transform will pad the incoming data to to get to the desired length.')
        .label('Padding Character');
    step
        .property('length')
        .value(createNumberValueModel({
        min: 1,
        max: 50000,
    }))
        .hint("This is an integer value for the final output string's desired length.")
        .label('Total Length');
});
function serializeLeftPad(step) {
    const attributes = {
        padding: step.properties.padding,
        length: step.properties.length
    };
    if (step.branches.input.length > 0) {
        attributes.input = serializeStep(step.branches.input[0]);
    }
    return {
        name: step.name,
        type: step.type,
        attributes: attributes,
    };
}
function deserializeLeftPad(data) {
    const step = {
        id: Uid.next(),
        componentType: 'switch',
        name: data.name ?? 'Left Pad',
        type: 'leftPad',
        description: description$g,
        properties: {
            padding: data.attributes.padding,
            length: data.attributes.length
        },
        branches: {
            input: [],
        },
    };
    if (data.attributes.input) {
        step.branches.input.push(deserializeToStep(data.attributes.input));
    }
    return step;
}
function isLeftPadStep(step) {
    return step.type === 'leftPad';
}
function getLeftPadIcon() {
    const svg = `<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24">
    <path d="M0 0h24v24H0z" fill="none"/>
    <path fill="gray" d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z"/>
    </svg>`;
    const encoded = encodeURIComponent(svg.trim());
    return `data:image/svg+xml,${encoded}`;
}

let description$f = 'Use the lookup transform to take in an incoming string value and compare it to a list of key-value pairs to determine which output to return. If the incoming data matches a key, the transform returns the corresponding value. If the incoming key does not match a key, the transform returns the table\'s optional default value.';
function createLookup() {
    return {
        id: Uid.next(),
        componentType: 'switch',
        name: 'Lookup',
        type: 'lookup',
        description: description$f,
        properties: {
            table: new Map([['default', 'defaultReturnValue']]),
        },
        branches: {
            input: [],
        },
    };
}
function serializeLookup(step) {
    const attributes = {
        table: Object.fromEntries(step.properties.table)
    };
    if (step.branches.input.length > 0) {
        attributes.input = serializeStep(step.branches.input[0]);
    }
    return {
        name: step.name,
        type: step.type,
        attributes: attributes,
    };
}
function deserializeLookup(data) {
    const rawTable = data.attributes.table;
    const table = new Map(rawTable && typeof rawTable === 'object'
        ? Object.entries(rawTable)
        : []);
    const step = {
        id: Uid.next(),
        componentType: 'switch',
        name: data.name ?? 'Lookup',
        type: 'lookup',
        description: description$f,
        properties: {
            table: table,
        },
        branches: {
            input: [],
        },
    };
    if (data.attributes.input) {
        step.branches.input.push(deserializeToStep(data.attributes.input));
    }
    console.log(step.properties.table);
    return step;
}
function isLookupStep(step) {
    return step.type === 'lookup';
}
function getLookupIcon() {
    const svg = `<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24">
    <path fill="none" d="M0 0h24v24H0z"/>
    <path fill="grey" d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
    </svg>`;
    const encoded = encodeURIComponent(svg.trim());
    return `data:image/svg+xml,${encoded}`;
}

let description$e = 'Use the lower transform to convert an input string into all lowercase letters.';
function createLower() {
    return {
        id: Uid.next(),
        componentType: 'switch',
        name: 'Lower',
        type: 'lower',
        description: description$e,
        properties: {},
        branches: {
            input: [],
        },
    };
}
function serializeLower(step) {
    const attributes = {};
    if (step.branches.input.length > 0) {
        attributes.input = serializeStep(step.branches.input[0]);
    }
    return {
        name: step.name,
        type: step.type,
        attributes: attributes,
    };
}
function deserializeLower(data) {
    const step = {
        id: Uid.next(),
        componentType: 'switch',
        name: data.name ?? 'Lower',
        type: 'lower',
        description: description$e,
        properties: {},
        branches: {
            input: [],
        },
    };
    if (data.attributes.input) {
        step.branches.input.push(deserializeToStep(data.attributes.input));
    }
    return step;
}
function isLowerStep(step) {
    return step.type === 'lower';
}
function getLowerIcon() {
    const svg = `<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24">
    <path d="M0 0h24v24H0V0z" fill="none"/>
    <path fill="gray" d="M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"/>
    </svg>`;
    const encoded = encodeURIComponent(svg.trim());
    return `data:image/svg+xml,${encoded}`;
}

let description$d = 'Use the name normalizer transform to clean or standardize the spelling of strings coming in from source systems. The most common use for this transform is for names and other proper nouns, but the transform is not necessarily limited to those data elements.';
function createNameNormalizer() {
    return {
        id: Uid.next(),
        componentType: 'switch',
        name: 'Name Normalizer',
        type: 'NameNormalizer',
        description: description$d,
        properties: {},
        branches: {
            input: [],
        },
    };
}
function serializeNameNormalizer(step) {
    const attributes = {};
    if (step.branches.input.length > 0) {
        attributes.input = serializeStep(step.branches.input[0]);
    }
    return {
        name: step.name,
        type: step.type,
        attributes: attributes,
    };
}
function deserializeNameNormalizer(data) {
    const step = {
        id: Uid.next(),
        componentType: 'switch',
        name: data.name ?? 'Name Normalizer',
        type: 'NameNormalizer',
        description: description$d,
        properties: {},
        branches: {
            input: [],
        },
    };
    if (data.attributes.input) {
        step.branches.input.push(deserializeToStep(data.attributes.input));
    }
    return step;
}
function isNameNormalizerStep(step) {
    return step.type === 'NameNormalizer';
}

let description$c = 'Use the random alphanumeric transform to generate a random string of any length, comprising both numbers and letters (both lowercase and uppercase).';
function createRandomAlphaNumeric() {
    return {
        id: Uid.next(),
        componentType: 'task',
        name: 'Random Alpha Numeric',
        type: 'randomAlphaNumeric',
        description: description$c,
        properties: {
            length: 32,
        },
    };
}
const RandomAlphaNumericModel = createStepModel('randomAlphaNumeric', 'task', step => {
    step.property('length').value(createNumberValueModel({
        defaultValue: 32,
        min: 1,
        max: 450
    }))
        .hint('The length of the random alphanumeric string to generate. The maximum length is 450 characters. If no length is specified, the default is 32 characters.')
        .label('String Length');
});
function serializeRandomAlphaNumeric(step) {
    return {
        name: step.name,
        type: step.type,
        attributes: {
            length: step.properties.length
        }
    };
}
function deserializeRandomAlphaNumeric(data) {
    return {
        id: Uid.next(),
        componentType: 'task',
        name: 'Random Alpha Numeric',
        type: 'randomAlphaNumeric',
        description: description$c,
        properties: {
            length: data.attributes.length,
        },
    };
}
function isRandomAlphaNumericStep(step) {
    return step.type === 'randomAlphaNumeric';
}
function getRandomAlphaNumericIcon() {
    const svg = `
    <svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24">
    <path d="M0 0h24v24H0z" fill="none"/>
    <path fill="gray" d="M10.59 9.17L5.41 4 4 5.41l5.17 5.17 1.42-1.41zM14.5 4l2.04 2.04L4 18.59 5.41 20 17.96 7.46 20 9.5V4h-5.5zm.33 9.41l-1.41 1.41 3.13 3.13L14.5 20H20v-5.5l-2.04 2.04-3.13-3.13z"/>
    </svg>`;
    const encoded = encodeURIComponent(svg.trim());
    return `data:image/svg+xml,${encoded}`;
}

let description$b = 'Use the random numeric transform to generate a random number of any length.';
function createRandomNumeric() {
    return {
        id: Uid.next(),
        componentType: 'task',
        name: 'Random Numeric',
        type: 'randomNumeric',
        description: description$b,
        properties: {
            length: 10,
        },
    };
}
const RandomNumericModel = createStepModel('randomNumeric', 'task', step => {
    step.property('length').value(createNumberValueModel({
        defaultValue: 10,
        min: 1,
        max: 450
    }))
        .hint('The length of the random numeric string to generate. The maximum length is 450 characters. If no length is specified, the default is 10 characters.')
        .label('String Length');
});
function serializeRandomNumeric(step) {
    return {
        name: step.name,
        type: step.type,
        attributes: {
            length: step.properties.length
        }
    };
}
function deserializeRandomNumeric(data) {
    return {
        id: Uid.next(),
        componentType: 'task',
        name: 'Random Numeric',
        type: 'randomNumeric',
        description: description$b,
        properties: {
            length: data.attributes.length,
        },
    };
}
function isRandomNumericStep(step) {
    return step.type === 'randomNumeric';
}
function getRandomNumericIcon() {
    const svg = `
    <svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24">
    <path d="M0 0h24v24H0z" fill="none"/>
    <path fill="gray" d="M10.59 9.17L5.41 4 4 5.41l5.17 5.17 1.42-1.41zM14.5 4l2.04 2.04L4 18.59 5.41 20 17.96 7.46 20 9.5V4h-5.5zm.33 9.41l-1.41 1.41 3.13 3.13L14.5 20H20v-5.5l-2.04 2.04-3.13-3.13z"/>
    </svg>`;
    const encoded = encodeURIComponent(svg.trim());
    return `data:image/svg+xml,${encoded}`;
}

let description$a = 'Use the reference transform to reuse a transform that has already been written within another transform. This transform is often useful when you want to repeat the same logic multiple times within other transforms. This transform allows you to maintain only one transform and have it propagate through to other implementations of that logic.';
function createReference() {
    return {
        id: Uid.next(),
        componentType: 'task',
        name: 'Reference',
        type: 'reference',
        description: description$a,
        properties: {
            id: '',
        },
    };
}
function createReferenceStepModel(transforms) {
    return createStepModel('reference', 'task', step => {
        step.property('id').value(createChoiceValueModel({
            choices: transforms,
        }))
            .hint('This specifies the name of the pre-existing transform you want to use within your current transform.')
            .label('Transform to Reference');
    });
}
async function getAvailableTransforms(sdk) {
    const response = await sdk.listTransforms();
    return response.data.map(transform => transform.name);
}
function serializeReference(step) {
    return {
        name: step.name,
        type: step.type,
        attributes: {
            id: step.properties.id
        }
    };
}
function deserializeReference(data) {
    return {
        id: Uid.next(),
        componentType: 'task',
        name: 'Reference',
        type: 'reference',
        description: description$a,
        properties: {
            id: data.attributes.id,
        },
    };
}
function isReferenceStep(step) {
    return step.type === 'reference';
}
function getReferenceIcon() {
    const svg = `
    <svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24">
    <path d="M0 0h24v24H0z" fill="none"/>
    <path fill="gray" d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z"/>
    </svg>`;
    const encoded = encodeURIComponent(svg.trim());
    return `data:image/svg+xml,${encoded}`;
}

let description$9 = 'Use the replace transform to find a given pattern of characters within incoming data and replace all instances of that pattern with alternate values. The transform recognizes standard regex syntax.';
function createReplace() {
    return {
        id: Uid.next(),
        componentType: 'switch',
        name: 'Replace',
        type: 'replace',
        description: description$9,
        properties: {
            regex: '',
            replacement: '',
        },
        branches: {
            input: [],
        },
    };
}
const ReplaceModel = createStepModel('replace', 'switch', (step) => {
    step
        .property('regex')
        .value(createStringValueModel({
        minLength: 1,
    }))
        .hint('This is the pattern you want to replace.')
        .label('Regex Pattern');
    step
        .property('replacement')
        .value(createStringValueModel({
        minLength: 1,
    }))
        .hint("This is the replacement string that replaces the pattern wherever it occurs.")
        .label('Replacement String');
});
function serializeReplace(step) {
    const attributes = {
        regex: step.properties.regex,
        replacement: step.properties.replacement,
    };
    if (step.branches.input.length > 0) {
        attributes.input = serializeStep(step.branches.input[0]);
    }
    return {
        name: step.name,
        type: step.type,
        attributes: attributes,
    };
}
function deserializeReplace(data) {
    const step = {
        id: Uid.next(),
        componentType: 'switch',
        name: data.name ?? 'Replace',
        type: 'replace',
        description: description$9,
        properties: {
            regex: data.attributes.regex,
            replacement: data.attributes.replacement,
        },
        branches: {
            input: [],
        },
    };
    if (data.attributes.input) {
        step.branches.input.push(deserializeToStep(data.attributes.input));
    }
    return step;
}
function isReplaceStep(step) {
    return step.type === 'replace';
}
function getReplaceIcon() {
    const svg = `<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24">
    <path d="M0 0h24v24H0z" fill="none"/>
    <path fill="gray" d="M11 6c1.38 0 2.63.56 3.54 1.46L12 10h6V4l-2.05 2.05C14.68 4.78 12.93 4 11 4c-3.53 0-6.43 2.61-6.92 6H6.1c.46-2.28 2.48-4 4.9-4zm5.64 9.14c.66-.9 1.12-1.97 1.28-3.14H15.9c-.46 2.28-2.48 4-4.9 4-1.38 0-2.63-.56-3.54-1.46L10 12H4v6l2.05-2.05C7.32 17.22 9.07 18 11 18c1.55 0 2.98-.51 4.14-1.36L20 21.49 21.49 20l-4.85-4.86z"/>
    </svg>`;
    const encoded = encodeURIComponent(svg.trim());
    return `data:image/svg+xml,${encoded}`;
}

let description$8 = 'The replace all transform works like the replace transform, except that it can perform multiple replace operations on the incoming data instead of just one pattern. Use the replace all transform to find multiple patterns of characters within incoming data and replace all instances of those patterns with alternate values. The transform recognizes standard regex syntax.';
function createReplaceAll() {
    return {
        id: Uid.next(),
        componentType: 'switch',
        name: 'ReplaceAll',
        type: 'replaceAll',
        properties: {
            table: new Map(),
        },
        branches: {
            input: [],
        },
    };
}
function serializeReplaceAll(step) {
    const attributes = {
        table: Object.fromEntries(step.properties.table)
    };
    if (step.branches.input.length > 0) {
        attributes.input = serializeStep(step.branches.input[0]);
    }
    return {
        name: step.name,
        type: step.type,
        attributes: attributes,
    };
}
function deserializeReplaceAll(data) {
    const rawTable = data.attributes.table;
    const table = new Map(rawTable && typeof rawTable === 'object'
        ? Object.entries(rawTable)
        : []);
    const step = {
        id: Uid.next(),
        componentType: 'switch',
        name: data.name ?? 'ReplaceAll',
        type: 'replaceAll',
        description: description$8,
        properties: {
            table: table,
        },
        branches: {
            input: [],
        },
    };
    if (data.attributes.input) {
        step.branches.input.push(deserializeToStep(data.attributes.input));
    }
    return step;
}
function isReplaceAllStep(step) {
    return step.type === 'replaceAll';
}
function getReplaceAllIcon() {
    const svg = `<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24">
    <path d="M0 0h24v24H0z" fill="none"/>
    <path fill="gray" d="M11 6c1.38 0 2.63.56 3.54 1.46L12 10h6V4l-2.05 2.05C14.68 4.78 12.93 4 11 4c-3.53 0-6.43 2.61-6.92 6H6.1c.46-2.28 2.48-4 4.9-4zm5.64 9.14c.66-.9 1.12-1.97 1.28-3.14H15.9c-.46 2.28-2.48 4-4.9 4-1.38 0-2.63-.56-3.54-1.46L10 12H4v6l2.05-2.05C7.32 17.22 9.07 18 11 18c1.55 0 2.98-.51 4.14-1.36L20 21.49 21.49 20l-4.85-4.86z"/>
    </svg>`;
    const encoded = encodeURIComponent(svg.trim());
    return `data:image/svg+xml,${encoded}`;
}

let description$7 = 'Use the RFC5646 transform to convert an incoming string into an RFC 5646 language tag value. The incoming data must be either a recognized language name or a three-letter abbreviation of locale\'s language.';
function createRFC5646() {
    return {
        id: Uid.next(),
        componentType: 'switch',
        name: 'RFC 5646',
        type: 'rfc5646',
        description: description$7,
        properties: {},
        branches: {
            input: [],
        },
    };
}
function serializeRFC5646(step) {
    const attributes = {};
    if (step.branches.input.length > 0) {
        attributes.input = serializeStep(step.branches.input[0]);
    }
    return {
        name: step.name,
        type: step.type,
        attributes: attributes,
    };
}
function deserializeRFC5646(data) {
    const step = {
        id: Uid.next(),
        componentType: 'switch',
        name: data.name ?? 'RFC5646',
        type: 'rfc5646',
        description: description$7,
        properties: {},
        branches: {
            input: [],
        },
    };
    if (data.attributes.input) {
        step.branches.input.push(deserializeToStep(data.attributes.input));
    }
    return step;
}
function isRFC5646Step(step) {
    return step.type === 'rfc5646';
}
function getRFC5646Icon() {
    const svg = `<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24">
    <path d="M0 0h24v24H0z" fill="none"/>
    <path fill="gray" d="M11 6c1.38 0 2.63.56 3.54 1.46L12 10h6V4l-2.05 2.05C14.68 4.78 12.93 4 11 4c-3.53 0-6.43 2.61-6.92 6H6.1c.46-2.28 2.48-4 4.9-4zm5.64 9.14c.66-.9 1.12-1.97 1.28-3.14H15.9c-.46 2.28-2.48 4-4.9 4-1.38 0-2.63-.56-3.54-1.46L10 12H4v6l2.05-2.05C7.32 17.22 9.07 18 11 18c1.55 0 2.98-.51 4.14-1.36L20 21.49 21.49 20l-4.85-4.86z"/>
    </svg>`;
    const encoded = encodeURIComponent(svg.trim());
    return `data:image/svg+xml,${encoded}`;
}

let description$6 = 'Use the right pad transform to pad an incoming string with a user-supplied character out to a specific number of characters.';
function createRightPad() {
    return {
        id: Uid.next(),
        componentType: 'switch',
        name: 'Right Pad',
        type: 'rightPad',
        description: description$6,
        properties: {
            padding: '',
            length: 0
        },
        branches: {
            input: [],
        },
    };
}
const RightPadModel = createStepModel('rightPad', 'switch', (step) => {
    step
        .property('padding')
        .value(createStringValueModel({
        minLength: 1,
    }))
        .hint('This string value represents the character the transform will pad the incoming data to to get to the desired length.')
        .label('Padding Character');
    step
        .property('length')
        .value(createNumberValueModel({
        min: 1,
        max: 450,
    }))
        .hint("This is an integer value for the final output string's desired length.")
        .label('Total Length');
});
function serializeRightPad(step) {
    const attributes = {
        padding: step.properties.padding,
        length: step.properties.length
    };
    if (step.branches.input.length > 0) {
        attributes.input = serializeStep(step.branches.input[0]);
    }
    return {
        name: step.name,
        type: step.type,
        attributes: attributes,
    };
}
function deserializeRightPad(data) {
    const step = {
        id: Uid.next(),
        componentType: 'switch',
        name: data.name ?? 'Right Pad',
        type: 'rightPad',
        description: description$6,
        properties: {
            padding: data.attributes.padding,
            length: data.attributes.length
        },
        branches: {
            input: [],
        },
    };
    if (data.attributes.input) {
        step.branches.input.push(deserializeToStep(data.attributes.input));
    }
    return step;
}
function isRightPadStep(step) {
    return step.type === 'rightPad';
}
function getRightPadIcon() {
    const svg = `<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24">
    <path d="M0 0h24v24H0z" fill="none"/>
    <path fill="gray" d="M16.01 11H4v2h12.01v3L20 12l-3.99-4z"/>
    </svg>`;
    const encoded = encodeURIComponent(svg.trim());
    return `data:image/svg+xml,${encoded}`;
}

let description$5 = 'The rule transform allows you to reuse logic that has already been written for a previous use case. However, you can use the rule transform to reuse code contained within a Transform rule that either is not possible through only transforms';
function createRule() {
    return {
        id: Uid.next(),
        componentType: 'task',
        name: 'Rule',
        type: 'rule',
        description: description$5,
        properties: {
            name: '',
        },
    };
}
function createRuleStepModel(rules) {
    return createStepModel('rule', 'task', step => {
        if (rules.length > 0) {
            step.property('name').value(createChoiceValueModel({
                choices: rules,
            }))
                .label('Name of the Rule to Reference');
        }
    });
}
async function getAvailableRules(sdk) {
    const request = {
        exportPayloadV2025: {
            description: 'Export rules',
            includeTypes: ['RULE'],
            objectOptions: {}
        }
    };
    const job = await sdk.exportSpConfig(request);
    if (job.status !== 202) {
        console.error('Error fetching rules:', job.data);
        return [];
    }
    while (true) {
        console.log('Waiting for job to complete...');
        const statusRequest = {
            id: job.data.jobId
        };
        const { data: response } = await sdk.getSpConfigExportStatus(statusRequest);
        if (response.status === 'NOT_STARTED' || response.status === 'IN_PROGRESS') {
            await new Promise(resolve => setTimeout(resolve, 3000));
        }
        else {
            switch (response.status) {
                case 'COMPLETE': {
                    const downloadRequest = {
                        id: job.data.jobId
                    };
                    const { data: exportData } = await sdk.getSpConfigExport(downloadRequest);
                    const rules = [];
                    for (const obj of exportData.objects ?? []) {
                        if (obj.object?.type === 'Transform') {
                            if (obj.self?.name) {
                                rules.push(obj.self.name);
                            }
                        }
                    }
                    return rules.filter((rule) => rule !== undefined);
                }
                default:
                    throw new Error(`Unhandled status: ${response.status}`);
            }
        }
    }
}
function serializeRule(step) {
    return {
        name: step.name,
        type: step.type,
        attributes: {
            name: step.properties.name
        }
    };
}
function deserializeRule(data) {
    return {
        id: Uid.next(),
        componentType: 'task',
        name: 'Rule',
        type: 'rule',
        description: description$5,
        properties: {
            name: data.attributes.name,
        },
    };
}
function isRuleStep(step) {
    return step.type === 'rule';
}
function getRuleIcon() {
    const svg = `
    <svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24">
    <path d="M0 0h24v24H0z" fill="none"/>
    <path fill="gray" d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z"/>
    </svg>`;
    const encoded = encodeURIComponent(svg.trim());
    return `data:image/svg+xml,${encoded}`;
}

let description$4 = 'Use the split transform to use a specific character or regex string as a delimiter and convert a single incoming string into an array of values. This transform then returns the Nth element of that array. This transform is often useful when you want to split combined names into their constituent parts or when you want to simplify an ordered list of values into a single attribute.';
function createSplit() {
    return {
        id: Uid.next(),
        componentType: 'switch',
        name: 'Split',
        type: 'split',
        description: description$4,
        properties: {
            delimiter: '',
            index: 0,
            throws: true,
        },
        branches: {
            input: [],
        },
    };
}
const SplitModel = createStepModel('split', 'switch', (step) => {
    step
        .property('delimiter')
        .value(createStringValueModel({
        minLength: 1,
    }))
        .hint('This can be either a single character or a regex expression. Transforms use it identify the break point between two substrings in the incoming data.')
        .label('Delimiter');
    step
        .property('index')
        .value(createNumberValueModel({
        min: 0,
        max: 2000,
    }))
        .hint('This is the integer value for the desired array element after the incoming data has been split into a list')
        .label('Index to return');
    step
        .property('throws')
        .value(createBooleanValueModel({ defaultValue: true }))
        .hint('This true or false value indicates whether to throw an error if the index is out of bounds. Default is true.')
        .label('Throw Error if Index Out of Bounds');
});
function serializeSplit(step) {
    const attributes = {
        delimiter: step.properties.delimiter,
        index: step.properties.index,
        throws: step.properties.throws
    };
    if (step.branches.input.length > 0) {
        attributes.input = serializeStep(step.branches.input[0]);
    }
    return {
        name: step.name,
        type: step.type,
        attributes: attributes,
    };
}
function deserializeSplit(data) {
    const step = {
        id: Uid.next(),
        componentType: 'switch',
        name: data.name ?? 'Split',
        type: 'split',
        description: description$4,
        properties: {
            delimiter: data.attributes.delimiter,
            index: data.attributes.index,
            throws: data.attributes.throws !== undefined ? data.attributes.throws : true
        },
        branches: {
            input: [],
        },
    };
    if (data.attributes.input) {
        step.branches.input.push(deserializeToStep(data.attributes.input));
    }
    return step;
}
function isSplitStep(step) {
    return step.type === 'split';
}
function getSplitIcon() {
    const svg = `<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24">
    <path d="M0 0h24v24H0z" fill="none"/>
    <path fill="gray" d="M14 4l2.29 2.29-2.88 2.88 1.42 1.42 2.88-2.88L20 10V4zm-4 0H4v6l2.29-2.29 4.71 4.7V20h2v-8.41l-5.29-5.3z"/>
    </svg>`;
    const encoded = encodeURIComponent(svg.trim());
    return `data:image/svg+xml,${encoded}`;
}

function createString() {
    return {
        id: Uid.next(),
        componentType: 'task',
        name: 'String',
        type: 'string',
        properties: {
            value: 'String value',
        },
    };
}
const StringModel = createStepModel('string', 'task', step => {
    step.property('value').value(createStringValueModel({
        defaultValue: 'String value',
        minLength: 1,
    }))
        .label('String Value');
});
function serializeStatic(step) {
    return step.properties.value;
}
function deserializeString(value) {
    return {
        id: Uid.next(),
        componentType: 'task',
        name: 'String',
        type: 'string',
        properties: {
            value: value,
        },
    };
}
function isStringStep(step) {
    return step.type === 'string';
}
function getStringIcon() {
    const svg = `
  <svg xmlns="http://www.w3.org/2000/svg" enable-background="new 0 0 24 24" height="24" viewBox="0 0 24 24" width="24" fill="gray"><g><rect fill="none" height="24" width="24"/></g><g><g><g>
  // <path d="M2.5,4v3h5v12h3V7h5V4H2.5z M21.5,9h-9v3h3v7h3v-7h3V9z"/></g></g></g>
  // </svg>`;
    const encoded = encodeURIComponent(svg.trim());
    return `data:image/svg+xml,${encoded}`;
}

let description$3 = 'Use the substring transform to get the inner portion of a string passed into the transform. You can use the substring transform to get the first n characters or get a set number of characters within the middle of a string.';
function createSubString() {
    return {
        id: Uid.next(),
        componentType: 'switch',
        name: 'Sub String',
        type: 'substring',
        description: description$3,
        properties: {
            begin: 0,
            beginOffset: 0,
            end: 1,
            endOffset: 1,
        },
        branches: {
            input: [],
        },
    };
}
const SubStringModel = createStepModel('substring', 'switch', (step) => {
    step
        .property('begin')
        .value(createNumberValueModel({
        min: -2000,
        max: 2000,
        defaultValue: 0,
    }))
        .hint('This is the integer value for the location within the input data that contains the first character of the substring you want to return.')
        .label('Begin');
    step
        .property('beginOffset')
        .value(createNumberValueModel({
        min: 0,
        max: 2000,
    }))
        .hint('This integer value is the number of characters to add to the begin attribute when the transform returns a substring. ')
        .label('Begin Offset');
    step
        .property('end')
        .value(createNumberValueModel({
        min: 0,
        max: 2000,
    }))
        .hint('This is the integer value for the location within the input data that no longer contains the substring you want to return.')
        .label('End');
    step
        .property('endOffset')
        .value(createNumberValueModel({
        min: 0,
        max: 2000,
    }))
        .hint('This integer value is the number of characters to add to the end attribute when the transform returns a substring.')
        .label('End Offset');
});
function serializeSubString(step) {
    const attributes = {
        begin: step.properties.begin,
    };
    if (step.properties.beginOffset !== -1) {
        attributes.beginOffset = step.properties.beginOffset;
    }
    if (step.properties.end !== -1) {
        attributes.end = step.properties.end;
    }
    if (step.properties.endOffset !== -1) {
        attributes.endOffset = step.properties.endOffset;
    }
    if (step.branches.input.length > 0) {
        attributes.input = serializeStep(step.branches.input[0]);
    }
    return {
        name: step.name,
        type: step.type,
        attributes: attributes,
    };
}
function deserializeSubString(data) {
    const step = {
        id: Uid.next(),
        componentType: 'switch',
        name: data.name ?? 'Sub String',
        type: 'substring',
        description: description$3,
        properties: {
            begin: data.attributes.delimiter,
            beginOffset: data.attributes.beginOffset ?? -1,
            end: data.attributes.end ?? -1,
            endOffset: data.attributes.endOffset ?? -1,
        },
        branches: {
            input: [],
        },
    };
    if (data.attributes.input) {
        step.branches.input.push(deserializeToStep(data.attributes.input));
    }
    return step;
}
function isSubStringStep(step) {
    return step.type === 'substring';
}
function getSubStringIcon() {
    const svg = `<svg xmlns="http://www.w3.org/2000/svg" enable-background="new 0 0 24 24" height="24" viewBox="0 0 24 24" width="24">
  <g><rect fill="none" height="24" width="24" x="0"/></g><g><g><g>
  // <path fill="gray" d="M4,9h16v2H4V9z M4,13h10v2H4V13z"/></g></g></g>
  // </svg>`;
    const encoded = encodeURIComponent(svg.trim());
    return `data:image/svg+xml,${encoded}`;
}

let description$2 = 'Use the trim transform to trim whitespaces from both the beginning and ending of input strings.';
function createTrim() {
    return {
        id: Uid.next(),
        componentType: 'switch',
        name: 'Trim',
        type: 'trim',
        description: description$2,
        properties: {},
        branches: {
            input: [],
        },
    };
}
function serializeTrim(step) {
    const attributes = {};
    if (step.branches.input.length > 0) {
        attributes.input = serializeStep(step.branches.input[0]);
    }
    return {
        name: step.name,
        type: step.type,
        attributes: attributes,
    };
}
function deserializeTrim(data) {
    const step = {
        id: Uid.next(),
        componentType: 'switch',
        name: data.name ?? 'Trim',
        type: 'trim',
        description: description$2,
        properties: {},
        branches: {
            input: [],
        },
    };
    if (data.attributes.input) {
        step.branches.input.push(deserializeToStep(data.attributes.input));
    }
    return step;
}
function isTrimStep(step) {
    return step.type === 'trim';
}
function getTrimIcon() {
    const svg = `<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24"><path d="M0 0h24v24H0z" fill="none"/>
    <circle cx="6" cy="18" fill="none" r="2"/>
    <circle cx="12" cy="12" fill="none" r=".5"/><circle cx="6" cy="6" fill="none" r="2"/>
    <path fill="gray" d="M9.64 7.64c.23-.5.36-1.05.36-1.64 0-2.21-1.79-4-4-4S2 3.79 2 6s1.79 4 4 4c.59 0 1.14-.13 1.64-.36L10 12l-2.36 2.36C7.14 14.13 6.59 14 6 14c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4c0-.59-.13-1.14-.36-1.64L12 14l7 7h3v-1L9.64 7.64zM6 8c-1.1 0-2-.89-2-2s.9-2 2-2 2 .89 2 2-.9 2-2 2zm0 12c-1.1 0-2-.89-2-2s.9-2 2-2 2 .89 2 2-.9 2-2 2zm6-7.5c-.28 0-.5-.22-.5-.5s.22-.5.5-.5.5.22.5.5-.22.5-.5.5zM19 3l-6 6 2 2 7-7V3z"/></svg>`;
    const encoded = encodeURIComponent(svg.trim());
    return `data:image/svg+xml,${encoded}`;
}

let description$1 = 'Use the upper transform to convert an input string into all uppercase letters.';
function createUpper() {
    return {
        id: Uid.next(),
        componentType: 'switch',
        name: 'Upper',
        type: 'upper',
        description: description$1,
        properties: {},
        branches: {
            input: [],
        },
    };
}
function serializeUpper(step) {
    const attributes = {};
    if (step.branches.input.length > 0) {
        attributes.input = serializeStep(step.branches.input[0]);
    }
    return {
        name: step.name,
        type: step.type,
        attributes: attributes,
    };
}
function deserializeUpper(data) {
    const step = {
        id: Uid.next(),
        componentType: 'switch',
        name: data.name ?? 'Upper',
        type: 'upper',
        description: description$1,
        properties: {},
        branches: {
            input: [],
        },
    };
    if (data.attributes.input) {
        step.branches.input.push(deserializeToStep(data.attributes.input));
    }
    return step;
}
function isUpperStep(step) {
    return step.type === 'upper';
}
function getUpperIcon() {
    const svg = `<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24">
    <path d="M0 0h24v24H0V0z" fill="none"/>
    <path fill="gray" d="M4 12l1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z"/></svg>`;
    const encoded = encodeURIComponent(svg.trim());
    return `data:image/svg+xml,${encoded}`;
}

let description = 'Use the UUID generator transform to create a universal unique ID (UUID) in the form of a 36-character string.';
function createUUID() {
    return {
        id: Uid.next(),
        componentType: 'task',
        name: 'UUID Generator',
        type: 'uuid',
        description: description,
        properties: {},
    };
}
function serializeUUID(step) {
    return {
        name: step.name,
        type: step.type,
        attributes: {}
    };
}
function deserializeUUID(data) {
    return {
        id: Uid.next(),
        componentType: 'task',
        name: 'UUID Generator',
        type: 'uuid',
        description: description,
        properties: {
            length: data.attributes.length,
        },
    };
}
function isUUIDStep(step) {
    return step.type === 'uuid';
}
function getUUIDIcon() {
    const svg = `
    <svg xmlns="http://www.w3.org/2000/svg" enable-background="new 0 0 24 24" height="24" viewBox="0 0 24 24" width="24">
    <g><path d="M0,0h24v24H0V0z" fill="none"/>
    <path fill="gray" d="M19.14,12.94c0.04-0.3,0.06-0.61,0.06-0.94c0-0.32-0.02-0.64-0.07-0.94l2.03-1.58c0.18-0.14,0.23-0.41,0.12-0.61 l-1.92-3.32c-0.12-0.22-0.37-0.29-0.59-0.22l-2.39,0.96c-0.5-0.38-1.03-0.7-1.62-0.94L14.4,2.81c-0.04-0.24-0.24-0.41-0.48-0.41 h-3.84c-0.24,0-0.43,0.17-0.47,0.41L9.25,5.35C8.66,5.59,8.12,5.92,7.63,6.29L5.24,5.33c-0.22-0.08-0.47,0-0.59,0.22L2.74,8.87 C2.62,9.08,2.66,9.34,2.86,9.48l2.03,1.58C4.84,11.36,4.8,11.69,4.8,12s0.02,0.64,0.07,0.94l-2.03,1.58 c-0.18,0.14-0.23,0.41-0.12,0.61l1.92,3.32c0.12,0.22,0.37,0.29,0.59,0.22l2.39-0.96c0.5,0.38,1.03,0.7,1.62,0.94l0.36,2.54 c0.05,0.24,0.24,0.41,0.48,0.41h3.84c0.24,0,0.44-0.17,0.47-0.41l0.36-2.54c0.59-0.24,1.13-0.56,1.62-0.94l2.39,0.96 c0.22,0.08,0.47,0,0.59-0.22l1.92-3.32c0.12-0.22,0.07-0.47-0.12-0.61L19.14,12.94z M12,15.6c-1.98,0-3.6-1.62-3.6-3.6 s1.62-3.6,3.6-3.6s3.6,1.62,3.6,3.6S13.98,15.6,12,15.6z"/></g>
    // </svg>`;
    const encoded = encodeURIComponent(svg.trim());
    return `data:image/svg+xml,${encoded}`;
}

class MapEditorDialogComponent {
    dialogRef;
    data;
    rows = [];
    constructor(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
        this.rows = Object.entries(data.map).map(([key, value]) => ({
            key: key,
            value: value
        }));
    }
    addRow() {
        this.rows = [...this.rows, { key: 'key', value: 'value' }];
    }
    removeRow(index) {
        this.rows = this.rows.filter((_, i) => i !== index);
    }
    save() {
        const updatedMap = {};
        const seenKeys = new Set();
        for (const row of this.rows) {
            const key = row.key.trim();
            if (!key)
                continue; // skip empty keys
            if (seenKeys.has(key)) {
                window.alert(`Duplicate key found: "${key}"`);
                return;
            }
            seenKeys.add(key);
            updatedMap[key] = row.value;
        }
        this.dialogRef.close(updatedMap);
    }
    cancel() {
        this.dialogRef.close();
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: MapEditorDialogComponent, deps: [{ token: i1.MatDialogRef }, { token: MAT_DIALOG_DATA }], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "20.1.3", type: MapEditorDialogComponent, isStandalone: true, selector: "app-map-editor-dialog", ngImport: i0, template: "<div style=\"padding: 5px;\">\r\n<h1 mat-dialog-title>Edit Table</h1>\r\n\r\n<div mat-dialog-content>\r\n  <table mat-table [dataSource]=\"rows\" class=\"mat-elevation-z8\" style=\"width: 100%;\">\r\n    <ng-container matColumnDef=\"key\">\r\n      <th mat-header-cell *matHeaderCellDef>Key</th>\r\n      <td mat-cell *matCellDef=\"let row; let i = index\">\r\n        <mat-form-field appearance=\"fill\" style=\"width: 100%;\">\r\n        <input matInput [(ngModel)]=\"rows[i].key\">\r\n        </mat-form-field>\r\n      </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"value\">\r\n      <th mat-header-cell *matHeaderCellDef>Value</th>\r\n      <td mat-cell *matCellDef=\"let row; let i = index\">\r\n        <mat-form-field appearance=\"fill\" style=\"width: 100%;\">\r\n        <input matInput [(ngModel)]=\"rows[i].value\">\r\n        </mat-form-field>\r\n      </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"actions\">\r\n      <th mat-header-cell *matHeaderCellDef>Actions</th>\r\n      <td mat-cell *matCellDef=\"let row; let i = index\">\r\n        <button mat-icon-button color=\"warn\" (click)=\"removeRow(i)\">\r\n          <mat-icon>delete</mat-icon>\r\n        </button>\r\n      </td>\r\n    </ng-container>\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"['key', 'value', 'actions']\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: ['key', 'value', 'actions']\"></tr>\r\n  </table>\r\n\r\n  <button mat-button (click)=\"addRow()\" style=\"margin-top: 1rem;\">Add Row</button>\r\n</div>\r\n\r\n<div mat-dialog-actions align=\"end\">\r\n  <button mat-button (click)=\"cancel()\">Cancel</button>\r\n  <button mat-flat-button color=\"primary\" (click)=\"save()\">Save</button>\r\n</div>\r\n</div>", dependencies: [{ kind: "ngmodule", type: MatTableModule }, { kind: "component", type: i6$3.MatTable, selector: "mat-table, table[mat-table]", exportAs: ["matTable"] }, { kind: "directive", type: i6$3.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { kind: "directive", type: i6$3.MatHeaderRowDef, selector: "[matHeaderRowDef]", inputs: ["matHeaderRowDef", "matHeaderRowDefSticky"] }, { kind: "directive", type: i6$3.MatColumnDef, selector: "[matColumnDef]", inputs: ["matColumnDef"] }, { kind: "directive", type: i6$3.MatCellDef, selector: "[matCellDef]" }, { kind: "directive", type: i6$3.MatRowDef, selector: "[matRowDef]", inputs: ["matRowDefColumns", "matRowDefWhen"] }, { kind: "directive", type: i6$3.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { kind: "directive", type: i6$3.MatCell, selector: "mat-cell, td[mat-cell]" }, { kind: "component", type: i6$3.MatHeaderRow, selector: "mat-header-row, tr[mat-header-row]", exportAs: ["matHeaderRow"] }, { kind: "component", type: i6$3.MatRow, selector: "mat-row, tr[mat-row]", exportAs: ["matRow"] }, { kind: "ngmodule", type: MatButtonModule }, { kind: "component", type: i5.MatButton, selector: "    button[matButton], a[matButton], button[mat-button], button[mat-raised-button],    button[mat-flat-button], button[mat-stroked-button], a[mat-button], a[mat-raised-button],    a[mat-flat-button], a[mat-stroked-button]  ", inputs: ["matButton"], exportAs: ["matButton", "matAnchor"] }, { kind: "component", type: i5.MatIconButton, selector: "button[mat-icon-button], a[mat-icon-button], button[matIconButton], a[matIconButton]", exportAs: ["matButton", "matAnchor"] }, { kind: "ngmodule", type: CommonModule }, { kind: "ngmodule", type: MatInputModule }, { kind: "directive", type: i8$1.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly", "disabledInteractive"], exportAs: ["matInput"] }, { kind: "component", type: i6$2.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i1$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1$1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "ngmodule", type: MatIconModule }, { kind: "component", type: i6.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }], preserveWhitespaces: true });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: MapEditorDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-map-editor-dialog', standalone: true, imports: [MatTableModule, MatButtonModule, CommonModule, MatInputModule, FormsModule, MatButtonModule, MatIconModule, MatInput], template: "<div style=\"padding: 5px;\">\r\n<h1 mat-dialog-title>Edit Table</h1>\r\n\r\n<div mat-dialog-content>\r\n  <table mat-table [dataSource]=\"rows\" class=\"mat-elevation-z8\" style=\"width: 100%;\">\r\n    <ng-container matColumnDef=\"key\">\r\n      <th mat-header-cell *matHeaderCellDef>Key</th>\r\n      <td mat-cell *matCellDef=\"let row; let i = index\">\r\n        <mat-form-field appearance=\"fill\" style=\"width: 100%;\">\r\n        <input matInput [(ngModel)]=\"rows[i].key\">\r\n        </mat-form-field>\r\n      </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"value\">\r\n      <th mat-header-cell *matHeaderCellDef>Value</th>\r\n      <td mat-cell *matCellDef=\"let row; let i = index\">\r\n        <mat-form-field appearance=\"fill\" style=\"width: 100%;\">\r\n        <input matInput [(ngModel)]=\"rows[i].value\">\r\n        </mat-form-field>\r\n      </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"actions\">\r\n      <th mat-header-cell *matHeaderCellDef>Actions</th>\r\n      <td mat-cell *matCellDef=\"let row; let i = index\">\r\n        <button mat-icon-button color=\"warn\" (click)=\"removeRow(i)\">\r\n          <mat-icon>delete</mat-icon>\r\n        </button>\r\n      </td>\r\n    </ng-container>\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"['key', 'value', 'actions']\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: ['key', 'value', 'actions']\"></tr>\r\n  </table>\r\n\r\n  <button mat-button (click)=\"addRow()\" style=\"margin-top: 1rem;\">Add Row</button>\r\n</div>\r\n\r\n<div mat-dialog-actions align=\"end\">\r\n  <button mat-button (click)=\"cancel()\">Cancel</button>\r\n  <button mat-flat-button color=\"primary\" (click)=\"save()\">Save</button>\r\n</div>\r\n</div>" }]
        }], ctorParameters: () => [{ type: i1.MatDialogRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }] });

class IdentityService {
    http;
    // BehaviorSubject to store the selected identities
    selectedIdentitiesSubject = new BehaviorSubject([]);
    selectedIdentities$ = this.selectedIdentitiesSubject.asObservable();
    constructor(http) {
        this.http = http;
        // Load selected identities from local storage if available
        this.loadSelectedIdentitiesFromStorage();
    }
    getIdentitiesByProfile(profileId, sdkService, searchQuery) {
        let queryString = `identityProfile.id:${profileId}`;
        if (searchQuery?.trim()) {
            const escaped = searchQuery.replace(/"/g, '\\"'); // escape quotes if necessary
            queryString += ` AND (name:*${escaped}*)`;
        }
        const request = {
            searchV2025: {
                indices: ['identities'],
                query: {
                    query: queryString
                },
                sort: ['name']
            },
            limit: 250
        };
        const searchPromise = sdkService.searchPost?.(request) ?? Promise.resolve([]);
        return from(searchPromise).pipe(catchError(err => {
            console.error('Search request failed:', err);
            return of([]);
        }), switchMap(response => {
            if ('data' in response) {
                return of(response.data);
            }
            else {
                return of([]);
            }
        }));
    }
    /**
     * Get a specific identity by ID
     */
    //   getIdentity(id: string): Observable<Identity> {
    //     // Use mock data in development environment
    //     console.log(`Using mock identity data for ID: ${id}`);
    //     // Search through all profiles for the identity
    //     for (const profileId in this.mockIdentities) {
    //       const identity = this.mockIdentities[profileId].find(i => i.id === id);
    //       if (identity) {
    //         return of(identity).pipe(
    //           delay(300) // Simulate network delay
    //         );
    //       }
    //     }
    //     return throwError(() => new Error('Identity not found'));
    //     // Commented out real API call code
    //     /*
    //     return this.http.get<Identity>(`${this.apiUrl}/${id}`).pipe(
    //       catchError(error => {
    //         console.error(`Error fetching identity with id ${id}:`, error);
    //         return throwError(() => new Error('Failed to fetch identity details. Please try again later.'));
    //       })
    //     );
    //     */
    //   }
    /**
     * Update the selected identities
     */
    updateSelectedIdentities(identities) {
        this.selectedIdentitiesSubject.next(identities);
        // Save to local storage for persistence
        localStorage.setItem('selectedIdentities', JSON.stringify(identities));
    }
    /**
     * Add an identity to the selection
     */
    addSelectedIdentity(identity) {
        const currentIdentities = this.selectedIdentitiesSubject.value;
        // Check if identity is already selected
        if (!currentIdentities.some(item => item.id === identity.id)) {
            const updatedIdentities = [...currentIdentities, identity];
            this.updateSelectedIdentities(updatedIdentities);
        }
    }
    /**
     * Remove an identity from the selection
     */
    removeSelectedIdentity(identityId) {
        const currentIdentities = this.selectedIdentitiesSubject.value;
        const updatedIdentities = currentIdentities.filter(item => item.id !== identityId);
        this.updateSelectedIdentities(updatedIdentities);
    }
    /**
     * Clear all selected identities
     */
    clearSelectedIdentities() {
        this.updateSelectedIdentities([]);
    }
    /**
     * Load selected identities from local storage
     */
    loadSelectedIdentitiesFromStorage() {
        const storedIdentities = localStorage.getItem('selectedIdentities');
        if (storedIdentities) {
            try {
                const identities = JSON.parse(storedIdentities);
                console.log('Loaded identities from local storage:', identities);
                this.selectedIdentitiesSubject.next(identities);
            }
            catch (e) {
                console.error('Error parsing stored identities:', e);
                localStorage.removeItem('selectedIdentities');
            }
        }
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: IdentityService, deps: [{ token: i1$3.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: IdentityService, providedIn: 'root' });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: IdentityService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [{ type: i1$3.HttpClient }] });

class IdentitySearchComponent {
    identityService;
    profileId = null;
    sdkService;
    identitiesSelected = new EventEmitter();
    searchControl = new FormControl('');
    identities = [];
    filteredIdentities = [];
    selectedIdentities = [];
    loading = false;
    error = '';
    destroy$ = new Subject();
    constructor(identityService) {
        this.identityService = identityService;
    }
    ngOnInit() {
        // Subscribe to identity selection changes
        this.identityService.selectedIdentities$
            .pipe(takeUntil$1(this.destroy$))
            .subscribe(identities => {
            console.log('Selected Identities Subscribe On init:', identities);
            this.selectedIdentities = identities;
        });
        // Setup search with debounce
        this.searchControl.valueChanges
            .pipe(takeUntil$1(this.destroy$), debounceTime(300), distinctUntilChanged(), switchMap$1(value => this.searchIdentities(value || '')))
            .subscribe();
        // Load identities when profile changes
        if (this.profileId) {
            this.loadIdentities();
        }
    }
    ngOnChanges(changes) {
        if (changes['profileId'] && !changes['profileId'].firstChange) {
            this.clearAll(); // Clear everything before loading new identities
            this.loadIdentities();
        }
    }
    clearAll() {
        this.searchControl.setValue('');
        this.identities = [];
        this.filteredIdentities = [];
        this.selectedIdentities = [];
        this.identityService.updateSelectedIdentities([]);
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * Load identities for the selected profile
     */
    loadIdentities() {
        if (!this.profileId) {
            this.identities = [];
            this.filteredIdentities = [];
            this.error = 'No profile selected';
            return;
        }
        this.loading = true;
        this.error = '';
        this.identityService.getIdentitiesByProfile(this.profileId, this.sdkService)
            .pipe(takeUntil$1(this.destroy$), catchError$1(err => {
            this.error = err.message || 'Failed to load identities';
            return of([]);
        }))
            .subscribe(identities => {
            this.identities = identities;
            this.filteredIdentities = identities;
            this.loading = false;
        });
    }
    /**
     * Search for identities by query
     */
    searchIdentities(query) {
        if (!this.profileId) {
            return of([]);
        }
        if (!query.trim()) {
            this.filteredIdentities = this.identities;
            return of(this.identities);
        }
        // If query is less than 3 characters, filter locally
        if (query.length < 3 && this.identities.length > 0) {
            this.filteredIdentities = this.identities.filter(identity => identity.name.toLowerCase().includes(query.toLowerCase()));
            return of(this.filteredIdentities);
        }
        // Otherwise, search via API
        this.loading = true;
        return this.identityService.getIdentitiesByProfile(this.profileId, this.sdkService, query)
            .pipe(takeUntil$1(this.destroy$), catchError$1(err => {
            this.error = err.message || 'Failed to search identities';
            this.loading = false;
            return of([]);
        }), switchMap$1(identities => {
            this.filteredIdentities = identities;
            this.loading = false;
            return of(identities);
        }));
    }
    /**
     * Handle selection change events
     */
    onSelectionChange(event) {
        const selectedIds = event.source.selectedOptions.selected.map(option => option.value);
        this.selectedIdentities = this.identities.filter(identity => selectedIds.includes(identity.id));
        this.identityService.updateSelectedIdentities(this.selectedIdentities);
        this.identitiesSelected.emit(this.selectedIdentities);
    }
    /**
     * Check if an identity is selected
     */
    isSelected(identity) {
        return this.selectedIdentities.some(item => item.id === identity.id);
    }
    /**
     * Get display value for identity
     */
    getIdentityDisplay(identity) {
        return `${identity.name} (ID: ${identity.id})`;
    }
    /**
     * Clear search and selections
     */
    clearSearch() {
        this.searchControl.setValue('');
        this.filteredIdentities = this.identities;
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: IdentitySearchComponent, deps: [{ token: IdentityService }], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "20.1.3", type: IdentitySearchComponent, isStandalone: true, selector: "app-identity-search", inputs: { profileId: "profileId", sdkService: "sdkService" }, outputs: { identitiesSelected: "identitiesSelected" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"identity-search-container\">\r\n    <mat-card>\r\n      <mat-card-header>\r\n        <mat-card-title>Search Identities</mat-card-title>\r\n      </mat-card-header>\r\n      \r\n      <mat-card-content>\r\n        <div class=\"search-field\">\r\n          <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n            <mat-label class=\"serach-identities-label\">Search Identities</mat-label>\r\n            <input \r\n              matInput \r\n              [formControl]=\"searchControl\" \r\n              placeholder=\"Enter identity name\"\r\n              [disabled]=\"!profileId\"\r\n            >\r\n            <button \r\n              *ngIf=\"searchControl.value\" \r\n              matSuffix \r\n              mat-icon-button \r\n              aria-label=\"Clear\" \r\n              (click)=\"clearSearch()\"\r\n            >\r\n              <mat-icon>close</mat-icon>\r\n            </button>\r\n            <mat-hint *ngIf=\"profileId\">Type to search identities</mat-hint>\r\n            <mat-hint *ngIf=\"!profileId\">Select a profile first</mat-hint>\r\n          </mat-form-field>\r\n        </div>\r\n        \r\n        <div *ngIf=\"loading\" class=\"loading-indicator\">\r\n          <mat-spinner diameter=\"30\"></mat-spinner>\r\n          <span>Loading identities...</span>\r\n        </div>\r\n        \r\n        <div *ngIf=\"error\" class=\"error-message\">\r\n          <mat-icon color=\"warn\">error</mat-icon>\r\n          <span>{{ error }}</span>\r\n        </div>\r\n        \r\n        <div *ngIf=\"!loading && filteredIdentities.length === 0 && !error\" class=\"no-results\">\r\n          <mat-icon>search_off</mat-icon>\r\n          <span>No identities found</span>\r\n        </div>\r\n        \r\n        <mat-selection-list \r\n          *ngIf=\"filteredIdentities.length > 0\" \r\n          [multiple]=\"true\"\r\n          (selectionChange)=\"onSelectionChange($event)\"\r\n        >\r\n          <mat-list-option \r\n            *ngFor=\"let identity of filteredIdentities\" \r\n            [value]=\"identity.id\"\r\n            [selected]=\"isSelected(identity)\"\r\n            checkboxPosition=\"before\"\r\n          >\r\n            <div class=\"identity-item\">\r\n              <span class=\"identity-name\">{{ identity.name }}</span>\r\n              <span class=\"identity-id\">{{ identity.email }}</span>\r\n            </div>\r\n          </mat-list-option>\r\n        </mat-selection-list>\r\n      </mat-card-content>\r\n      \r\n      <mat-card-actions align=\"end\">\r\n        <mat-chip-listbox>\r\n          <mat-chip highlighted color=\"primary\">\r\n            {{ selectedIdentities.length }} Selected\r\n          </mat-chip>\r\n        </mat-chip-listbox>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n  </div>\r\n  ", styles: [".dark-theme .identity-search-container{background-color:#1e1e1e!important;color:#fff!important}.dark-theme .identity-search-container .mat-mdc-card-title{color:#fff!important}.dark-theme .identity-search-container .search-field,.dark-theme .identity-search-container .mat-mdc-card-content,.dark-theme .identity-search-container .mat-mdc-form-field,.dark-theme .identity-search-container .mdc-text-field,.dark-theme .identity-search-container .mat-mdc-card-actions{background-color:#1e1e1e!important;color:#fff!important}.dark-theme .identity-search-container .identity-id{color:#fff!important}.identity-search-container{margin-bottom:20px}.identity-search-container .full-width{width:100%}.identity-search-container .search-field{margin-bottom:15px}.identity-search-container .loading-indicator{display:flex;align-items:center;gap:10px;margin:20px 0}.identity-search-container .loading-indicator span{color:#0009}.identity-search-container .error-message{display:flex;align-items:center;gap:10px;margin:20px 0;color:#f44336}.identity-search-container .no-results{display:flex;align-items:center;justify-content:center;gap:10px;margin:30px 0;color:#0009}.identity-search-container .no-results mat-icon{font-size:24px;height:24px;width:24px}.identity-search-container .identity-item{display:flex;flex-direction:column}.identity-search-container .identity-item .identity-name{font-weight:500}.identity-search-container .identity-item .identity-id{font-size:12px;color:#0009}.identity-search-container mat-selection-list{max-height:300px;overflow-y:auto}\n"], dependencies: [{ kind: "ngmodule", type: 
                // Material Modules
                FormsModule }, { kind: "directive", type: i1$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "ngmodule", type: MatButtonModule }, { kind: "component", type: i5.MatIconButton, selector: "button[mat-icon-button], a[mat-icon-button], button[matIconButton], a[matIconButton]", exportAs: ["matButton", "matAnchor"] }, { kind: "ngmodule", type: MatCardModule }, { kind: "component", type: i6$4.MatCard, selector: "mat-card", inputs: ["appearance"], exportAs: ["matCard"] }, { kind: "directive", type: i6$4.MatCardActions, selector: "mat-card-actions", inputs: ["align"], exportAs: ["matCardActions"] }, { kind: "directive", type: i6$4.MatCardContent, selector: "mat-card-content" }, { kind: "component", type: i6$4.MatCardHeader, selector: "mat-card-header" }, { kind: "directive", type: i6$4.MatCardTitle, selector: "mat-card-title, [mat-card-title], [matCardTitle]" }, { kind: "ngmodule", type: MatChipsModule }, { kind: "component", type: i9$1.MatChip, selector: "mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]", inputs: ["role", "id", "aria-label", "aria-description", "value", "color", "removable", "highlighted", "disableRipple", "disabled"], outputs: ["removed", "destroyed"], exportAs: ["matChip"] }, { kind: "component", type: i9$1.MatChipListbox, selector: "mat-chip-listbox", inputs: ["multiple", "aria-orientation", "selectable", "compareWith", "required", "hideSingleSelectionIndicator", "value"], outputs: ["change"] }, { kind: "ngmodule", type: MatExpansionModule }, { kind: "ngmodule", type: MatFormFieldModule }, { kind: "component", type: i6$2.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i6$2.MatLabel, selector: "mat-label" }, { kind: "directive", type: i6$2.MatHint, selector: "mat-hint", inputs: ["align", "id"] }, { kind: "directive", type: i6$2.MatSuffix, selector: "[matSuffix], [matIconSuffix], [matTextSuffix]", inputs: ["matTextSuffix"] }, { kind: "ngmodule", type: MatIconModule }, { kind: "component", type: i6.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "ngmodule", type: MatInputModule }, { kind: "directive", type: i8$1.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly", "disabledInteractive"], exportAs: ["matInput"] }, { kind: "ngmodule", type: MatListModule }, { kind: "component", type: i9$2.MatSelectionList, selector: "mat-selection-list", inputs: ["color", "compareWith", "multiple", "hideSingleSelectionIndicator", "disabled"], outputs: ["selectionChange"], exportAs: ["matSelectionList"] }, { kind: "component", type: i9$2.MatListOption, selector: "mat-list-option", inputs: ["togglePosition", "checkboxPosition", "color", "value", "selected"], outputs: ["selectedChange"], exportAs: ["matListOption"] }, { kind: "ngmodule", type: MatProgressBarModule }, { kind: "ngmodule", type: MatProgressSpinnerModule }, { kind: "component", type: i8.MatProgressSpinner, selector: "mat-progress-spinner, mat-spinner", inputs: ["color", "mode", "value", "diameter", "strokeWidth"], exportAs: ["matProgressSpinner"] }, { kind: "ngmodule", type: MatSelectModule }, { kind: "ngmodule", type: MatSnackBarModule }, { kind: "ngmodule", type: MatTableModule }, { kind: "ngmodule", type: MatToolbarModule }, { kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i1$1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }], encapsulation: i0.ViewEncapsulation.None, preserveWhitespaces: true });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: IdentitySearchComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-identity-search', imports: [
                        // Material Modules
                        FormsModule,
                        MatButtonModule,
                        MatCardModule,
                        MatChipsModule,
                        MatExpansionModule,
                        MatFormFieldModule,
                        MatIconModule,
                        MatInputModule,
                        MatListModule,
                        MatProgressBarModule,
                        MatProgressSpinnerModule,
                        MatSelectModule,
                        MatSnackBarModule,
                        MatTableModule,
                        MatToolbarModule,
                        CommonModule,
                        ReactiveFormsModule
                    ], standalone: true, encapsulation: ViewEncapsulation.None, template: "<div class=\"identity-search-container\">\r\n    <mat-card>\r\n      <mat-card-header>\r\n        <mat-card-title>Search Identities</mat-card-title>\r\n      </mat-card-header>\r\n      \r\n      <mat-card-content>\r\n        <div class=\"search-field\">\r\n          <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n            <mat-label class=\"serach-identities-label\">Search Identities</mat-label>\r\n            <input \r\n              matInput \r\n              [formControl]=\"searchControl\" \r\n              placeholder=\"Enter identity name\"\r\n              [disabled]=\"!profileId\"\r\n            >\r\n            <button \r\n              *ngIf=\"searchControl.value\" \r\n              matSuffix \r\n              mat-icon-button \r\n              aria-label=\"Clear\" \r\n              (click)=\"clearSearch()\"\r\n            >\r\n              <mat-icon>close</mat-icon>\r\n            </button>\r\n            <mat-hint *ngIf=\"profileId\">Type to search identities</mat-hint>\r\n            <mat-hint *ngIf=\"!profileId\">Select a profile first</mat-hint>\r\n          </mat-form-field>\r\n        </div>\r\n        \r\n        <div *ngIf=\"loading\" class=\"loading-indicator\">\r\n          <mat-spinner diameter=\"30\"></mat-spinner>\r\n          <span>Loading identities...</span>\r\n        </div>\r\n        \r\n        <div *ngIf=\"error\" class=\"error-message\">\r\n          <mat-icon color=\"warn\">error</mat-icon>\r\n          <span>{{ error }}</span>\r\n        </div>\r\n        \r\n        <div *ngIf=\"!loading && filteredIdentities.length === 0 && !error\" class=\"no-results\">\r\n          <mat-icon>search_off</mat-icon>\r\n          <span>No identities found</span>\r\n        </div>\r\n        \r\n        <mat-selection-list \r\n          *ngIf=\"filteredIdentities.length > 0\" \r\n          [multiple]=\"true\"\r\n          (selectionChange)=\"onSelectionChange($event)\"\r\n        >\r\n          <mat-list-option \r\n            *ngFor=\"let identity of filteredIdentities\" \r\n            [value]=\"identity.id\"\r\n            [selected]=\"isSelected(identity)\"\r\n            checkboxPosition=\"before\"\r\n          >\r\n            <div class=\"identity-item\">\r\n              <span class=\"identity-name\">{{ identity.name }}</span>\r\n              <span class=\"identity-id\">{{ identity.email }}</span>\r\n            </div>\r\n          </mat-list-option>\r\n        </mat-selection-list>\r\n      </mat-card-content>\r\n      \r\n      <mat-card-actions align=\"end\">\r\n        <mat-chip-listbox>\r\n          <mat-chip highlighted color=\"primary\">\r\n            {{ selectedIdentities.length }} Selected\r\n          </mat-chip>\r\n        </mat-chip-listbox>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n  </div>\r\n  ", styles: [".dark-theme .identity-search-container{background-color:#1e1e1e!important;color:#fff!important}.dark-theme .identity-search-container .mat-mdc-card-title{color:#fff!important}.dark-theme .identity-search-container .search-field,.dark-theme .identity-search-container .mat-mdc-card-content,.dark-theme .identity-search-container .mat-mdc-form-field,.dark-theme .identity-search-container .mdc-text-field,.dark-theme .identity-search-container .mat-mdc-card-actions{background-color:#1e1e1e!important;color:#fff!important}.dark-theme .identity-search-container .identity-id{color:#fff!important}.identity-search-container{margin-bottom:20px}.identity-search-container .full-width{width:100%}.identity-search-container .search-field{margin-bottom:15px}.identity-search-container .loading-indicator{display:flex;align-items:center;gap:10px;margin:20px 0}.identity-search-container .loading-indicator span{color:#0009}.identity-search-container .error-message{display:flex;align-items:center;gap:10px;margin:20px 0;color:#f44336}.identity-search-container .no-results{display:flex;align-items:center;justify-content:center;gap:10px;margin:30px 0;color:#0009}.identity-search-container .no-results mat-icon{font-size:24px;height:24px;width:24px}.identity-search-container .identity-item{display:flex;flex-direction:column}.identity-search-container .identity-item .identity-name{font-weight:500}.identity-search-container .identity-item .identity-id{font-size:12px;color:#0009}.identity-search-container mat-selection-list{max-height:300px;overflow-y:auto}\n"] }]
        }], ctorParameters: () => [{ type: IdentityService }], propDecorators: { profileId: [{
                type: Input
            }], sdkService: [{
                type: Input
            }], identitiesSelected: [{
                type: Output
            }] } });

class TransformResultsComponent {
    results = [];
    expandedPanels = {};
    displayedColumns = ['property', 'original', 'transformed'];
    constructor() { }
    ngOnInit() {
        this.initializeExpandedPanels();
    }
    ngOnChanges(changes) {
        if (changes['results'] && changes['results'].currentValue) {
            setTimeout(() => this.initializeExpandedPanels());
        }
    }
    /**
     * Initialize expanded state for each result panel
     */
    initializeExpandedPanels() {
        this.expandedPanels = {};
        this.results.forEach(result => {
            this.expandedPanels[result.identityName] = false;
        });
        if (this.results.length > 0) {
            setTimeout(() => {
                this.expandedPanels[this.results[0].identityName] = true;
            });
        }
    }
    /**
     * Toggle panel expansion state
     */
    togglePanel(identityName) {
        this.expandedPanels[identityName] = !this.expandedPanels[identityName];
    }
    /**
     * Format a value for display in the UI
     */
    formatValue(value) {
        if (value === undefined)
            return 'undefined';
        if (value === null)
            return 'null';
        if (typeof value === 'object') {
            return JSON.stringify(value, null, 2);
        }
        return String(value);
    }
    /**
     * Track expanded panels by identity ID
     */
    trackByIdentityId(index, result) {
        return result.identityName;
    }
    /**
     * Track table rows by property name
     */
    trackByProperty(index, item) {
        return item.property;
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: TransformResultsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "20.1.3", type: TransformResultsComponent, isStandalone: true, selector: "app-transform-results", inputs: { results: "results" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"results-container\">\r\n  <h2 class=\"section-title\">Transform Results</h2>\r\n\r\n  <div *ngIf=\"results.length === 0\" class=\"no-results\">\r\n    <mat-icon>info</mat-icon>\r\n    <span\r\n      >No transform results available. Run a transform to see results\r\n      here.</span\r\n    >\r\n  </div>\r\n\r\n  <div *ngIf=\"results.length > 0\" class=\"results-list\">\r\n    <mat-accordion>\r\n      <mat-expansion-panel\r\n        *ngFor=\"let result of results; trackBy: trackByIdentityId\"\r\n        [expanded]=\"expandedPanels[result.identityName]\"\r\n        (opened)=\"expandedPanels[result.identityName] = true\"\r\n        (closed)=\"expandedPanels[result.identityName] = false\"\r\n      >\r\n        <mat-expansion-panel-header>\r\n          <mat-panel-title>\r\n            <div class=\"panel-title\">\r\n              <span>{{ result.identityName }}</span>\r\n              <mat-chip\r\n                [color]=\"result.success ? 'primary' : 'warn'\"\r\n                [highlighted]=\"true\"\r\n              >\r\n                {{ result.success ? \"Success\" : \"Error\" }}\r\n              </mat-chip>\r\n            </div>\r\n          </mat-panel-title>\r\n          <mat-panel-description>\r\n            <span>Result: {{ result.result }}</span>\r\n          </mat-panel-description>\r\n        </mat-expansion-panel-header>\r\n\r\n        <div *ngIf=\"!result.success\" class=\"error-message\">\r\n          <mat-icon color=\"warn\">error</mat-icon>\r\n          <span style=\"margin-left: 1em\">{{ result.error }}</span>\r\n        </div>\r\n      </mat-expansion-panel>\r\n    </mat-accordion>\r\n  </div>\r\n</div>\r\n", styles: [".dark-theme .results-container{background-color:#1e1e1e!important;color:#fff!important}.dark-theme .results-container .mat-mdc-card-title,.dark-theme .results-container .section-title{color:#fff!important}.dark-theme .results-container .no-results{color:#fff;background-color:#1e1e1e}.dark-theme .results-container .no-results mat-icon{color:#9e9e9e}.dark-theme .results-container .error-message{color:#f44336}.dark-theme .results-container .error-message mat-icon{color:#f44336}.dark-theme .results-container .transform-data pre{background-color:#2c2c2c;color:#fff}.dark-theme .results-container .transform-data .changed-value pre{background-color:#2196f314;border-left:3px solid #2196f3}.results-container{margin:1em}.results-container .section-title{font-size:1.5rem;margin-bottom:1rem;color:#000000de}.results-container .no-results{display:flex;align-items:center;gap:10px;padding:2rem;background-color:#f5f5f5;border-radius:4px;color:#0009}.results-container .no-results mat-icon{color:#9e9e9e}.results-container .results-list mat-expansion-panel{margin-bottom:1rem}.results-container .results-list .panel-title{display:flex;align-items:center;gap:10px}.results-container .results-list .error-message{display:flex;align-items:flex-start;gap:10px;padding:1rem;margin:1rem 0;background-color:#f443361a;border-radius:4px;color:#f44336}.results-container .results-list .error-message mat-icon{flex-shrink:0;margin-top:2px}.results-container .results-list .error-message span{flex:1;word-break:break-word}.results-container .results-list .transform-data{margin-top:1rem;overflow-x:auto}.results-container .results-list .transform-data .data-table{width:100%}.results-container .results-list .transform-data .data-table .value-cell{max-width:300px;word-break:break-word}.results-container .results-list .transform-data .data-table .value-cell pre{margin:0;white-space:pre-wrap;font-family:monospace;font-size:.85rem;background-color:#f5f5f5;padding:.5rem;border-radius:4px;max-height:150px;overflow-y:auto}.results-container .results-list .transform-data .data-table .changed-value{background-color:#2196f31a}.results-container .results-list .transform-data .data-table .changed-value pre{background-color:#2196f314;border-left:3px solid #2196f3}\n"], dependencies: [{ kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: MatButtonModule }, { kind: "ngmodule", type: MatCardModule }, { kind: "ngmodule", type: MatChipsModule }, { kind: "component", type: i9$1.MatChip, selector: "mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]", inputs: ["role", "id", "aria-label", "aria-description", "value", "color", "removable", "highlighted", "disableRipple", "disabled"], outputs: ["removed", "destroyed"], exportAs: ["matChip"] }, { kind: "ngmodule", type: MatExpansionModule }, { kind: "directive", type: i3$1.MatAccordion, selector: "mat-accordion", inputs: ["hideToggle", "displayMode", "togglePosition"], exportAs: ["matAccordion"] }, { kind: "component", type: i3$1.MatExpansionPanel, selector: "mat-expansion-panel", inputs: ["hideToggle", "togglePosition"], outputs: ["afterExpand", "afterCollapse"], exportAs: ["matExpansionPanel"] }, { kind: "component", type: i3$1.MatExpansionPanelHeader, selector: "mat-expansion-panel-header", inputs: ["expandedHeight", "collapsedHeight", "tabIndex"] }, { kind: "directive", type: i3$1.MatExpansionPanelTitle, selector: "mat-panel-title" }, { kind: "directive", type: i3$1.MatExpansionPanelDescription, selector: "mat-panel-description" }, { kind: "ngmodule", type: MatFormFieldModule }, { kind: "ngmodule", type: MatIconModule }, { kind: "component", type: i6.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "ngmodule", type: MatInputModule }, { kind: "ngmodule", type: MatListModule }, { kind: "ngmodule", type: MatProgressBarModule }, { kind: "ngmodule", type: MatProgressSpinnerModule }, { kind: "ngmodule", type: MatSelectModule }, { kind: "ngmodule", type: MatSnackBarModule }, { kind: "ngmodule", type: MatTableModule }, { kind: "ngmodule", type: MatToolbarModule }], encapsulation: i0.ViewEncapsulation.None, preserveWhitespaces: true });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: TransformResultsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-transform-results', imports: [
                        CommonModule,
                        MatButtonModule,
                        MatCardModule,
                        MatChipsModule,
                        MatExpansionModule,
                        MatFormFieldModule,
                        MatIconModule,
                        MatInputModule,
                        MatListModule,
                        MatProgressBarModule,
                        MatProgressSpinnerModule,
                        MatSelectModule,
                        MatSnackBarModule,
                        MatTableModule,
                        MatToolbarModule
                    ], standalone: true, encapsulation: ViewEncapsulation.None, template: "<div class=\"results-container\">\r\n  <h2 class=\"section-title\">Transform Results</h2>\r\n\r\n  <div *ngIf=\"results.length === 0\" class=\"no-results\">\r\n    <mat-icon>info</mat-icon>\r\n    <span\r\n      >No transform results available. Run a transform to see results\r\n      here.</span\r\n    >\r\n  </div>\r\n\r\n  <div *ngIf=\"results.length > 0\" class=\"results-list\">\r\n    <mat-accordion>\r\n      <mat-expansion-panel\r\n        *ngFor=\"let result of results; trackBy: trackByIdentityId\"\r\n        [expanded]=\"expandedPanels[result.identityName]\"\r\n        (opened)=\"expandedPanels[result.identityName] = true\"\r\n        (closed)=\"expandedPanels[result.identityName] = false\"\r\n      >\r\n        <mat-expansion-panel-header>\r\n          <mat-panel-title>\r\n            <div class=\"panel-title\">\r\n              <span>{{ result.identityName }}</span>\r\n              <mat-chip\r\n                [color]=\"result.success ? 'primary' : 'warn'\"\r\n                [highlighted]=\"true\"\r\n              >\r\n                {{ result.success ? \"Success\" : \"Error\" }}\r\n              </mat-chip>\r\n            </div>\r\n          </mat-panel-title>\r\n          <mat-panel-description>\r\n            <span>Result: {{ result.result }}</span>\r\n          </mat-panel-description>\r\n        </mat-expansion-panel-header>\r\n\r\n        <div *ngIf=\"!result.success\" class=\"error-message\">\r\n          <mat-icon color=\"warn\">error</mat-icon>\r\n          <span style=\"margin-left: 1em\">{{ result.error }}</span>\r\n        </div>\r\n      </mat-expansion-panel>\r\n    </mat-accordion>\r\n  </div>\r\n</div>\r\n", styles: [".dark-theme .results-container{background-color:#1e1e1e!important;color:#fff!important}.dark-theme .results-container .mat-mdc-card-title,.dark-theme .results-container .section-title{color:#fff!important}.dark-theme .results-container .no-results{color:#fff;background-color:#1e1e1e}.dark-theme .results-container .no-results mat-icon{color:#9e9e9e}.dark-theme .results-container .error-message{color:#f44336}.dark-theme .results-container .error-message mat-icon{color:#f44336}.dark-theme .results-container .transform-data pre{background-color:#2c2c2c;color:#fff}.dark-theme .results-container .transform-data .changed-value pre{background-color:#2196f314;border-left:3px solid #2196f3}.results-container{margin:1em}.results-container .section-title{font-size:1.5rem;margin-bottom:1rem;color:#000000de}.results-container .no-results{display:flex;align-items:center;gap:10px;padding:2rem;background-color:#f5f5f5;border-radius:4px;color:#0009}.results-container .no-results mat-icon{color:#9e9e9e}.results-container .results-list mat-expansion-panel{margin-bottom:1rem}.results-container .results-list .panel-title{display:flex;align-items:center;gap:10px}.results-container .results-list .error-message{display:flex;align-items:flex-start;gap:10px;padding:1rem;margin:1rem 0;background-color:#f443361a;border-radius:4px;color:#f44336}.results-container .results-list .error-message mat-icon{flex-shrink:0;margin-top:2px}.results-container .results-list .error-message span{flex:1;word-break:break-word}.results-container .results-list .transform-data{margin-top:1rem;overflow-x:auto}.results-container .results-list .transform-data .data-table{width:100%}.results-container .results-list .transform-data .data-table .value-cell{max-width:300px;word-break:break-word}.results-container .results-list .transform-data .data-table .value-cell pre{margin:0;white-space:pre-wrap;font-family:monospace;font-size:.85rem;background-color:#f5f5f5;padding:.5rem;border-radius:4px;max-height:150px;overflow-y:auto}.results-container .results-list .transform-data .data-table .changed-value{background-color:#2196f31a}.results-container .results-list .transform-data .data-table .changed-value pre{background-color:#2196f314;border-left:3px solid #2196f3}\n"] }]
        }], ctorParameters: () => [], propDecorators: { results: [{
                type: Input
            }] } });

class TransformPreviewComponent {
    fb;
    dialogRef;
    identityService;
    data;
    snackBar;
    sdk;
    destroy$ = new Subject();
    transformForm;
    profiles = [];
    loadingProfiles = false;
    profileError = '';
    selectedIdentities = [];
    codeExpanded = false;
    transformName = '';
    transformCode = '';
    executingTransform = false;
    transformResults = [];
    constructor(fb, dialogRef, identityService, data, snackBar) {
        this.fb = fb;
        this.dialogRef = dialogRef;
        this.identityService = identityService;
        this.data = data;
        this.snackBar = snackBar;
        this.sdk = data.sdkService;
        this.transformCode = data.transformDefinition;
        this.transformForm = this.fb.group({
            profileId: [null, (control) => Validators.required(control)],
        });
        if (typeof data.transformDefinition === 'string') {
            const parsed = JSON.parse(data.transformDefinition);
            if (parsed &&
                typeof parsed === 'object' &&
                'name' in parsed) {
                this.transformName = parsed.name;
            }
            else {
                this.transformName = 'Transform';
            }
        }
        else {
            this.transformName = 'Transform';
        }
    }
    ngOnInit() {
        // Load profiles
        this.loadProfiles();
        this.identityService.selectedIdentities$
            .pipe(takeUntil(this.destroy$))
            .subscribe(identities => {
            this.selectedIdentities = identities;
        });
        // Check if there's saved profile selection
        const savedProfile = localStorage.getItem('selectedProfileId');
        if (savedProfile) {
            this.transformForm.patchValue({ profileId: savedProfile });
        }
    }
    _formBuilder = inject(FormBuilder);
    firstFormGroup = this._formBuilder.group({
        firstCtrl: [null, (control) => Validators.required(control)],
    });
    secondFormGroup = this._formBuilder.group({
        secondCtrl: [null, (control) => Validators.required(control)],
    });
    cancel() {
        this.dialogRef.close();
    }
    loadProfiles() {
        this.loadingProfiles = true;
        this.profileError = '';
        from(this.sdk.listIdentityProfiles())
            .pipe(takeUntil(this.destroy$), finalize(() => this.loadingProfiles = false))
            .subscribe({
            next: (response) => {
                if (response.status >= 400) {
                    this.profileError = 'Failed to load profiles';
                    this.snackBar.open('Error loading profiles', 'Dismiss', {
                        duration: 5000,
                        panelClass: 'error-snackbar'
                    });
                    return;
                }
                console.log('Profiles loaded:', response);
                this.profiles = response.data;
            },
            error: (error) => {
                this.profileError = error.message || 'Failed to load profiles';
                this.snackBar.open('Error loading profiles', 'Dismiss', {
                    duration: 5000,
                    panelClass: 'error-snackbar'
                });
            }
        });
    }
    /**
   * Handle profile selection change
   */
    onProfileChange(profileId) {
        if (profileId) {
            localStorage.setItem('selectedProfileId', profileId);
            // Clear selected identities when profile changes
            this.identityService.clearSelectedIdentities();
        }
        else {
            localStorage.removeItem('selectedProfileId');
        }
    }
    onIdentitiesSelected(identities) {
        this.selectedIdentities = identities;
    }
    /**
 * Toggle code editor visibility
 */
    toggleCodeEditor() {
        this.codeExpanded = !this.codeExpanded;
    }
    async executeTransform() {
        if (this.transformForm.invalid) {
            this.transformForm.markAllAsTouched();
            this.snackBar.open('Please fill all required fields', 'Dismiss', { duration: 3000 });
            return;
        }
        if (this.selectedIdentities.length === 0) {
            this.snackBar.open('Please select at least one identity', 'Dismiss', { duration: 3000 });
            return;
        }
        // Create transform to be used in the reference
        const transformDefinition = JSON.parse(this.transformCode);
        transformDefinition.name = transformDefinition.name + 'Preview';
        const createTransformRequest = {
            transformV2025: transformDefinition
        };
        const transformCreateResponse = await this.sdk.createTransform(createTransformRequest);
        if (transformCreateResponse.status >= 400) {
            this.snackBar.open('Error creating transform', 'Dismiss', { duration: 5000 });
            return;
        }
        this.executingTransform = true;
        this.transformResults = [];
        const previewPromises = this.selectedIdentities.map(async (identity) => {
            const request = {
                identityPreviewRequestV2025: {
                    identityId: identity.id,
                    identityAttributeConfig: {
                        enabled: true,
                        attributeTransforms: [
                            {
                                identityAttributeName: "email",
                                transformDefinition: {
                                    type: "reference",
                                    attributes: {
                                        id: transformDefinition.name
                                    }
                                }
                            }
                        ]
                    }
                }
            };
            const response = await this.sdk.generateIdentityPreview(request);
            if (response.status >= 400) {
                this.transformResults.push({
                    identityName: identity.name,
                    result: 'Error',
                    success: false,
                    error: response.statusText || 'An error occurred while generating the preview',
                });
            }
            else {
                const emailAttr = response.data.previewAttributes?.find(attr => attr.name === 'email');
                if (emailAttr?.errorMessages?.length) {
                    this.transformResults.push({
                        identityName: identity.name,
                        result: 'Error',
                        success: false,
                        error: emailAttr.errorMessages[0]?.text ?? 'Error message not available',
                    });
                }
                else {
                    this.transformResults.push({
                        identityName: identity.name,
                        result: emailAttr?.value || 'No result',
                        success: true,
                        error: null,
                    });
                }
            }
        });
        // Wait for all previews to complete
        await Promise.all(previewPromises);
        // Now it's safe to delete the transform
        const deleteTransformResponse = await this.sdk.deleteTransform({ id: transformCreateResponse.data.id });
        if (deleteTransformResponse.status >= 400) {
            this.snackBar.open('Error deleting transform', 'Dismiss', { duration: 5000 });
            return;
        }
        console.log('Transform results:', this.transformResults);
        this.executingTransform = false;
        // this.transformService.executeTransform(this.selectedIdentities, this.transformCode)
        //   .pipe(
        //     takeUntil(this.destroy$),
        //     finalize(() => this.executingTransform = false)
        //   )
        //   .subscribe({
        //     next: (results) => {
        //       this.snackBar.open(`Transform executed on ${results.length} identities`, 'Dismiss', { duration: 3000 });
        //     },
        //     error: (error) => {
        //       this.snackBar.open(error.message || 'Failed to execute transform', 'Dismiss', { 
        //         duration: 5000,
        //         panelClass: 'error-snackbar'
        //       });
        //     }
        //   });
    }
    resetForm() {
        this.transformForm.reset();
        this.identityService.clearSelectedIdentities();
        this.identityService.updateSelectedIdentities([]);
        this.transformResults = [];
        localStorage.removeItem('selectedProfileId');
    }
    onTransformCodeChange() {
        // handle transform code changes if needed
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: TransformPreviewComponent, deps: [{ token: i1$1.FormBuilder }, { token: i1.MatDialogRef }, { token: IdentityService }, { token: MAT_DIALOG_DATA }, { token: i4.MatSnackBar }], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "20.1.3", type: TransformPreviewComponent, isStandalone: true, selector: "app-preview-stepper", ngImport: i0, template: "<div class=\"transform-preview-container\">\r\n  <mat-card>\r\n    <mat-card-header>\r\n      <mat-card-title>Transform Preview</mat-card-title>\r\n      <mat-card-subtitle>Select a profile, identities, and test your transform</mat-card-subtitle>\r\n    </mat-card-header>\r\n    \r\n    <mat-card-content>\r\n      <form [formGroup]=\"transformForm\" (ngSubmit)=\"executeTransform()\">\r\n        <!-- Profile Selection -->\r\n        <div class=\"form-section\">\r\n          <h3 class=\"section-header\">1. Select Identity Profile</h3>\r\n          \r\n          <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n            <mat-label>Identity Profile</mat-label>\r\n            <mat-select formControlName=\"profileId\" (selectionChange)=\"onProfileChange($event.value)\">\r\n              <mat-option *ngIf=\"loadingProfiles\">Loading profiles...</mat-option>\r\n              <mat-option *ngIf=\"!loadingProfiles && profiles.length === 0 && !profileError\" [value]=\"null\">\r\n                No profiles available\r\n              </mat-option>\r\n              <mat-option *ngIf=\"profileError\" [value]=\"null\">\r\n                Error loading profiles\r\n              </mat-option>\r\n              <mat-option *ngFor=\"let profile of profiles\" [value]=\"profile.id\">\r\n                {{ profile.name }}\r\n              </mat-option>\r\n            </mat-select>\r\n            <mat-error *ngIf=\"transformForm.get('profileId')?.hasError('required')\">\r\n              Please select a profile\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n        \r\n        <!-- Identity Search -->\r\n        <div class=\"form-section\">\r\n          <h3 class=\"section-header\">2. Select Identities</h3>\r\n          <app-identity-search \r\n            [profileId]=\"transformForm.get('profileId')?.value\"\r\n            [sdkService]=\"sdk\"\r\n            (identitiesSelected)=\"onIdentitiesSelected($event)\">\r\n          </app-identity-search>\r\n          \r\n          <div class=\"selected-identities-summary\">\r\n            <div *ngIf=\"selectedIdentities.length === 0\" class=\"no-identities-message\">\r\n              <mat-icon>person_off</mat-icon>\r\n              <span>No identities selected</span>\r\n            </div>\r\n            \r\n            <mat-chip-listbox *ngIf=\"selectedIdentities.length > 0\">\r\n              <mat-chip *ngFor=\"let identity of selectedIdentities\" \r\n                       (removed)=\"identityService.removeSelectedIdentity(identity.id)\">\r\n                {{ identity.name }}\r\n                <button matChipRemove>\r\n                  <mat-icon>cancel</mat-icon>\r\n                </button>\r\n              </mat-chip>\r\n            </mat-chip-listbox>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Transform Code -->\r\n        <div class=\"form-section\">\r\n          <div class=\"code-header\" (click)=\"toggleCodeEditor()\">\r\n            <h3 class=\"section-header\">Transform ({{transformName}})</h3>\r\n            <button mat-icon-button type=\"button\">\r\n              <mat-icon>{{ codeExpanded ? 'expand_less' : 'expand_more' }}</mat-icon>\r\n            </button>\r\n          </div>\r\n          \r\n          <mat-form-field appearance=\"outline\" class=\"full-width\" *ngIf=\"codeExpanded\">\r\n            <mat-label>Transform Code</mat-label>\r\n            <textarea \r\n              matInput \r\n              rows=\"10\"\r\n              placeholder=\"Enter your transform code here\"\r\n              (blur)=\"onTransformCodeChange()\"\r\n            >{{transformCode}}</textarea>\r\n          </mat-form-field>\r\n        </div>\r\n        \r\n        <div class=\"form-actions\">\r\n          <button \r\n            type=\"submit\" \r\n            mat-raised-button \r\n            color=\"primary\" \r\n            [disabled]=\"transformForm.invalid || selectedIdentities.length === 0 || executingTransform\"\r\n          >\r\n            <mat-icon>play_arrow</mat-icon>\r\n            Execute Transform\r\n          </button>\r\n          \r\n          <button \r\n            type=\"button\" \r\n            mat-stroked-button \r\n            (click)=\"resetForm()\"\r\n          >\r\n            <mat-icon>refresh</mat-icon>\r\n            Reset\r\n          </button>\r\n        </div>\r\n      </form>\r\n      \r\n      <!-- Progress Indicator\r\n      <div *ngIf=\"executingTransform\" class=\"executing-transform\">\r\n        <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\r\n        <span>Executing transform...</span>\r\n      </div> -->\r\n    </mat-card-content>\r\n  </mat-card>\r\n  \r\n  <!-- Results Section -->\r\n  <div class=\"results-section\">\r\n    <app-transform-results [results]=\"transformResults\"></app-transform-results>\r\n  </div>\r\n</div>\r\n", styles: [".dark-theme .transform-preview-container .section-header{color:#fff!important}.dark-theme .transform-preview-container .mat-mdc-card-title,.dark-theme .transform-preview-container .mat-mdc-card-subtitle,.dark-theme .transform-preview-container .mat-mdc-card-header{background-color:#1e1e1e;color:#fff!important}.dark-theme .transform-preview-container{background-color:#1e1e1e!important;color:#fff!important}.dark-theme .transform-preview-container .mat-mdc-dialog-component-host,.dark-theme .transform-preview-container .mat-mdc-card,.dark-theme .transform-preview-container .mdc-card{background-color:#1e1e1e!important}.dark-theme .transform-preview-container .mat-mdc-card-title,.dark-theme .transform-preview-container .mat-mdc-card-subtitle,.dark-theme .transform-preview-container .mat-mdc-card-header{color:#fff!important}.dark-theme .transform-preview-container .mdc-text-field--focused{border:1px solid #0071ce!important}.dark-theme .transform-preview-container .selected-identities-summary{background-color:#1e1e1e!important;color:#fff!important}.transform-preview-container{background-color:#fff!important;padding:20px 0}.transform-preview-container .dark-theme .mat-mdc-dialog-component-host,.transform-preview-container .dark-theme .mat-mdc-card,.transform-preview-container .dark-theme .mdc-card{background-color:#1e1e1e!important}.transform-preview-container .mat-mdc-dialog-component-host,.transform-preview-container .mat-mdc-card,.transform-preview-container .mdc-card{background-color:#fff!important}.transform-preview-container .full-width{width:100%}.transform-preview-container .form-section{margin-bottom:30px}.transform-preview-container .form-section h3{font-size:1.2rem;font-weight:500;color:#415364!important;margin-bottom:15px;padding-bottom:5px;border-bottom:1px solid rgba(0,0,0,.12)}.transform-preview-container .form-section .metadata-fields{display:flex;flex-wrap:wrap;gap:16px}.transform-preview-container .form-section .metadata-fields mat-form-field{flex:1 1 200px}.transform-preview-container .form-section .code-header{display:flex;justify-content:space-between;align-items:center;cursor:pointer;padding:5px;border-radius:4px}.transform-preview-container .form-section .code-header:hover{background-color:#0000000a}.transform-preview-container .form-section .code-header h3{margin-bottom:0;padding-bottom:0;border-bottom:none}.transform-preview-container .selected-identities-summary{margin-top:15px;padding:10px;background-color:#f5f5f5;border-radius:4px;min-height:50px}.transform-preview-container .selected-identities-summary .no-identities-message{display:flex;align-items:center;justify-content:center;gap:10px;color:#415364!important;height:40px}.transform-preview-container .selected-identities-summary mat-chip-listbox{display:flex;flex-wrap:wrap;gap:8px}.transform-preview-container .form-actions{display:flex;gap:15px;margin-top:20px;margin-bottom:20px}.transform-preview-container .form-actions button{display:flex;align-items:center;gap:8px}.transform-preview-container .executing-transform{margin-top:20px;margin-bottom:20px}.transform-preview-container .executing-transform span{display:block;margin-top:8px;color:#415364!important;text-align:center}.transform-preview-container .results-section{margin-top:30px}.transform-preview-container .mat-mdc-card-title{color:#0033a1!important}.transform-preview-container .mdc-text-field--focused{border:1px solid #0071ce!important}.transform-preview-container .identity-search-container{background-color:#fff!important;padding:20px 0}.transform-preview-container .identity-search-container mat-card{background-color:#fff!important}.transform-preview-container .identity-search-container .mat-mdc-dialog-component-host,.transform-preview-container .identity-search-container .mat-mdc-card,.transform-preview-container .identity-search-container .mdc-card{background-color:#fff!important}.transform-preview-container .identity-search-container .mat-mdc-card-title,.transform-preview-container .identity-search-container .mat-mdc-card-subtitle,.transform-preview-container .identity-search-container .mat-mdc-card-header{color:#415364!important}.transform-preview-container .identity-search-container .mdc-text-field{background-color:#fff!important;border-radius:.5rem!important;border:1px solid #415364!important;text-decoration:none!important;font-family:Poppins!important;color:#415364!important}.transform-preview-container .identity-search-container .mdc-text-field--focused{border:1px solid #0071ce!important}\n"], dependencies: [{ kind: "ngmodule", type: MatButtonModule }, { kind: "component", type: i5.MatButton, selector: "    button[matButton], a[matButton], button[mat-button], button[mat-raised-button],    button[mat-flat-button], button[mat-stroked-button], a[mat-button], a[mat-raised-button],    a[mat-flat-button], a[mat-stroked-button]  ", inputs: ["matButton"], exportAs: ["matButton", "matAnchor"] }, { kind: "component", type: i5.MatIconButton, selector: "button[mat-icon-button], a[mat-icon-button], button[matIconButton], a[matIconButton]", exportAs: ["matButton", "matAnchor"] }, { kind: "ngmodule", type: MatStepperModule }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i1$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i1$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "ngmodule", type: ReactiveFormsModule }, { kind: "directive", type: i1$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i1$1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "ngmodule", type: MatFormFieldModule }, { kind: "component", type: i6$2.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i6$2.MatLabel, selector: "mat-label" }, { kind: "directive", type: i6$2.MatError, selector: "mat-error, [matError]", inputs: ["id"] }, { kind: "ngmodule", type: MatInputModule }, { kind: "directive", type: i8$1.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly", "disabledInteractive"], exportAs: ["matInput"] }, { kind: "ngmodule", type: MatCardModule }, { kind: "component", type: i6$4.MatCard, selector: "mat-card", inputs: ["appearance"], exportAs: ["matCard"] }, { kind: "directive", type: i6$4.MatCardContent, selector: "mat-card-content" }, { kind: "component", type: i6$4.MatCardHeader, selector: "mat-card-header" }, { kind: "directive", type: i6$4.MatCardSubtitle, selector: "mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]" }, { kind: "directive", type: i6$4.MatCardTitle, selector: "mat-card-title, [mat-card-title], [matCardTitle]" }, { kind: "ngmodule", type: MatChipsModule }, { kind: "component", type: i9$1.MatChip, selector: "mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]", inputs: ["role", "id", "aria-label", "aria-description", "value", "color", "removable", "highlighted", "disableRipple", "disabled"], outputs: ["removed", "destroyed"], exportAs: ["matChip"] }, { kind: "component", type: i9$1.MatChipListbox, selector: "mat-chip-listbox", inputs: ["multiple", "aria-orientation", "selectable", "compareWith", "required", "hideSingleSelectionIndicator", "value"], outputs: ["change"] }, { kind: "directive", type: i9$1.MatChipRemove, selector: "[matChipRemove]" }, { kind: "ngmodule", type: MatExpansionModule }, { kind: "ngmodule", type: MatIconModule }, { kind: "component", type: i6.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "ngmodule", type: MatListModule }, { kind: "ngmodule", type: MatProgressBarModule }, { kind: "ngmodule", type: MatProgressSpinnerModule }, { kind: "ngmodule", type: MatSelectModule }, { kind: "component", type: i11.MatSelect, selector: "mat-select", inputs: ["aria-describedby", "panelClass", "disabled", "disableRipple", "tabIndex", "hideSingleSelectionIndicator", "placeholder", "required", "multiple", "disableOptionCentering", "compareWith", "value", "aria-label", "aria-labelledby", "errorStateMatcher", "typeaheadDebounceInterval", "sortComparator", "id", "panelWidth", "canSelectNullableOptions"], outputs: ["openedChange", "opened", "closed", "selectionChange", "valueChange"], exportAs: ["matSelect"] }, { kind: "component", type: i11.MatOption, selector: "mat-option", inputs: ["value", "id", "disabled"], outputs: ["onSelectionChange"], exportAs: ["matOption"] }, { kind: "ngmodule", type: MatSnackBarModule }, { kind: "ngmodule", type: MatTableModule }, { kind: "ngmodule", type: MatToolbarModule }, { kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: IdentitySearchComponent, selector: "app-identity-search", inputs: ["profileId", "sdkService"], outputs: ["identitiesSelected"] }, { kind: "component", type: TransformResultsComponent, selector: "app-transform-results", inputs: ["results"] }], encapsulation: i0.ViewEncapsulation.None, preserveWhitespaces: true });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: TransformPreviewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-preview-stepper', standalone: true, imports: [MatButtonModule,
                        MatStepperModule,
                        FormsModule,
                        ReactiveFormsModule,
                        MatFormFieldModule,
                        MatInputModule,
                        MatButtonModule,
                        MatCardModule,
                        MatChipsModule,
                        MatExpansionModule,
                        MatFormFieldModule,
                        MatIconModule,
                        MatInputModule,
                        MatListModule,
                        MatProgressBarModule,
                        MatProgressSpinnerModule,
                        MatSelectModule,
                        MatSnackBarModule,
                        MatTableModule,
                        MatToolbarModule,
                        CommonModule,
                        IdentitySearchComponent,
                        TransformResultsComponent
                    ], encapsulation: ViewEncapsulation.None, template: "<div class=\"transform-preview-container\">\r\n  <mat-card>\r\n    <mat-card-header>\r\n      <mat-card-title>Transform Preview</mat-card-title>\r\n      <mat-card-subtitle>Select a profile, identities, and test your transform</mat-card-subtitle>\r\n    </mat-card-header>\r\n    \r\n    <mat-card-content>\r\n      <form [formGroup]=\"transformForm\" (ngSubmit)=\"executeTransform()\">\r\n        <!-- Profile Selection -->\r\n        <div class=\"form-section\">\r\n          <h3 class=\"section-header\">1. Select Identity Profile</h3>\r\n          \r\n          <mat-form-field appearance=\"outline\" class=\"full-width\">\r\n            <mat-label>Identity Profile</mat-label>\r\n            <mat-select formControlName=\"profileId\" (selectionChange)=\"onProfileChange($event.value)\">\r\n              <mat-option *ngIf=\"loadingProfiles\">Loading profiles...</mat-option>\r\n              <mat-option *ngIf=\"!loadingProfiles && profiles.length === 0 && !profileError\" [value]=\"null\">\r\n                No profiles available\r\n              </mat-option>\r\n              <mat-option *ngIf=\"profileError\" [value]=\"null\">\r\n                Error loading profiles\r\n              </mat-option>\r\n              <mat-option *ngFor=\"let profile of profiles\" [value]=\"profile.id\">\r\n                {{ profile.name }}\r\n              </mat-option>\r\n            </mat-select>\r\n            <mat-error *ngIf=\"transformForm.get('profileId')?.hasError('required')\">\r\n              Please select a profile\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n        \r\n        <!-- Identity Search -->\r\n        <div class=\"form-section\">\r\n          <h3 class=\"section-header\">2. Select Identities</h3>\r\n          <app-identity-search \r\n            [profileId]=\"transformForm.get('profileId')?.value\"\r\n            [sdkService]=\"sdk\"\r\n            (identitiesSelected)=\"onIdentitiesSelected($event)\">\r\n          </app-identity-search>\r\n          \r\n          <div class=\"selected-identities-summary\">\r\n            <div *ngIf=\"selectedIdentities.length === 0\" class=\"no-identities-message\">\r\n              <mat-icon>person_off</mat-icon>\r\n              <span>No identities selected</span>\r\n            </div>\r\n            \r\n            <mat-chip-listbox *ngIf=\"selectedIdentities.length > 0\">\r\n              <mat-chip *ngFor=\"let identity of selectedIdentities\" \r\n                       (removed)=\"identityService.removeSelectedIdentity(identity.id)\">\r\n                {{ identity.name }}\r\n                <button matChipRemove>\r\n                  <mat-icon>cancel</mat-icon>\r\n                </button>\r\n              </mat-chip>\r\n            </mat-chip-listbox>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- Transform Code -->\r\n        <div class=\"form-section\">\r\n          <div class=\"code-header\" (click)=\"toggleCodeEditor()\">\r\n            <h3 class=\"section-header\">Transform ({{transformName}})</h3>\r\n            <button mat-icon-button type=\"button\">\r\n              <mat-icon>{{ codeExpanded ? 'expand_less' : 'expand_more' }}</mat-icon>\r\n            </button>\r\n          </div>\r\n          \r\n          <mat-form-field appearance=\"outline\" class=\"full-width\" *ngIf=\"codeExpanded\">\r\n            <mat-label>Transform Code</mat-label>\r\n            <textarea \r\n              matInput \r\n              rows=\"10\"\r\n              placeholder=\"Enter your transform code here\"\r\n              (blur)=\"onTransformCodeChange()\"\r\n            >{{transformCode}}</textarea>\r\n          </mat-form-field>\r\n        </div>\r\n        \r\n        <div class=\"form-actions\">\r\n          <button \r\n            type=\"submit\" \r\n            mat-raised-button \r\n            color=\"primary\" \r\n            [disabled]=\"transformForm.invalid || selectedIdentities.length === 0 || executingTransform\"\r\n          >\r\n            <mat-icon>play_arrow</mat-icon>\r\n            Execute Transform\r\n          </button>\r\n          \r\n          <button \r\n            type=\"button\" \r\n            mat-stroked-button \r\n            (click)=\"resetForm()\"\r\n          >\r\n            <mat-icon>refresh</mat-icon>\r\n            Reset\r\n          </button>\r\n        </div>\r\n      </form>\r\n      \r\n      <!-- Progress Indicator\r\n      <div *ngIf=\"executingTransform\" class=\"executing-transform\">\r\n        <mat-progress-bar mode=\"indeterminate\"></mat-progress-bar>\r\n        <span>Executing transform...</span>\r\n      </div> -->\r\n    </mat-card-content>\r\n  </mat-card>\r\n  \r\n  <!-- Results Section -->\r\n  <div class=\"results-section\">\r\n    <app-transform-results [results]=\"transformResults\"></app-transform-results>\r\n  </div>\r\n</div>\r\n", styles: [".dark-theme .transform-preview-container .section-header{color:#fff!important}.dark-theme .transform-preview-container .mat-mdc-card-title,.dark-theme .transform-preview-container .mat-mdc-card-subtitle,.dark-theme .transform-preview-container .mat-mdc-card-header{background-color:#1e1e1e;color:#fff!important}.dark-theme .transform-preview-container{background-color:#1e1e1e!important;color:#fff!important}.dark-theme .transform-preview-container .mat-mdc-dialog-component-host,.dark-theme .transform-preview-container .mat-mdc-card,.dark-theme .transform-preview-container .mdc-card{background-color:#1e1e1e!important}.dark-theme .transform-preview-container .mat-mdc-card-title,.dark-theme .transform-preview-container .mat-mdc-card-subtitle,.dark-theme .transform-preview-container .mat-mdc-card-header{color:#fff!important}.dark-theme .transform-preview-container .mdc-text-field--focused{border:1px solid #0071ce!important}.dark-theme .transform-preview-container .selected-identities-summary{background-color:#1e1e1e!important;color:#fff!important}.transform-preview-container{background-color:#fff!important;padding:20px 0}.transform-preview-container .dark-theme .mat-mdc-dialog-component-host,.transform-preview-container .dark-theme .mat-mdc-card,.transform-preview-container .dark-theme .mdc-card{background-color:#1e1e1e!important}.transform-preview-container .mat-mdc-dialog-component-host,.transform-preview-container .mat-mdc-card,.transform-preview-container .mdc-card{background-color:#fff!important}.transform-preview-container .full-width{width:100%}.transform-preview-container .form-section{margin-bottom:30px}.transform-preview-container .form-section h3{font-size:1.2rem;font-weight:500;color:#415364!important;margin-bottom:15px;padding-bottom:5px;border-bottom:1px solid rgba(0,0,0,.12)}.transform-preview-container .form-section .metadata-fields{display:flex;flex-wrap:wrap;gap:16px}.transform-preview-container .form-section .metadata-fields mat-form-field{flex:1 1 200px}.transform-preview-container .form-section .code-header{display:flex;justify-content:space-between;align-items:center;cursor:pointer;padding:5px;border-radius:4px}.transform-preview-container .form-section .code-header:hover{background-color:#0000000a}.transform-preview-container .form-section .code-header h3{margin-bottom:0;padding-bottom:0;border-bottom:none}.transform-preview-container .selected-identities-summary{margin-top:15px;padding:10px;background-color:#f5f5f5;border-radius:4px;min-height:50px}.transform-preview-container .selected-identities-summary .no-identities-message{display:flex;align-items:center;justify-content:center;gap:10px;color:#415364!important;height:40px}.transform-preview-container .selected-identities-summary mat-chip-listbox{display:flex;flex-wrap:wrap;gap:8px}.transform-preview-container .form-actions{display:flex;gap:15px;margin-top:20px;margin-bottom:20px}.transform-preview-container .form-actions button{display:flex;align-items:center;gap:8px}.transform-preview-container .executing-transform{margin-top:20px;margin-bottom:20px}.transform-preview-container .executing-transform span{display:block;margin-top:8px;color:#415364!important;text-align:center}.transform-preview-container .results-section{margin-top:30px}.transform-preview-container .mat-mdc-card-title{color:#0033a1!important}.transform-preview-container .mdc-text-field--focused{border:1px solid #0071ce!important}.transform-preview-container .identity-search-container{background-color:#fff!important;padding:20px 0}.transform-preview-container .identity-search-container mat-card{background-color:#fff!important}.transform-preview-container .identity-search-container .mat-mdc-dialog-component-host,.transform-preview-container .identity-search-container .mat-mdc-card,.transform-preview-container .identity-search-container .mdc-card{background-color:#fff!important}.transform-preview-container .identity-search-container .mat-mdc-card-title,.transform-preview-container .identity-search-container .mat-mdc-card-subtitle,.transform-preview-container .identity-search-container .mat-mdc-card-header{color:#415364!important}.transform-preview-container .identity-search-container .mdc-text-field{background-color:#fff!important;border-radius:.5rem!important;border:1px solid #415364!important;text-decoration:none!important;font-family:Poppins!important;color:#415364!important}.transform-preview-container .identity-search-container .mdc-text-field--focused{border:1px solid #0071ce!important}\n"] }]
        }], ctorParameters: () => [{ type: i1$1.FormBuilder }, { type: i1.MatDialogRef }, { type: IdentityService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MAT_DIALOG_DATA]
                }] }, { type: i4.MatSnackBar }] });

const rootModel = createRootModel((root) => {
    root
        .property('name')
        .value(createStringValueModel({
        defaultValue: 'lorem ipsum',
    }))
        .label('Transform Name');
});
function createDefinition() {
    return {
        properties: {
            name: 'Transform Name',
        },
        sequence: [createAccountAttribute()],
    };
}
function createMyDefinitionModel(configuration) {
    return createDefinitionModel((model) => {
        model.root(rootModel);
        model.steps([
            createAccountAttributeModel(configuration.sources),
            ConcatModel,
            ConditionalModel,
            DateCompareModel,
            DateFormatModel,
            DateMathModel,
            E164PhoneModel,
            FirstValidModel,
            GenerateRandomStringModel,
            GetEndOfStringModel,
            GetReferenceIdentityAttributeModel,
            IdentityAttributeModel,
            IndexOfModel,
            ISO3166Model,
            LastIndexOfModel,
            LeftPadModel,
            RandomAlphaNumericModel,
            RandomNumericModel,
            createReferenceStepModel(configuration.transforms),
            createRuleStepModel(configuration.rules),
            StaticModel,
            StringModel,
            SplitModel,
            SubStringModel,
        ]);
    });
}
const serializeStep = (step) => {
    if (isAccountAttributeStep(step)) {
        return serializeAccountAttribute(step);
    }
    else if (isConcatStep(step)) {
        return serializeConcat(step);
    }
    else if (isStaticStep(step)) {
        return serializeStatic$1(step);
    }
    else if (isStringStep(step)) {
        return step.properties.value;
    }
    else if (isConditionalStep(step)) {
        return serializeConditional(step);
    }
    else if (isDateCompareStep(step)) {
        return serializeDateCompare(step);
    }
    else if (isDateFormatStep(step)) {
        return serializeDateFormat(step);
    }
    else if (isDateMathStep(step)) {
        return serializeDateMath(step);
    }
    else if (isFirstValidStep(step)) {
        return serializeFirstValid(step);
    }
    else if (isDecomposeDiacriticalMarksStep(step)) {
        return serializeDecomposeDiacriticalMarks(step);
    }
    else if (isE164PhoneStep(step)) {
        return serializeE164Phone(step);
    }
    else if (isGenerateRandomStringStep(step)) {
        return serializeGenerateRandomString(step);
    }
    else if (isGetEndOfStringStep(step)) {
        return serializeGetEndOfString(step);
    }
    else if (isGetReferenceIdentityAttributeStep(step)) {
        return serializeGetReferenceIdentityAttribute(step);
    }
    else if (isIdentityAttributeStep(step)) {
        return serializeIdentityAttribute(step);
    }
    else if (isIndexOfStep(step)) {
        return serializeIndexOf(step);
    }
    else if (isISO3166Step(step)) {
        return serializeISO3166(step);
    }
    else if (isLastIndexOfStep(step)) {
        return serializeLastIndexOf(step);
    }
    else if (isLeftPadStep(step)) {
        return serializeLeftPad(step);
    }
    else if (isLookupStep(step)) {
        return serializeLookup(step);
    }
    else if (isLowerStep(step)) {
        return serializeLower(step);
    }
    else if (isNameNormalizerStep(step)) {
        return serializeNameNormalizer(step);
    }
    else if (isRandomAlphaNumericStep(step)) {
        return serializeRandomAlphaNumeric(step);
    }
    else if (isRandomNumericStep(step)) {
        return serializeRandomNumeric(step);
    }
    else if (isReferenceStep(step)) {
        return serializeReference(step);
    }
    else if (isReplaceAllStep(step)) {
        return serializeReplaceAll(step);
    }
    else if (isReplaceStep(step)) {
        return serializeReplace(step);
    }
    else if (isRFC5646Step(step)) {
        return serializeRFC5646(step);
    }
    else if (isRightPadStep(step)) {
        return serializeRightPad(step);
    }
    else if (isRuleStep(step)) {
        return serializeRule(step);
    }
    else if (isSplitStep(step)) {
        return serializeSplit(step);
    }
    else if (isSubStringStep(step)) {
        return serializeSubString(step);
    }
    else if (isTrimStep(step)) {
        return serializeTrim(step);
    }
    else if (isUpperStep(step)) {
        return serializeUpper(step);
    }
    else if (isUUIDStep(step)) {
        return serializeUUID(step);
    }
    else if (isBase64EncodeStep(step)) {
        return serializeBase64Encode(step);
    }
    else if (isBase64DecodeStep(step)) {
        return serializeBase64Decode(step);
    }
    throw new Error(`Unsupported step type: ${step.type}`);
};
function createDefinitionFromTransform(data) {
    return {
        properties: {
            name: data.name,
            description: data.attributes.description || '',
        },
        sequence: [deserializeToStep(data)],
    };
}
const deserializers = {
    accountAttribute: deserializeAccountAttribute,
    concat: deserializeConcat,
    static: deserializeStatic,
    conditional: deserializeConditional,
    dateCompare: deserializeDateCompare,
    dateFormat: deserializeDateFormat,
    dateMath: deserializeDateMath,
    firstValid: deserializeFirstValid,
    decomposeDiacriticalMarks: deserializeDecomposeDiacriticalMarks,
    e164phone: deserializeE164Phone,
    generateRandomString: deserializeGenerateRandomString,
    getEndOfString: deserializeGetEndOfString,
    getReferenceIdentityAttribute: deserializeGetReferenceIdentityAttribute,
    identityAttribute: deserializeIdentityAttribute,
    indexOf: deserializeIndexOf,
    iso3166: deserializeISO3166,
    lastIndexOf: deserializeLastIndexOf,
    leftPad: deserializeLeftPad,
    lookup: deserializeLookup,
    lower: deserializeLower,
    nameNormailizer: deserializeNameNormalizer,
    randomAlphaNumeric: deserializeRandomAlphaNumeric,
    randomNumeric: deserializeRandomNumeric,
    reference: deserializeReference,
    replaceAll: deserializeReplaceAll,
    replace: deserializeReplace,
    rfc5646: deserializeRFC5646,
    rightPad: deserializeRightPad,
    rule: deserializeRule,
    split: deserializeSplit,
    substring: deserializeSubString,
    trim: deserializeTrim,
    upper: deserializeUpper,
    uuid: deserializeUUID,
    base64Encode: deserializeBase64Encode,
    base64Decode: deserializeBase64Decode,
};
function deserializeToStep(data) {
    if (typeof data === 'string') {
        return deserializeString(data);
    }
    const deserializer = deserializers[data.type];
    if (deserializer) {
        return deserializer(data);
    }
    throw new Error(`Unsupported step type: ${data.type}`);
}
class TransformBuilderComponent {
    router;
    dialog;
    editorDialog;
    sdk;
    autoSaveService;
    snackBar;
    theme;
    cdr;
    transform;
    destroy$ = new Subject();
    autoSaveSubject = new Subject();
    designer;
    validatorConfiguration;
    stepEditorProvider;
    rootEditorProvider;
    definition;
    definitionJSON;
    isToolboxCollapsed = false;
    isEditorCollapsed = false;
    defaultStepEditorProvider;
    isValid;
    customInputDate;
    preview;
    isReadonly = false;
    definitionModel;
    isReady = false;
    sourceMap = new Map();
    // Auto-save related properties
    isSaving = false;
    isSyncing = false;
    lastAutoSave;
    hasUnsavedChanges = false;
    isNewTransform = false;
    themeSub;
    isDarkTheme = false;
    showDesigner = true;
    constructor(router, dialog, editorDialog, sdk, autoSaveService, snackBar, theme, cdr) {
        this.router = router;
        this.dialog = dialog;
        this.editorDialog = editorDialog;
        this.sdk = sdk;
        this.autoSaveService = autoSaveService;
        this.snackBar = snackBar;
        this.theme = theme;
        this.cdr = cdr;
    }
    get designerTheme() {
        return this.isDarkTheme ? 'dark' : 'light';
    }
    getDefaultFallbackIcon() {
        const svg = `<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24">
      <path d="M0 0h24v24H0V0z" fill="none"/>
      <path fill="gray" d="M11 18c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zm-2-8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 4c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"/>
    </svg>`;
        return `data:image/svg+xml,${encodeURIComponent(svg.trim())}`;
    }
    stepsConfiguration = {
        iconUrlProvider: (componentType, type) => {
            const iconMap = {
                accountAttribute: getAccountAttributeIcon,
                concat: getConcatIcon,
                firstValid: getFirstValidIcon,
                static: getStaticIcon,
                conditional: getConditionalIcon,
                dateCompare: getDateCompareIcon,
                dateFormat: getDateFormatIcon,
                dateMath: getDateMathIcon,
                e164phone: getE164PhoneIcon,
                identityAttribute: getIdentityAttributeIcon,
                lookup: getLookupIcon,
                leftPad: getLeftPadIcon,
                randomAlphaNumeric: getRandomAlphaNumericIcon,
                randomNumeric: getRandomAlphaNumericIcon,
                reference: getReferenceIcon,
                replaceAll: getReplaceAllIcon,
                replace: getReplaceIcon,
                rightPad: getRightPadIcon,
                split: getSplitIcon,
                substring: getSubStringIcon,
                trim: getTrimIcon,
                lower: getLowerIcon,
                upper: getUpperIcon,
                uuid: getUUIDIcon,
                string: getStringIcon,
                base64Encode: getBase64EncodeIcon,
                base64Decode: getBase64DecodeIcon,
            };
            const iconFn = iconMap[type];
            if (iconFn) {
                return iconFn();
            }
            return this.getDefaultFallbackIcon();
        },
        canInsertStep: (step, targetSequence, targetIndex) => {
            const stepType = step.type;
            // Check if trying to insert after a single task type step
            if (targetIndex > 0) {
                const previousStep = targetSequence[targetIndex - 1];
                if (previousStep.componentType === 'task') {
                    this.openMessageDialog(`Cannot insert step of type "${stepType}" directly after a transform that does not take user input.`, 'Cannot insert step');
                    return false; // Cannot insert after these step types
                }
                // Existing logic: Check for same type directly above
                if (previousStep.type === stepType) {
                    this.openMessageDialog(`Cannot insert step of type "${stepType}" directly after another step of the same type.`, 'Cannot insert step Below');
                    return false; // Same type directly above
                }
            }
            // Check the step that would be directly below (next)
            if (targetIndex < targetSequence.length) {
                const nextStep = targetSequence[targetIndex];
                if ((nextStep.componentType === 'task' ||
                    nextStep.componentType === 'switch') &&
                    step.componentType === 'task') {
                    this.openMessageDialog(`Cannot insert transform of type "${stepType}" directly before another transform, as it does not take user input.`, 'Cannot insert transform');
                    return false; // Cannot insert after these step types
                }
                if (nextStep.type === stepType) {
                    this.openMessageDialog(`Cannot insert step of type "${stepType}" directly after another step of the same type.`, 'Cannot insert step Above');
                    return false; // Same type directly below
                }
            }
            return true; // Allow insertion
        },
        canMoveStep: (sourceSequence, step, targetSequence, targetIndex) => {
            const stepType = step.type;
            console.log(`Checking if we can move step of type "${stepType}" at index ${targetIndex}`);
            // Check if trying to insert after a single task type step
            if (targetIndex > 0) {
                const previousStep = targetSequence[targetIndex - 1];
                if (previousStep.componentType === 'task') {
                    this.openMessageDialog(`Cannot move step of type "${stepType}" directly after a transform that does not take user input.`, 'Cannot move step');
                    return false; // Cannot insert after these step types
                }
                // Existing logic: Check for same type directly above
                if (previousStep.type === stepType) {
                    this.openMessageDialog(`Cannot move step of type "${stepType}" directly after another step of the same type.`, 'Cannot move step Below');
                    return false; // Same type directly above
                }
            }
            // Check the step that would be directly below (next)
            if (targetIndex < targetSequence.length) {
                const nextStep = targetSequence[targetIndex];
                if ((nextStep.componentType === 'task' ||
                    nextStep.componentType === 'switch') &&
                    step.componentType === 'task') {
                    this.openMessageDialog(`Cannot move transform of type "${stepType}" directly before another transform, as it does not take user input.`, 'Cannot move transform');
                    return false; // Cannot insert after these step types
                }
                if (nextStep.type === stepType) {
                    this.openMessageDialog(`Cannot move step of type "${stepType}" directly after another step of the same type.`, 'Cannot move step Above');
                    return false; // Same type directly below
                }
            }
            return true; // Allow insertion
        },
    };
    toolboxConfiguration = {
        groups: [
            {
                name: 'Transforms',
                steps: [
                    createAccountAttribute(),
                    createBase64Encode(),
                    createBase64Decode(),
                    createConcat(),
                    createConditional(),
                    createDateCompare(),
                    createDateFormat(),
                    createDateMath(),
                    createDecomposeDiacriticalMarks(),
                    createE164Phone(),
                    createFirstValid(),
                    createGenerateRandomString(),
                    createGetEndOfString(),
                    createGetReferenceIdentityAttribute(),
                    createIdentityAttribute(),
                    createIndexOf(),
                    createISO3166(),
                    createLastIndexOf(),
                    createLeftPad(),
                    createLookup(),
                    createLower(),
                    createNameNormalizer(),
                    createRandomAlphaNumeric(),
                    createRandomNumeric(),
                    createReference(),
                    createReplaceAll(),
                    createReplace(),
                    createRFC5646(),
                    createRightPad(),
                    createRule(),
                    createSplit(),
                    createStatic(),
                    createSubString(),
                    createTrim(),
                    createUpper(),
                    createUUID(),
                ],
            },
            {
                name: 'Primitives',
                steps: [createString()],
            },
        ],
    };
    ngOnDestroy() {
        this.themeSub.unsubscribe();
        this.destroy$.next();
        this.destroy$.complete();
    }
    ngOnInit() {
        this.themeSub = this.theme.isDark$.subscribe((dark) => {
            this.isDarkTheme = dark;
            this.showDesigner = false;
            setTimeout(() => {
                this.showDesigner = true;
                this.cdr.detectChanges();
            });
        });
        if (!this.transform) {
            this.definition = createDefinition();
            this.isNewTransform = true;
        }
        else {
            this.definition = createDefinitionFromTransform(this.transform);
            this.isReadonly = false;
        }
        this.updateDefinitionJSON();
        void (async () => {
            try {
                const [sourcesResult, transforms, rules] = await Promise.all([
                    getAvailableSources(this.sdk),
                    getAvailableTransforms(this.sdk),
                    getAvailableRules(this.sdk),
                ]);
                this.sourceMap = sourcesResult.map;
                const model = createMyDefinitionModel({
                    sources: sourcesResult.names,
                    transforms,
                    rules,
                });
                if (!model) {
                    throw new Error('Failed to create DefinitionModel.');
                }
                this.definitionModel = model;
                const editorProvider = EditorProvider.create(this.definitionModel, {
                    uidGenerator: () => Uid.next(),
                });
                this.rootEditorProvider = editorProvider.createRootEditorProvider();
                this.stepEditorProvider = editorProvider.createStepEditorProvider();
                this.validatorConfiguration = {
                    root: editorProvider.createRootValidator(),
                    step: editorProvider.createStepValidator(),
                };
                this.isReady = true;
                if (this.definition) {
                    this.performAutoSave(this.definition);
                }
            }
            catch (error) {
                console.error('Failed during ngOnInit async setup:', error);
            }
        })();
    }
    performAutoSave(definition) {
        if (!definition?.sequence?.[0])
            return;
        this.isSaving = true;
        try {
            const serializedTransform = serializeStep(definition.sequence[0]);
            const transformId = this.isNewTransform
                ? 'new_transform'
                : this.transform?.id || 'unknown';
            const definitionName = definition.properties?.name;
            const transformName = typeof definitionName === 'string'
                ? definitionName
                : 'Untitled Transform';
            this.autoSaveService.autoSave(transformId, transformName, serializedTransform, this.isNewTransform, this.transform // Store original cloud version for comparison
            );
        }
        catch (error) {
            console.error('Auto-save failed:', error);
            this.snackBar.open('Auto-save failed', 'Close', { duration: 3000 });
        }
        finally {
            this.isSaving = false;
        }
    }
    async saveToCloud() {
        if (!this.definition?.sequence?.[0]) {
            this.snackBar.open('Nothing to save', 'Close', { duration: 3000 });
            return;
        }
        this.isSyncing = true;
        try {
            let serializedTransform = serializeStep(this.definition.sequence[0]);
            let newTransform = serializedTransform;
            const definitionName = this.definition?.properties?.name;
            newTransform.name = String(typeof definitionName === 'string' ? definitionName : newTransform.name);
            console.log('Saving transform to cloud:', newTransform);
            // If the transform already exists, update it
            if (this.transform?.id) {
                const transformUpdateRequest = {
                    transformV2025: newTransform,
                    id: this.transform?.id,
                };
                await this.sdk.updateTransform(transformUpdateRequest);
                this.autoSaveService.clearLocalSave(this.transform.id);
                this.snackBar.open(`Transform "${newTransform.name}" updated successfully`, 'Close', { duration: 3000 });
            }
            else {
                // If it's a new transform, create it
                const createTransformRequest = {
                    transformV2025: newTransform,
                };
                const response = await this.sdk.createTransform(createTransformRequest);
                this.transform = response.data;
                this.isNewTransform = false;
                this.autoSaveService.clearLocalSave('new_transform', true);
                this.snackBar.open('Transform created successfully', 'Close', {
                    duration: 3000,
                });
            }
            this.hasUnsavedChanges = false;
        }
        catch (error) {
            console.error('Save to cloud failed:', error);
            const errorMessage = error instanceof Error ? error.message : 'Unknown error';
            this.snackBar.open(`Failed to sync: ${errorMessage}`, 'Close', {
                duration: 5000,
            });
        }
        finally {
            this.isSyncing = false;
        }
    }
    restoreFromCloud() {
        if (!this.transform)
            return;
        const shouldRestore = window.confirm('This will discard all local changes and restore the transform from the cloud. Are you sure?');
        if (shouldRestore) {
            this.definition = createDefinitionFromTransform(this.transform);
            this.updateDefinitionJSON();
            this.hasUnsavedChanges = false;
            if (this.transform.id) {
                this.autoSaveService.clearLocalSave(this.transform.id);
            }
            this.snackBar.open('Restored from cloud', 'Close', { duration: 3000 });
        }
    }
    discardLocalChanges() {
        const shouldDiscard = window.confirm('This will discard all local changes. Are you sure?');
        if (shouldDiscard) {
            const transformId = this.isNewTransform
                ? 'new_transform'
                : this.transform?.id || 'unknown';
            this.autoSaveService.clearLocalSave(transformId, this.isNewTransform);
            if (this.transform) {
                this.definition = createDefinitionFromTransform(this.transform);
                this.updateDefinitionJSON();
            }
            else {
                this.definition = createDefinition();
                this.updateDefinitionJSON();
            }
            this.hasUnsavedChanges = false;
            this.snackBar.open('Local changes discarded', 'Close', {
                duration: 3000,
            });
        }
    }
    onDesignerReady(designer) {
        this.designer = designer;
        this.updateIsValid();
        // Safely apply initial theme
        designer.setTheme?.(this.isDarkTheme ? 'dark' : 'light');
    }
    onDefinitionChanged(definition) {
        console.log('onDefinitionChanged', definition);
        this.definition = definition;
        this.updateDefinitionJSON();
        if (this.transform?.id) {
            const parsedDef = JSON.parse(this.definitionJSON ?? '{}');
            const hasChanges = this.autoSaveService.hasUnsavedChanges(this.transform.id, parsedDef);
            this.hasUnsavedChanges = hasChanges;
        }
        else {
            this.hasUnsavedChanges = false;
        }
        this.autoSaveSubject.next(definition);
    }
    updateDefinitionJSON() {
        const transformedResult = this.definition?.sequence?.[0]
            ? serializeStep(this.definition.sequence[0])
            : undefined;
        this.definitionJSON = JSON.stringify(transformedResult, null, 2);
    }
    toggleToolboxClicked() {
        this.isToolboxCollapsed = !this.isToolboxCollapsed;
    }
    toggleEditorClicked() {
        this.isEditorCollapsed = !this.isEditorCollapsed;
    }
    updateIsValid() {
        this.isValid = this.designer?.isValid();
    }
    toggleReadonlyClicked() {
        this.isReadonly = !this.isReadonly;
    }
    onSelectedStepIdChanged(selectedStepId) {
        console.log('onSelectedStepIdChanged', selectedStepId);
        this.isEditorCollapsed = false;
    }
    objectKeys = Object.keys;
    isBoolean(value) {
        return typeof value === 'boolean';
    }
    isNumber(value, key, stepType) {
        if (!this.definitionModel)
            return false;
        const stepDef = this.definitionModel.steps[stepType];
        if (!stepDef?.properties)
            return false;
        const propDef = stepDef.properties.find((p) => p.path.parts[p.path.parts.length - 1] === key);
        if (propDef?.value.id === 'number')
            return true;
        return false;
    }
    getHintForProperty(stepType, key) {
        if (!this.definitionModel)
            return undefined;
        const stepDef = this.definitionModel.steps[stepType];
        if (!stepDef?.properties)
            return undefined;
        const propDef = stepDef.properties.find((p) => p.path.parts[p.path.parts.length - 1] === key);
        return propDef?.hint;
    }
    getLabelForProperty(stepType, key) {
        if (!this.definitionModel)
            return undefined;
        const stepDef = this.definitionModel.steps[stepType];
        if (!stepDef?.properties)
            return undefined;
        const propDef = stepDef.properties.find((p) => p.path.parts[p.path.parts.length - 1] === key);
        return propDef?.label;
    }
    isMap(value) {
        return typeof value === 'object' && value !== null && !Array.isArray(value);
    }
    editMap(properties, name, context) {
        const currentMap = properties[name];
        const mapObject = currentMap instanceof Map ? Object.fromEntries(currentMap) : currentMap;
        const dialogRef = this.dialog.open(MapEditorDialogComponent, {
            width: '800px',
            height: '600px',
            maxWidth: 'none',
            data: { map: mapObject },
        });
        dialogRef.afterClosed().subscribe((result) => {
            if (this.isStringRecord(result)) {
                properties[name] = new Map(Object.entries(result));
                context.notifyPropertiesChanged();
            }
        });
    }
    isStringRecord(value) {
        return (typeof value === 'object' &&
            value !== null &&
            !Array.isArray(value) &&
            Object.values(value).every((v) => typeof v === 'string'));
    }
    togglePreview() {
        const selectedStepId = this.designer?.getSelectedStepId();
        const definition = this.designer?.getDefinition();
        let serializedTransform;
        if (selectedStepId) {
            // Serialize selected step
            if (!definition) {
                window.alert('Definition not found');
                return;
            }
            const selectedStep = this.findStepById(definition, selectedStepId);
            if (!selectedStep) {
                window.alert('Selected step not found');
                return;
            }
            serializedTransform = JSON.stringify(serializeStep(selectedStep), null, 2);
        }
        else {
            // Serialize whole definition
            if (definition?.sequence[0]) {
                serializedTransform = JSON.stringify(serializeStep(definition.sequence[0]), null, 2);
            }
            else {
                serializedTransform = undefined;
            }
        }
        this.dialog.open(TransformPreviewComponent, {
            width: '70%',
            height: '75%',
            maxWidth: 'none',
            data: { sdkService: this.sdk, transformDefinition: serializedTransform },
        });
    }
    viewTransformDefinition() {
        const selectedStepId = this.designer?.getSelectedStepId();
        const definition = this.designer?.getDefinition();
        let serializedTransform;
        if (selectedStepId) {
            if (!definition) {
                this.openMessageDialog('Definition not found', 'Error');
                return;
            }
            const selectedStep = this.findStepById(definition, selectedStepId);
            if (!selectedStep) {
                this.openMessageDialog('Selected step not found', 'Error');
                return;
            }
            serializedTransform = JSON.stringify(serializeStep(selectedStep), null, 2);
        }
        else if (definition?.sequence[0]) {
            serializedTransform = JSON.stringify(serializeStep(definition.sequence[0]), null, 2);
        }
        if (!serializedTransform) {
            this.openMessageDialog('No transform found to display.', 'Warning');
            return;
        }
        this.dialog.open(GenericDialogComponent, {
            minWidth: '800px',
            data: {
                title: 'Transform Definition',
                message: serializedTransform,
            },
        });
    }
    // Basic findStepById function
    findStepById(definition, stepId) {
        function searchInSequence(sequence) {
            for (const step of sequence) {
                // Direct match
                if (step.id === stepId) {
                    return step;
                }
                // Search in nested sequence
                if (step.sequence && Array.isArray(step.sequence)) {
                    const found = searchInSequence(step.sequence);
                    if (found)
                        return found;
                }
                // Search in branches
                if (step.branches && typeof step.branches === 'object') {
                    for (const branchKey in step.branches) {
                        const branch = step.branches[branchKey];
                        if (Array.isArray(branch)) {
                            const found = searchInSequence(branch);
                            if (found)
                                return found;
                        }
                    }
                }
            }
            return null;
        }
        return searchInSequence(definition.sequence);
    }
    getBranchNames(branches) {
        return Object.keys(branches || {});
    }
    openVelocityEditor(properties, name, event, context) {
        this.isReadonly = true; // Disable editing while opening editor
        console.log('openVelocityEditor', properties, name, event);
        const currentValue = properties[name] || '';
        const dialogReference = this.editorDialog.open(VelocityEditorDialogComponent, {
            autoFocus: true,
            restoreFocus: true,
            role: 'dialog',
            width: '90vw',
            maxWidth: '1000px',
            height: '80vh',
            maxHeight: '800px',
            data: {
                code: currentValue,
                title: 'Edit Velocity Code',
                readonly: false,
            },
            disableClose: true,
        });
        dialogReference.afterClosed().subscribe((result) => {
            this.isReadonly = false; // Re-enable editing after editor is closed
            console.log('Velocity editor closed with result:', result);
            if (result !== undefined && result.saved) {
                properties[name] = result.code;
                console.log('Updated properties:', properties);
                context.notifyPropertiesChanged();
            }
        });
    }
    updateProperty(properties, name, event, context) {
        console.log('updateProperty', properties, name, event);
        if (event instanceof MatSlideToggleChange) {
            properties[name] = event.checked;
        }
        else if (event instanceof InputEvent) {
            properties[name] = event.target.value;
        }
        context.notifyPropertiesChanged();
    }
    updateNumericProperty(properties, name, event, context) {
        console.log(event);
        if (event instanceof InputEvent) {
            properties[name] = parseFloat(event.target.value);
        }
        context.notifyPropertiesChanged();
    }
    removeBranch(branches, index, event, context) {
        console.log('removeBranch', branches, index);
        this.deleteBranchAtIndex(branches, index);
        console.log('branches', branches);
        context.notifyChildrenChanged();
    }
    deleteBranchAtIndex(obj, index) {
        const keys = Object.keys(obj);
        if (index < 0 || index >= keys.length)
            return;
        const keyToDelete = keys[index];
        delete obj[keyToDelete];
    }
    renameBranchAtIndex(obj, oldKey, newKey, context) {
        // 1) Same validation as before
        const validBranchName = /^(?!\d)\S+$/;
        if (!validBranchName.test(newKey)) {
            this.snackBar.open('Branch names must not start with a number and may not contain spaces.', 'Close', { duration: 5000 });
            return;
        }
        const branchKeys = Object.keys(obj);
        if (!branchKeys.includes(oldKey) || oldKey === newKey) {
            return;
        }
        if (branchKeys.includes(newKey)) {
            this.snackBar.open(`A branch named "${newKey}" already exists.`, 'Close', { duration: 5000 });
            return;
        }
        // 2) Grab the existing keys in order, and their corresponding values
        const keys = Object.keys(obj);
        const values = keys.map((k) => obj[k]);
        // 3) Build a new array of [key,value] pairs, swapping only your renamed one
        const updatedEntries = keys.map((k, i) => k === oldKey ? [newKey, values[i]] : [k, values[i]]);
        // 4) Clear the original object
        for (const k of keys) {
            delete obj[k];
        }
        // 5) Re‑insert each entry in the exact same order
        for (const [k, v] of updatedEntries) {
            obj[k] = v;
        }
        // 6) Notify the designer to re‑render
        context.notifyChildrenChanged();
    }
    addBranch(branches, context) {
        const index = Object.keys(branches || {}).length + 1;
        branches['New_Branch_' + index] = [];
        context.notifyChildrenChanged();
    }
    getChoicesForProperty(stepType, key) {
        if (!this.definitionModel)
            return null;
        const stepDef = this.definitionModel.steps[stepType];
        if (!stepDef?.properties)
            return null;
        const propDef = stepDef.properties.find((p) => p.path.parts[p.path.parts.length - 1] === key);
        if (!propDef || !propDef.value || !propDef.value.configuration)
            return null;
        return (propDef?.value?.configuration)
            .choices;
    }
    stepTypeMap = {
        e164phone: isoAlpha2Map,
        dateCompare: operatorMap,
        iso3166: iso3166Map,
        dateFormat: DateFormatMap,
    };
    getChoiceLabel(stepType, choice) {
        const lookup = this.stepTypeMap[stepType];
        return lookup?.[choice.toUpperCase()] ?? choice;
    }
    branchingEnabled(step) {
        if (isConcatStep(step) ||
            isStaticStep(step) ||
            isConditionalStep(step) ||
            isFirstValidStep(step)) {
            return true;
        }
        else {
            return false;
        }
    }
    onSourceNameChanged(properties, name, sourceName, context) {
        console.log('onSourceNameChanged', properties, name, sourceName);
        if ('notifyChildrenChanged' in context && 'notifyNameChanged' in context) {
            void this.loadAccountAttributes(context, sourceName);
        }
    }
    accountAttributesCache = new Map();
    loadingStates = new Map();
    async loadAccountAttributes(editor, sourceName) {
        return this.loadAccountAttributesForSource(sourceName);
    }
    // Updated method to get account attributes for display with auto-loading
    getAccountAttributes(editor) {
        const sourceName = editor.step.properties['sourceName'];
        if (!sourceName) {
            return [];
        }
        const cacheKey = `${sourceName}`;
        console.log('getAccountAttributes', sourceName, cacheKey);
        // Check if we have cached data
        if (this.accountAttributesCache.has(cacheKey)) {
            console.log('Account attributes cache:', this.accountAttributesCache.get(cacheKey));
            return this.accountAttributesCache.get(cacheKey) || [];
        }
        // If not cached and not currently loading, start loading
        if (!this.loadingStates.get(cacheKey)) {
            console.log('Cache miss - loading account attributes for:', sourceName);
            // Don't await this - let it load in the background
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            this.loadAccountAttributesForSource(sourceName).catch((error) => {
                console.error('Failed to load account attributes:', error);
            });
        }
        // Return empty array while loading
        return [];
    }
    // Add this simplified loading method that doesn't require editor context
    async loadAccountAttributesForSource(sourceName) {
        if (!sourceName) {
            return;
        }
        const cacheKey = `${sourceName}`;
        // Check if we already have cached data (double-check)
        if (this.accountAttributesCache.has(cacheKey)) {
            return;
        }
        // Set loading state
        this.loadingStates.set(cacheKey, true);
        const sourceId = this.sourceMap.get(sourceName);
        if (typeof sourceId === 'string') {
            try {
                const response = await this.sdk.getSourceSchemas({ sourceId });
                const schemas = response.data;
                const userSchema = schemas.find((schema) => schema.nativeObjectType === 'User' ||
                    schema.nativeObjectType === 'account');
                const attributes = userSchema
                    ? userSchema.attributes?.map((value) => value.name)
                    : [];
                console.log('Loaded account attributes for source:', sourceName, attributes);
                this.accountAttributesCache.set(cacheKey, attributes ?? []);
                this.loadingStates.set(cacheKey, false);
                // Trigger change detection to update the UI
                setTimeout(() => {
                    // This ensures Angular picks up the changes
                }, 0);
            }
            catch (error) {
                console.error('Error loading account attributes:', error);
                this.loadingStates.set(cacheKey, false);
            }
        }
        else {
            this.loadingStates.set(cacheKey, false);
        }
    }
    isAccountAttributeDisabled(editor) {
        const sourceName = editor.step.properties['sourceName'];
        return !sourceName || this.isLoadingAccountAttributes(editor);
    }
    isLoadingAccountAttributes(editor) {
        const sourceName = editor.step.properties['sourceName'];
        if (!sourceName) {
            return false;
        }
        const cacheKey = `${sourceName}`;
        return this.loadingStates.get(cacheKey) || false;
    }
    // Optional: Method to clear cache when needed
    clearAccountAttributesCache() {
        this.accountAttributesCache.clear();
        this.loadingStates.clear();
    }
    showBranch(step, branchName) {
        if (branchName === 'input') {
            return false;
        }
        else if (isConditionalStep(step) &&
            (branchName === 'positiveCondition' || branchName === 'negativeCondition')) {
            return false;
        }
        else if (isDateCompareStep(step) &&
            (branchName === 'positiveCondition' ||
                branchName === 'negativeCondition' ||
                branchName === 'firstDate' ||
                branchName === 'secondDate')) {
            return false;
        }
        return true;
    }
    isRequired(stepName, key) {
        if (!this.definitionModel)
            return false;
        const stepDef = this.definitionModel.steps[stepName];
        if (!stepDef?.properties)
            return false;
        const propDef = stepDef.properties.find((p) => p.path.parts[p.path.parts.length - 1] === key);
        if (!propDef)
            return false;
        const config = propDef.value?.configuration;
        if (!config)
            return false;
        // NullableVariableValueModelConfiguration
        if ('isRequired' in config && typeof config.isRequired === 'boolean') {
            return config.isRequired;
        }
        // StringValueModelConfiguration
        if ('minLength' in config && typeof config.minLength === 'number') {
            return config.minLength >= 1;
        }
        if ('choices' in config && Array.isArray(config.choices)) {
            return config.choices.length > 1;
        }
        // const stepDef = this.definitionModel.steps[stepName];
        // console.log('stepDef', stepDef);
        return false;
    }
    openMessageDialog(errorMessage, title) {
        this.dialog.open(GenericDialogComponent, {
            data: {
                title: title,
                message: errorMessage,
            },
        });
    }
    downloadTransform() {
        if (!this.definition?.sequence?.[0]) {
            this.snackBar.open('No transform to download', 'Close', {
                duration: 3000,
            });
            return;
        }
        try {
            let serializedTransform = serializeStep(this.definition.sequence[0]);
            let transformDownload = serializedTransform;
            const downloadName = this.definition?.properties?.name;
            transformDownload.name = String(typeof downloadName === 'string' ? downloadName : transformDownload.name);
            // Convert to JSON string with formatting
            const jsonContent = JSON.stringify(transformDownload, null, 2);
            // Create blob and download
            const blob = new Blob([jsonContent], { type: 'application/json' });
            const url = window.URL.createObjectURL(blob);
            // Create temporary download link
            const link = document.createElement('a');
            link.href = url;
            link.download = `${transformDownload.name}.json`;
            // Trigger download
            document.body.appendChild(link);
            link.click();
            // Cleanup
            document.body.removeChild(link);
            window.URL.revokeObjectURL(url);
            this.snackBar.open(`Downloaded ${transformDownload.name}.json`, 'Close', {
                duration: 3000,
            });
        }
        catch (error) {
            console.error('Download failed:', error);
            this.snackBar.open('Failed to download transform', 'Close', {
                duration: 3000,
            });
        }
    }
    // Add these methods to your TransformBuilderComponent class
    /**
     * Get example output for a date format pattern
     */
    getDateFormatExample(pattern) {
        // const examples: Record<string, string> = {
        //   'yyyy-MM-dd': '2024-03-15',
        //   'MM/dd/yyyy': '03/15/2024',
        //   'dd/MM/yyyy': '15/03/2024',
        //   'yyyy-MM-dd HH:mm:ss': '2024-03-15 14:30:45',
        //   'MMM dd, yyyy': 'Mar 15, 2024',
        //   'EEEE, MMMM dd, yyyy': 'Friday, March 15, 2024',
        //   'HH:mm:ss': '14:30:45',
        //   'yyyy-DDD': '2024-075',
        //   'yy/MM/dd': '24/03/15',
        //   'dd-MMM-yyyy': '15-Mar-2024',
        //   'MMMM yyyy': 'March 2024',
        //   'EEE, dd MMM yyyy': 'Fri, 15 Mar 2024',
        // };
        if (!pattern || pattern.trim() === '') {
            return 'Enter a pattern to see example';
        }
        return `Example: ${this.generateExampleFromPattern(pattern)}`;
    }
    /**
     * Generate a basic example from a custom pattern
     */
    generateExampleFromPattern(pattern) {
        try {
            // Simple pattern replacement for common elements
            let example = pattern
                .replace(/yyyy/g, '2024')
                .replace(/yy/g, '24')
                .replace(/MMMM/g, 'March')
                .replace(/MMM/g, 'Mar')
                .replace(/MM/g, '03')
                .replace(/M/g, '3')
                .replace(/dd/g, '15')
                .replace(/d/g, '15')
                .replace(/HH/g, '14')
                .replace(/H/g, '14')
                .replace(/hh/g, '02')
                .replace(/h/g, '2')
                .replace(/mm/g, '30')
                .replace(/m/g, '30')
                .replace(/ss/g, '45')
                .replace(/s/g, '45')
                .replace(/EEEE/g, 'Friday')
                .replace(/EEE/g, 'Fri')
                .replace(/EE/g, 'Fr')
                .replace(/E/g, 'F')
                .replace(/a/g, 'PM')
                .replace(/DDD/g, '075')
                .replace(/DD/g, '75')
                .replace(/D/g, '75');
            return example;
        }
        catch {
            return '2024-03-15';
        }
    }
    /**
     * Validate a SimpleDateFormat pattern
     */
    validateDateFormatPattern(pattern) {
        if (!pattern || pattern.trim() === '') {
            return { isValid: false, error: 'Pattern cannot be empty' };
        }
        // Basic validation for common SimpleDateFormat patterns
        const validPatterns = /^[yMdHhmsaEGwWDFkKzZSX\s\-/.,:'"]*$/;
        if (!validPatterns.test(pattern)) {
            return { isValid: false, error: 'Invalid characters in date pattern' };
        }
        // Check for balanced quotes
        const quoteCount = (pattern.match(/'/g) || []).length;
        if (quoteCount % 2 !== 0) {
            return { isValid: false, error: 'Unmatched quote in pattern' };
        }
        return { isValid: true };
    }
    /**
     * Enhanced property update for date format fields
     */
    updateDateFormatProperty(properties, name, event, context) {
        if (event instanceof MatSlideToggleChange) {
            properties[name] = event.checked;
        }
        else if (event instanceof Event) {
            const target = event.target;
            const value = target.value;
            properties[name] = value;
            // Validate custom date format patterns
            if ((name === 'customInputFormat' || name === 'customOutputFormat') &&
                value) {
                const validation = this.validateDateFormatPattern(value);
                if (!validation.isValid) {
                    // You could show a validation error here
                    console.warn(`Invalid date format pattern: ${validation.error}`);
                }
            }
        }
        context.notifyPropertiesChanged();
    }
    /**
     * Check if a date format step should show custom input field
     */
    shouldShowCustomInput(step) {
        return (step.type === 'dateFormat' && step.properties.inputFormat === 'CUSTOM');
    }
    /**
     * Check if a date format step should show custom output field
     */
    shouldShowCustomOutput(step) {
        if (step.type !== 'dateFormat')
            return false;
        if (!step.properties || typeof step.properties !== 'object')
            return false;
        if (!('outputFormat' in step.properties))
            return false;
        return step.properties.outputFormat === 'CUSTOM';
    }
    /**
     * Get the effective input format (custom or selected)
     */
    getEffectiveInputFormat(step) {
        if (!step.properties || typeof step.properties !== 'object') {
            return '';
        }
        const props = step.properties;
        if (props.inputFormat === 'CUSTOM' &&
            props.customInputFormat &&
            typeof props.customInputFormat === 'string') {
            return props.customInputFormat;
        }
        return props.inputFormat && typeof props.inputFormat === 'string'
            ? props.inputFormat
            : '';
    }
    /**
     * Get the effective output format (custom or selected)
     */
    getEffectiveOutputFormat(step) {
        if (!step.properties || typeof step.properties !== 'object') {
            return '';
        }
        const props = step.properties;
        if (props.outputFormat === 'CUSTOM' &&
            props.customOutputFormat &&
            typeof props.customOutputFormat === 'string') {
            return props.customOutputFormat;
        }
        return props.outputFormat && typeof props.outputFormat === 'string'
            ? props.outputFormat
            : '';
    }
    // Add these methods to your TransformBuilderComponent class for Date Math support
    /**
     * Toggle between visual builder and manual expression input
     */
    onDateMathBuilderToggle(properties, useBuilder, context) {
        properties.useBuilder = useBuilder;
        if (useBuilder) {
            // Parse existing expression into operations
            if (properties.expression) {
                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
                const parsed = this.parseDateMathExpression(properties.expression);
                properties.baseDate = parsed.baseDate;
                properties.operations = parsed.operations;
            }
            else {
                // Initialize with defaults
                properties.baseDate = 'input';
                properties.operations = [];
            }
        }
        else {
            // Build expression from current operations
            this.updateDateMathExpression(properties, context);
        }
        context.notifyPropertiesChanged();
    }
    /**
     * Get operations array for the date math step
     */
    getDateMathOperations(properties) {
        if (!properties.operations) {
            properties.operations = [];
        }
        return Array.isArray(properties.operations) ? properties.operations : [];
    }
    /**
     * Add a new operation to the date math step
     */
    addDateMathOperation(properties, context) {
        if (!properties.operations) {
            properties.operations = [];
        }
        properties.operations.push({
            operation: '+',
            value: 1,
            unit: 'd',
        });
        this.updateDateMathExpression(properties, context);
    }
    /**
     * Remove an operation from the date math step
     */
    removeDateMathOperation(properties, index, context) {
        if (properties.operations && properties.operations.length > index) {
            properties.operations.splice(index, 1);
            this.updateDateMathExpression(properties, context);
        }
    }
    /**
     * Update a specific operation property
     */
    updateDateMathOperationAt(properties, index, field, value, context) {
        if (!properties.operations || !properties.operations[index]) {
            return;
        }
        const operation = properties.operations[index];
        if (field === 'value' && value instanceof Event) {
            const target = value.target;
            operation[field] = parseInt(target.value, 10) || 1;
        }
        else {
            operation[field] = value;
        }
        // If operation is changed to '/', set value to 1 (rounding doesn't need a value)
        if (field === 'operation' && value === '/') {
            operation.value = 1;
        }
        this.updateDateMathExpression(properties, context);
    }
    /**
     * Update the expression based on current builder state
     */
    updateDateMathExpression(properties, context) {
        if (!properties.useBuilder) {
            context.notifyPropertiesChanged();
            return;
        }
        let expression = properties.baseDate === 'now' ? 'now' : '';
        if (properties.operations && properties.operations.length > 0) {
            for (const op of properties.operations) {
                if (op.operation === '/') {
                    expression += `/${op.unit}`;
                }
                else {
                    expression += `${op.operation}${op.value || 1}${op.unit}`;
                }
            }
        }
        properties.expression =
            expression || (properties.baseDate === 'now' ? 'now' : '');
        context.notifyPropertiesChanged();
    }
    /**
     * Get the generated expression for display
     */
    getGeneratedExpression(properties) {
        if (!properties.useBuilder) {
            return typeof properties.expression === 'string'
                ? properties.expression
                : '';
        }
        let expression = properties.baseDate === 'now' ? 'now' : '';
        if (properties.operations &&
            Array.isArray(properties.operations) &&
            properties.operations.length > 0) {
            for (const op of properties.operations) {
                if (op && typeof op === 'object' && 'operation' in op && 'unit' in op) {
                    if (op.operation === '/') {
                        expression += `/${op.unit}`;
                    }
                    else {
                        const value = 'value' in op ? op.value || 1 : 1;
                        expression += `${op.operation}${value}${op.unit}`;
                    }
                }
            }
        }
        return (expression || (properties.baseDate === 'now' ? 'now' : '(no operations)'));
    }
    /**
     * Get a human-readable description of the expression
     */
    getExpressionDescription(properties) {
        if (!properties.useBuilder ||
            !properties.operations ||
            properties.operations.length === 0) {
            if (properties.baseDate === 'now') {
                return 'Returns the current date and time';
            }
            return 'Returns the input date unchanged';
        }
        const baseDescription = properties.baseDate === 'now'
            ? 'Starting from current date/time'
            : 'Starting from input date';
        const operationDescriptions = properties.operations.map((op) => {
            const unitNames = {
                y: 'year(s)',
                M: 'month(s)',
                w: 'week(s)',
                d: 'day(s)',
                h: 'hour(s)',
                m: 'minute(s)',
                s: 'second(s)',
            };
            if (op.operation === '/') {
                return `round to ${unitNames[op.unit] || op.unit}`;
            }
            else if (op.operation === '+') {
                return `add ${op.value} ${unitNames[op.unit] || op.unit}`;
            }
            else {
                return `subtract ${op.value} ${unitNames[op.unit] || op.unit}`;
            }
        });
        return `${baseDescription}, then ${operationDescriptions.join(', ')}`;
    }
    /**
     * Parse an existing expression into base date and operations
     */
    parseDateMathExpression(expression) {
        if (!expression) {
            return { baseDate: 'input', operations: [] };
        }
        const baseDate = expression.startsWith('now') ? 'now' : 'input';
        const operations = [];
        // Remove 'now' from beginning if present
        let remaining = expression.startsWith('now')
            ? expression.substring(3)
            : expression;
        // Parse operations using regex
        const operationRegex = /([+\-/])(\d*)([yMwdhms])/g;
        let match;
        while ((match = operationRegex.exec(remaining)) !== null) {
            const [, operation, value, unit] = match;
            operations.push({
                operation: operation,
                value: operation === '/' ? 1 : parseInt(value, 10) || 1,
                unit: unit,
            });
        }
        return { baseDate, operations };
    }
    /**
     * Validate a date math expression
     */
    validateDateMathExpression(expression) {
        if (!expression || expression.trim() === '') {
            return { isValid: false, error: 'Expression cannot be empty' };
        }
        // Basic validation
        const validPattern = /^(now)?([+\-/]\d*[yMwdhms])*$/;
        if (!validPattern.test(expression)) {
            return { isValid: false, error: 'Invalid expression format' };
        }
        // Check for valid units
        const validUnits = ['y', 'M', 'w', 'd', 'h', 'm', 's'];
        const unitMatches = expression.match(/[yMwdhms]/g) || [];
        for (const unit of unitMatches) {
            if (!validUnits.includes(unit)) {
                return { isValid: false, error: `Invalid unit: ${unit}` };
            }
        }
        return { isValid: true };
    }
    /**
     * Get example expressions for date math
     */
    getDateMathExamples() {
        return [
            { expression: 'now', description: 'Current date and time' },
            { expression: 'now/h', description: 'Current time rounded to the hour' },
            { expression: 'now+1w', description: 'One week from now' },
            {
                expression: 'now+1y+1M+2d-4h+1m-3s/s',
                description: 'Complex calculation rounded to seconds',
            },
            { expression: '+3M', description: 'Add 3 months to input date' },
            { expression: '-1d', description: 'Subtract 1 day from input date' },
            { expression: '/d', description: 'Round input date to start of day' },
        ];
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: TransformBuilderComponent, deps: [{ token: i1$2.Router }, { token: i1.MatDialog }, { token: i1.MatDialog }, { token: SailPointSDKService }, { token: AutoSaveService }, { token: i4.MatSnackBar }, { token: ThemeService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "20.1.3", type: TransformBuilderComponent, isStandalone: true, selector: "app-transform-builder", inputs: { transform: "transform" }, ngImport: i0, template: "<div\r\n  *ngIf=\"isReady\"\r\n  id=\"autosaveControls\"\r\n  class=\"autosave-controls\"\r\n>\r\n  <h4 class=\"transform-name\">{{ definition?.properties?.name }}</h4>\r\n\r\n  <button class=\"action-buttons\" color=\"primary\" (click)=\"togglePreview()\" matTooltip=\"Test your transform with live identity data\"\r\n>\r\n    Preview Transform\r\n  </button>\r\n  <button\r\n    class=\"action-buttons\"\r\n    color=\"primary\"\r\n    (click)=\"toggleReadonlyClicked()\"\r\n  >\r\n  {{isReadonly ? \"Enable\" : \"Disable\"}} Editing\r\n  </button>\r\n\r\n  <button\r\n    class=\"action-buttons\"\r\n    color=\"primary\"\r\n    (click)=\"viewTransformDefinition()\"\r\n  >\r\n    View Definition\r\n  </button>\r\n\r\n  <!-- Sync controls -->\r\n  <div class=\"sync-controls\">\r\n    <button\r\n      class=\"action-buttons\"\r\n      color=\"warn\"\r\n      (click)=\"discardLocalChanges()\"\r\n      [disabled]=\"!hasUnsavedChanges || isSyncing\"\r\n      *ngIf=\"hasUnsavedChanges\"\r\n    >\r\n      <mat-icon>delete</mat-icon>\r\n      Discard\r\n    </button>\r\n\r\n    <button\r\n      class=\"action-buttons\"\r\n      color=\"accent\"\r\n      (click)=\"downloadTransform()\"\r\n      [disabled]=\"!definition?.sequence?.[0]\"\r\n      matTooltip=\"Download Transform Definition\"\r\n    >\r\n      <mat-icon>download</mat-icon>\r\n      Download\r\n    </button>\r\n\r\n    <button\r\n      class=\"action-buttons\"\r\n      color=\"primary\"\r\n      (click)=\"saveToCloud()\"\r\n      [matBadge]=\"hasUnsavedChanges ? '!' : null\"\r\n      matBadgeColor=\"warn\"\r\n      matBadgeSize=\"small\"\r\n    >\r\n      <mat-icon>{{ isSyncing ? \"sync\" : \"cloud_upload\" }}</mat-icon>\r\n      {{\r\n        isSyncing ? \"Syncing...\" : isNewTransform ? \"Create Transform\" : \"Save\"\r\n      }}\r\n    </button>\r\n\r\n    <!-- Auto-save status -->\r\n    <div class=\"autosave-status\">\r\n      <mat-icon\r\n        [style.color]=\"\r\n          isSaving ? 'orange' : hasUnsavedChanges ? 'red' : 'green'\r\n        \"\r\n      >\r\n        {{ isSaving ? \"sync\" : hasUnsavedChanges ? \"cloud_off\" : \"cloud_done\" }}\r\n      </mat-icon>\r\n      <span class=\"status-text\">\r\n        <ng-container *ngIf=\"isSaving\">Saving...</ng-container>\r\n        <ng-container *ngIf=\"!isSaving && hasUnsavedChanges\">\r\n          Unsaved\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!isSaving && !hasUnsavedChanges\"\r\n          >Saved</ng-container\r\n        >\r\n      </span>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div *ngIf=\"!isReady\" class=\"spinner-container\">\r\n  <mat-spinner diameter=\"75\"></mat-spinner>\r\n</div>\r\n\r\n<ng-container *ngIf=\"showDesigner\">\r\n  <sqd-designer\r\n    *ngIf=\"isReady\"\r\n    [theme]=\"designerTheme\"\r\n    [definition]=\"definition\"\r\n    [toolboxConfiguration]=\"toolboxConfiguration\"\r\n    [stepsConfiguration]=\"stepsConfiguration\"\r\n    [validatorConfiguration]=\"validatorConfiguration\"\r\n    [controlBar]=\"true\"\r\n    [isReadonly]=\"isReadonly\"\r\n    [areEditorsHidden]=\"false\"\r\n    [rootEditor]=\"rootEditorProvider\"\r\n    [stepEditor]=\"stepEditorProvider\"\r\n    [isToolboxCollapsed]=\"isToolboxCollapsed\"\r\n    [isEditorCollapsed]=\"isEditorCollapsed\"\r\n    [undoStackSize]=\"5\"\r\n    (onReady)=\"onDesignerReady($event)\"\r\n    (onDefinitionChanged)=\"onDefinitionChanged($event)\"\r\n  >\r\n  </sqd-designer>\r\n</ng-container>\r\n\r\n<ng-template #rootEditorProvider let-editor>\r\n  <h3>Transform</h3>\r\n\r\n  <mat-form-field class=\"full-width\">\r\n    <input\r\n      matInput\r\n      name=\"Transform Name\"\r\n      [(ngModel)]=\"editor.definition.properties.name\"\r\n      [value]=\"editor.definition.properties.name\"\r\n      [readonly]=\"editor.isReadonly\"\r\n      (input)=\"\r\n        updateProperty(\r\n          editor.definition.properties,\r\n          'name',\r\n          $event,\r\n          editor.context\r\n        )\r\n      \"\r\n    />\r\n  </mat-form-field>\r\n    <!-- <mat-form-field class=\"full-width\">\r\n    <mat-label>Description</mat-label>\r\n    <textarea\r\n      matInput\r\n      name=\"Description\"\r\n      [(ngModel)]=\"editor.definition.properties.description\"\r\n      [value]=\"editor.definition.properties.description\"\r\n      [readonly]=\"editor.isReadonly\"\r\n      (input)=\"\r\n        updateProperty(\r\n          editor.definition.properties,\r\n          'description',\r\n          $event,\r\n          editor.context\r\n        )\r\n      \"\r\n    ></textarea>\r\n  </mat-form-field> -->\r\n</ng-template>\r\n\r\n<ng-template #stepEditorProvider let-editor>\r\n  <div style=\"padding: 1rem\">\r\n    <h3>{{ editor.step.name }}</h3>\r\n\r\n    <p class=\"transform-description\">{{editor.step.description}}</p>\r\n    <ng-container *ngIf=\"editor.step.type !== 'dateMath'\">\r\n      <p>Attributes</p>\r\n      <ng-container *ngFor=\"let key of objectKeys(editor.step.properties)\">\r\n        <div\r\n          *ngIf=\"isBoolean(editor.step.properties[key]); else numberCheck\"\r\n          style=\"display: block; margin-top: 1rem\"\r\n        >\r\n          <mat-slide-toggle\r\n            style=\"margin-bottom: 1rem\"\r\n            [(ngModel)]=\"editor.step.properties[key]\"\r\n            matTooltip=\"{{getHintForProperty(editor.step.type, key)}}\"\r\n            name=\"{{ key }}\"\r\n            [disabled]=\"editor.isReadonly\"\r\n            (change)=\"\r\n              updateProperty(\r\n                editor.step.properties,\r\n                key,\r\n                $event,\r\n                editor.context\r\n              )\r\n            \"\r\n          >\r\n            {{ getLabelForProperty(editor.step.type, key) }}\r\n          </mat-slide-toggle>\r\n        </div>\r\n\r\n        <!-- Number handling -->\r\n        <ng-template #numberCheck>\r\n          <div\r\n            *ngIf=\"isNumber(editor.step.properties[key], key, editor.step.type); else fieldCheck\"\r\n            style=\"display: block; margin-top: 1rem\"\r\n          >\r\n            <mat-form-field appearance=\"fill\">\r\n              <mat-label>{{ getLabelForProperty(editor.step.type, key) }}</mat-label>\r\n              <input\r\n                matInput\r\n                type=\"number\"\r\n                matTooltip=\"{{getHintForProperty(editor.step.type, key)}}\"\r\n                [(ngModel)]=\"editor.step.properties[key]\"\r\n                name=\"{{ key }}\"\r\n                [readonly]=\"editor.isReadonly\"\r\n                [required]=\"isRequired(editor.step.type, key)\"\r\n                (input)=\"\r\n                  updateNumericProperty(\r\n                    editor.step.properties,\r\n                    key,\r\n                    $event,\r\n                    editor.context\r\n                  )\r\n                \"\r\n              />\r\n              <mat-error\r\n                *ngIf=\"\r\n                  editor.step.properties[key] === null ||\r\n                  editor.step.properties[key] === undefined\r\n                \"\r\n              >\r\n                {{ key }} is required\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n        </ng-template>\r\n\r\n        <ng-template #fieldCheck>\r\n          <div\r\n            *ngIf=\"isMap(editor.step.properties[key]); else textField\"\r\n            style=\"display: block; margin-top: 1rem\"\r\n          >\r\n            <button\r\n              mat-raised-button\r\n              color=\"primary\"\r\n              (click)=\"editMap(editor.step.properties, key, editor.context)\"\r\n            >\r\n              Edit {{ key }}\r\n            </button>\r\n          </div>\r\n        </ng-template>\r\n\r\n        <ng-template #textField>\r\n          <!-- Special handling for sourceName -->\r\n          <ng-container\r\n            *ngIf=\"\r\n              key === 'sourceName' && editor.step.type === 'accountAttribute'\r\n            \"\r\n          >\r\n            <mat-form-field\r\n              appearance=\"fill\"\r\n              style=\"display: block; margin-top: 1rem\"\r\n            >\r\n              <mat-label>{{ getLabelForProperty(editor.step.type, key) }}</mat-label>\r\n              <mat-select\r\n                matTooltip=\"{{getHintForProperty(editor.step.type, key)}}\"\r\n                [(ngModel)]=\"editor.step.properties[key]\"\r\n                [disabled]=\"editor.isReadonly\"\r\n                [required]=\"isRequired(editor.step.type, key)\"\r\n                name=\"{{ key }}\"\r\n                (selectionChange)=\"\r\n                  onSourceNameChanged(\r\n                    editor.step.properties,\r\n                    key,\r\n                    $event.value,\r\n                    editor.context\r\n                  )\r\n                \"\r\n              >\r\n                <mat-option\r\n                  *ngFor=\"\r\n                    let choice of getChoicesForProperty(editor.step.type, key)\r\n                  \"\r\n                  [value]=\"choice\"\r\n                >\r\n                  {{ getChoiceLabel(editor.step.type, choice) }}\r\n                </mat-option>\r\n              </mat-select>\r\n              <mat-error *ngIf=\"editor.step.properties[key] === ''\">\r\n                {{ key }} is required\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </ng-container>\r\n\r\n          <!-- Special handling for accountAttribute -->\r\n          <ng-container\r\n            *ngIf=\"\r\n              key === 'attributeName' && editor.step.type === 'accountAttribute'\r\n            \"\r\n          >\r\n            <mat-form-field\r\n              appearance=\"fill\"\r\n              style=\"display: block; margin-top: 1rem\"\r\n            >\r\n              <mat-label>{{ getLabelForProperty(editor.step.type, key) }}</mat-label>\r\n              <mat-select\r\n                [(ngModel)]=\"editor.step.properties[key]\"\r\n                matTooltip=\"{{getHintForProperty(editor.step.type, key)}}\"\r\n                [disabled]=\"\r\n                  editor.isReadonly || isAccountAttributeDisabled(editor)\r\n                \"\r\n                [required]=\"isRequired(editor.step.type, key)\"\r\n                name=\"{{ key }}\"\r\n                (selectionChange)=\"\r\n                  updateProperty(\r\n                    editor.step.properties,\r\n                    key,\r\n                    $event.value,\r\n                    editor.context\r\n                  )\r\n                \"\r\n              >\r\n                <!-- Fixed: Use attr directly as both value and display text -->\r\n                <mat-option\r\n                  *ngFor=\"let attr of getAccountAttributes(editor)\"\r\n                  [value]=\"attr\"\r\n                >\r\n                  {{ attr }}\r\n                </mat-option>\r\n              </mat-select>\r\n              <mat-hint *ngIf=\"isLoadingAccountAttributes(editor)\"\r\n                >Loading attributes...</mat-hint\r\n              >\r\n              <mat-hint\r\n                *ngIf=\"\r\n                  !editor.step.properties['sourceName'] &&\r\n                  !isLoadingAccountAttributes(editor)\r\n                \"\r\n              >\r\n                Please select a source name first\r\n              </mat-hint>\r\n              <mat-error *ngIf=\"editor.step.properties[key] === ''\">\r\n                {{ key }} is required\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </ng-container>\r\n\r\n          <!-- For getReferenceIdentityAttribute: text input -->\r\n          <ng-container\r\n            *ngIf=\"\r\n              key === 'attributeName' &&\r\n              editor.step.type === 'getReferenceIdentityAttribute'\r\n            \"\r\n          >\r\n            <mat-form-field\r\n              appearance=\"fill\"\r\n              style=\"display: block; margin-top: 1rem\"\r\n            >\r\n              <mat-label>{{ getLabelForProperty(editor.step.type, key) }}</mat-label>\r\n              <input\r\n                matInput\r\n                matTooltip=\"{{getHintForProperty(editor.step.type, key)}}\"\r\n                [(ngModel)]=\"editor.step.properties[key]\"\r\n                [readonly]=\"editor.isReadonly\"\r\n                [required]=\"isRequired(editor.step.type, key)\"\r\n                name=\"{{ key }}\"\r\n                (input)=\"\r\n                  updateProperty(\r\n                    editor.step.properties,\r\n                    key,\r\n                    $event,\r\n                    editor.context\r\n                  )\r\n                \"\r\n              />\r\n              <mat-error *ngIf=\"editor.step.properties[key] === ''\">\r\n                {{ key }} is required\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </ng-container>\r\n\r\n          <ng-container\r\n            *ngIf=\"key === 'inputFormat' && editor.step.type === 'dateFormat'\"\r\n          >\r\n            <!-- Help section with common patterns -->\r\n\r\n            <mat-form-field\r\n              appearance=\"fill\"\r\n              style=\"display: block; margin-top: 1rem\"\r\n            >\r\n              <mat-label>{{ getLabelForProperty(editor.step.type, key) }}</mat-label>\r\n              <mat-select\r\n                matTooltip=\"{{getHintForProperty(editor.step.type, key)}}\"\r\n                [(ngModel)]=\"editor.step.properties[key]\"\r\n                [disabled]=\"editor.isReadonly\"\r\n                [required]=\"isRequired(editor.step.type, key)\"\r\n                name=\"{{ key }}\"\r\n                (selectionChange)=\"\r\n                  updateProperty(\r\n                    editor.step.properties,\r\n                    key,\r\n                    $event.value,\r\n                    editor.context\r\n                  )\r\n                \"\r\n              >\r\n                <mat-option\r\n                  *ngFor=\"\r\n                    let choice of getChoicesForProperty(editor.step.type, key)\r\n                  \"\r\n                  [value]=\"choice\"\r\n                >\r\n                  {{ getChoiceLabel(editor.step.type, choice) }}\r\n                </mat-option>\r\n              </mat-select>\r\n              <mat-error *ngIf=\"editor.step.properties[key] === ''\">\r\n                {{ key }} is required\r\n              </mat-error>\r\n            </mat-form-field>\r\n\r\n            <!-- Custom Input Format Field -->\r\n            <div\r\n              *ngIf=\"editor.step.properties['inputFormat'] === 'CUSTOM'\"\r\n              style=\"margin-top: 0.5rem\"\r\n            >\r\n              <mat-form-field appearance=\"fill\" style=\"width: 100%\">\r\n                <mat-label>Custom Input Format</mat-label>\r\n                <input\r\n                  matInput\r\n                  [(ngModel)]=\"editor.step.properties['customInputFormat']\"\r\n                  [readonly]=\"editor.isReadonly\"\r\n                  [required]=\"true\"\r\n                  placeholder=\"e.g., yyyy-MM-dd HH:mm:ss\"\r\n                  (input)=\"\r\n                    updateProperty(\r\n                      editor.step.properties,\r\n                      'customInputFormat',\r\n                      $event,\r\n                      editor.context\r\n                    )\r\n                  \"\r\n                />\r\n                <mat-error\r\n                  *ngIf=\"editor.step.properties['customInputFormat'] === ''\"\r\n                >\r\n                  Custom input format is required when using CUSTOM\r\n                </mat-error>\r\n              </mat-form-field>\r\n\r\n              <!-- Preview for custom input format -->\r\n              <div\r\n                *ngIf=\"editor.step.properties['customInputFormat']\"\r\n                style=\"\r\n                  margin-top: 0.5rem;\r\n                  padding: 0.5rem;\r\n                  background: #f5f5f5;\r\n                  border-radius: 4px;\r\n                  font-size: 0.875rem;\r\n                \"\r\n              >\r\n                {{\r\n                  getDateFormatExample(\r\n                    editor.step.properties[\"customInputFormat\"]\r\n                  )\r\n                }}\r\n              </div>\r\n            </div>\r\n          </ng-container>\r\n\r\n          <!-- Output Format handling -->\r\n          <ng-container\r\n            *ngIf=\"key === 'outputFormat' && editor.step.type === 'dateFormat'\"\r\n          >\r\n            <!-- Check if it's a choice field first -->\r\n            <mat-form-field\r\n              appearance=\"fill\"\r\n              style=\"display: block; margin-top: 1rem\"\r\n            >\r\n              <mat-label>{{ getLabelForProperty(editor.step.type, key) }}</mat-label>\r\n              <mat-select\r\n                matTooltip=\"{{getHintForProperty(editor.step.type, key)}}\"\r\n                [(ngModel)]=\"editor.step.properties[key]\"\r\n                [disabled]=\"editor.isReadonly\"\r\n                [required]=\"isRequired(editor.step.type, key)\"\r\n                name=\"{{ key }}\"\r\n                (selectionChange)=\"\r\n                  updateProperty(\r\n                    editor.step.properties,\r\n                    key,\r\n                    $event.value,\r\n                    editor.context\r\n                  )\r\n                \"\r\n              >\r\n                <mat-option\r\n                  *ngFor=\"\r\n                    let choice of getChoicesForProperty(editor.step.type, key)\r\n                  \"\r\n                  [value]=\"choice\"\r\n                >\r\n                  {{ getChoiceLabel(editor.step.type, choice) }}\r\n                </mat-option>\r\n              </mat-select>\r\n              <mat-error *ngIf=\"editor.step.properties[key] === ''\">\r\n                {{ key }} is required\r\n              </mat-error>\r\n            </mat-form-field>\r\n\r\n            <!-- Custom Output Format Field -->\r\n            <div\r\n              *ngIf=\"editor.step.properties['outputFormat'] === 'CUSTOM'\"\r\n              style=\"margin-top: 0.5rem\"\r\n            >\r\n              <mat-form-field appearance=\"fill\" style=\"width: 100%\">\r\n                <mat-label>Custom Output Format</mat-label>\r\n                <input\r\n                  matInput\r\n                  matTooltip=\"{{getHintForProperty(editor.step.type, key)}}\"\r\n                  [(ngModel)]=\"editor.step.properties['customOutputFormat']\"\r\n                  [readonly]=\"editor.isReadonly\"\r\n                  [required]=\"true\"\r\n                  placeholder=\"e.g., dd/MM/yyyy HH:mm\"\r\n                  (input)=\"\r\n                    updateProperty(\r\n                      editor.step.properties,\r\n                      'customOutputFormat',\r\n                      $event,\r\n                      editor.context\r\n                    )\r\n                  \"\r\n                />\r\n                <mat-hint\r\n                  >Use Java SimpleDateFormat pattern (e.g., dd/MM/yyyy, MMM dd,\r\n                  yyyy)</mat-hint\r\n                >\r\n                <mat-error\r\n                  *ngIf=\"editor.step.properties['customOutputFormat'] === ''\"\r\n                >\r\n                  Custom output format is required when using CUSTOM\r\n                </mat-error>\r\n              </mat-form-field>\r\n\r\n              <!-- Preview for custom output format -->\r\n              <div\r\n                *ngIf=\"editor.step.properties['customOutputFormat']\"\r\n                style=\"\r\n                  margin-top: 0.5rem;\r\n                  padding: 0.5rem;\r\n                  background: #f5f5f5;\r\n                  border-radius: 4px;\r\n                  font-size: 0.875rem;\r\n                \"\r\n              >\r\n                <strong>Example:</strong>\r\n                {{\r\n                  getDateFormatExample(\r\n                    editor.step.properties[\"customOutputFormat\"]\r\n                  )\r\n                }}\r\n              </div>\r\n            </div>\r\n            <div\r\n              *ngIf=\"\r\n                editor.step.properties['inputFormat'] === 'CUSTOM' ||\r\n                editor.step.properties['outputFormat'] === 'CUSTOM'\r\n              \"\r\n              style=\"\r\n                margin-top: 1rem;\r\n                margin-bottom: 1rem;\r\n                padding: 1rem;\r\n                background: #e3f2fd;\r\n                border-radius: 4px;\r\n                border-left: 4px solid #2196f3;\r\n              \"\r\n            >\r\n              <h4\r\n                style=\"\r\n                  margin: 0 0 0.5rem 0;\r\n                  color: #1976d2;\r\n                  font-size: 0.875rem;\r\n                \"\r\n              >\r\n                Common Date Format Patterns\r\n              </h4>\r\n              <div style=\"font-size: 0.75rem; color: #424242\">\r\n                <div><code>yyyy-MM-dd</code> \u2192 2024-03-15</div>\r\n                <div><code>MM/dd/yyyy</code> \u2192 03/15/2024</div>\r\n                <div><code>dd/MM/yyyy</code> \u2192 15/03/2024</div>\r\n                <div><code>MMM dd, yyyy</code> \u2192 Mar 15, 2024</div>\r\n                <div>\r\n                  <code>yyyy-MM-dd HH:mm:ss</code> \u2192 2024-03-15 14:30:45\r\n                </div>\r\n                <div><code>HH:mm:ss</code> \u2192 14:30:45</div>\r\n              </div>\r\n            </div>\r\n          </ng-container>\r\n\r\n          <!-- Default handling for other properties -->\r\n          <ng-container\r\n            *ngIf=\"\r\n              key !== 'sourceName' &&\r\n              key !== 'attributeName' &&\r\n              key !== 'inputFormat' &&\r\n              key !== 'outputFormat' &&\r\n              key !== 'customInputFormat' &&\r\n              key !== 'customOutputFormat'\r\n            \"\r\n          >\r\n            <ng-container\r\n              *ngIf=\"\r\n                getChoicesForProperty(editor.step.type, key) as choices;\r\n                else defaultInput\r\n              \"\r\n            >\r\n              <mat-form-field\r\n                appearance=\"fill\"\r\n                style=\"display: block; margin-top: 1rem\"\r\n              >\r\n              <mat-label>{{ getLabelForProperty(editor.step.type, key) }}</mat-label>\r\n                <mat-select\r\n                  matTooltip=\"{{getHintForProperty(editor.step.type, key)}}\"\r\n                  [(ngModel)]=\"editor.step.properties[key]\"\r\n                  [disabled]=\"editor.isReadonly\"\r\n                  [required]=\"isRequired(editor.step.type, key)\"\r\n                  name=\"{{ key }}\"\r\n                  (selectionChange)=\"\r\n                    updateProperty(\r\n                      editor.step.properties,\r\n                      key,\r\n                      $event.value,\r\n                      editor.context\r\n                    )\r\n                  \"\r\n                >\r\n                  <mat-option *ngFor=\"let choice of choices\" [value]=\"choice\">{{\r\n                    getChoiceLabel(editor.step.type, choice)\r\n                  }}</mat-option>\r\n                </mat-select>\r\n                <mat-error *ngIf=\"editor.step.properties[key] === ''\">\r\n                  {{ key }} is required\r\n                </mat-error>\r\n              </mat-form-field>\r\n            </ng-container>\r\n\r\n            \r\n            <ng-template #defaultInput>\r\n              <div class=\"input-with-editor-container\">\r\n                <mat-form-field\r\n                  appearance=\"outline\"\r\n                  class=\"input-field\">\r\n                  <mat-label>{{ getLabelForProperty(editor.step.type, key) }}</mat-label>\r\n                  <input\r\n                    matInput\r\n                    matTooltip=\"{{getHintForProperty(editor.step.type, key)}}\"\r\n                    [(ngModel)]=\"editor.step.properties[key]\"\r\n                    name=\"{{ key }}\"\r\n                    [readonly]=\"editor.isReadonly\"\r\n                    [required]=\"isRequired(editor.step.type, key)\"\r\n                    (input)=\"\r\n                      updateProperty(\r\n                        editor.step.properties,\r\n                        key,\r\n                        $event,\r\n                        editor.context\r\n                      )\r\n                    \"\r\n                  />\r\n                  <mat-error *ngIf=\"editor.step.properties[key] === ''\">\r\n                    {{ key }} is required\r\n                  </mat-error>\r\n                </mat-form-field>\r\n                \r\n                <button\r\n                  mat-icon-button\r\n                  color=\"primary\"\r\n                  class=\"editor-button\"\r\n                  [disabled]=\"editor.isReadonly\"\r\n                  (click)=\"openVelocityEditor(editor.step.properties, key, $event, editor.context)\"\r\n                  matTooltip=\"Open Code Editor\"\r\n                >\r\n                  <mat-icon>code</mat-icon>\r\n                </button>\r\n              </div>\r\n            </ng-template>\r\n          </ng-container>\r\n\r\n          <!-- Enhanced Date Math Section for stepEditorProvider template -->\r\n          <!-- This should be added to handle dateMath steps specifically -->\r\n        </ng-template>\r\n      </ng-container>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"editor.step.type === 'dateMath'\">\r\n      <!-- Toggle between builder and manual input -->\r\n      <div style=\"margin-top: 1rem\">\r\n        <mat-slide-toggle\r\n          [(ngModel)]=\"editor.step.properties.useBuilder\"\r\n          [disabled]=\"editor.isReadonly\"\r\n          (change)=\"\r\n            onDateMathBuilderToggle(\r\n              editor.step.properties,\r\n              $event.checked,\r\n              editor.context\r\n            )\r\n          \"\r\n        >\r\n          Use Visual Expression Builder\r\n        </mat-slide-toggle>\r\n      </div>\r\n\r\n      <!-- Visual Builder Mode -->\r\n      <div *ngIf=\"editor.step.properties.useBuilder\" style=\"margin-top: 1rem\">\r\n        <!-- Base Date Selection -->\r\n        <mat-form-field\r\n          appearance=\"fill\"\r\n          style=\"display: block; margin-top: 1rem\"\r\n        >\r\n          <mat-label>Base Date</mat-label>\r\n          <mat-select\r\n            [(ngModel)]=\"editor.step.properties.baseDate\"\r\n            [disabled]=\"editor.isReadonly\"\r\n            (selectionChange)=\"\r\n              updateDateMathExpression(editor.step.properties, editor.context)\r\n            \"\r\n          >\r\n            <mat-option value=\"input\">Use Input Date</mat-option>\r\n            <mat-option value=\"now\">Use Current Date/Time</mat-option>\r\n          </mat-select>\r\n          <mat-hint>\r\n            <ng-container *ngIf=\"editor.step.properties.baseDate === 'input'\">\r\n              Start with the date provided as input to this transform\r\n            </ng-container>\r\n            <ng-container *ngIf=\"editor.step.properties.baseDate === 'now'\">\r\n              Start with the current date and time\r\n            </ng-container>\r\n          </mat-hint>\r\n        </mat-form-field>\r\n\r\n        <!-- Operations Builder -->\r\n        <div style=\"margin-top: 1rem\">\r\n          <h4 style=\"margin: 0.5rem 0; color: #424242\">Date/Time Operations</h4>\r\n\r\n          <!-- Existing Operations -->\r\n          <div\r\n            *ngFor=\"\r\n              let operation of getDateMathOperations(editor.step.properties);\r\n              let i = index\r\n            \"\r\n            style=\"\r\n              display: flex;\r\n              align-items: center;\r\n              gap: 0.5rem;\r\n              margin-bottom: 0.5rem;\r\n              padding: 0.5rem;\r\n              border: 1px solid #ddd;\r\n              border-radius: 4px;\r\n            \"\r\n          >\r\n            <!-- Operation Type -->\r\n            <mat-form-field appearance=\"outline\" style=\"flex: 0 0 120px\">\r\n              <mat-label>Operation</mat-label>\r\n              <mat-select\r\n                [ngModel]=\"operation.operation\" (ngModelChange)=\"operation.operation = $event\"\r\n                [disabled]=\"editor.isReadonly\"\r\n                (selectionChange)=\"\r\n                  updateDateMathOperationAt(\r\n                    editor.step.properties,\r\n                    i,\r\n                    'operation',\r\n                    $event.value,\r\n                    editor.context\r\n                  )\r\n                \"\r\n              >\r\n                <mat-option value=\"+\">Add</mat-option>\r\n                <mat-option value=\"-\">Subtract</mat-option>\r\n                <mat-option value=\"/\">Round to</mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n\r\n            <!-- Value (only for + and -) -->\r\n            <mat-form-field\r\n              appearance=\"outline\"\r\n              style=\"flex: 0 0 80px\"\r\n              *ngIf=\"operation.operation !== '/' && operation.operation !== undefined\"\r\n            >\r\n              <mat-label>Value</mat-label>\r\n              <input\r\n                matInput\r\n                type=\"number\"\r\n                min=\"1\"\r\n                [ngModel]=\"operation.value\" (ngModelChange)=\"operation.value = $event\"\r\n                [readonly]=\"editor.isReadonly\"\r\n                (input)=\"\r\n                  updateDateMathOperationAt(\r\n                    editor.step.properties,\r\n                    i,\r\n                    'value',\r\n                    $event,\r\n                    editor.context\r\n                  )\r\n                \"\r\n              />\r\n            </mat-form-field>\r\n\r\n            <!-- Unit -->\r\n            <mat-form-field appearance=\"outline\" style=\"flex: 0 0 120px\">\r\n              <mat-label>Unit</mat-label>\r\n              <mat-select\r\n                [ngModel]=\"operation.unit\" (ngModelChange)=\"operation.unit = $event\"\r\n                [disabled]=\"editor.isReadonly\"\r\n                (selectionChange)=\"\r\n                  updateDateMathOperationAt(\r\n                    editor.step.properties,\r\n                    i,\r\n                    'unit',\r\n                    $event.value,\r\n                    editor.context\r\n                  )\r\n                \"\r\n              >\r\n                <mat-option value=\"y\">Years</mat-option>\r\n                <mat-option value=\"M\">Months</mat-option>\r\n                <mat-option value=\"w\">Weeks</mat-option>\r\n                <mat-option value=\"d\">Days</mat-option>\r\n                <mat-option value=\"h\">Hours</mat-option>\r\n                <mat-option value=\"m\">Minutes</mat-option>\r\n                <mat-option value=\"s\">Seconds</mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n\r\n            <!-- Remove Operation -->\r\n            <button\r\n              mat-icon-button\r\n              color=\"warn\"\r\n              [disabled]=\"editor.isReadonly\"\r\n              (click)=\"\r\n                removeDateMathOperation(\r\n                  editor.step.properties,\r\n                  i,\r\n                  editor.context\r\n                )\r\n              \"\r\n              matTooltip=\"Remove operation\"\r\n            >\r\n              <mat-icon>delete</mat-icon>\r\n            </button>\r\n          </div>\r\n\r\n          <!-- Add Operation Button -->\r\n          <button\r\n            mat-stroked-button\r\n            color=\"primary\"\r\n            [disabled]=\"editor.isReadonly\"\r\n            (click)=\"\r\n              addDateMathOperation(editor.step.properties, editor.context)\r\n            \"\r\n            style=\"margin-top: 0.5rem\"\r\n          >\r\n            <mat-icon>add</mat-icon>\r\n            Add Operation\r\n          </button>\r\n        </div>\r\n\r\n        <!-- Generated Expression Preview -->\r\n        <div\r\n          style=\"\r\n            margin-top: 1rem;\r\n            padding: 1rem;\r\n            background: #f5f5f5;\r\n            border-radius: 4px;\r\n            border-left: 4px solid #4caf50;\r\n          \"\r\n        >\r\n          <h4 style=\"margin: 0 0 0.5rem 0; color: #2e7d32\">\r\n            Generated Expression\r\n          </h4>\r\n          <code style=\"font-size: 1rem; color: #1565c0\">{{\r\n            getGeneratedExpression(editor.step.properties)\r\n          }}</code>\r\n          <div style=\"margin-top: 0.5rem; font-size: 0.875rem; color: #666\">\r\n            {{ getExpressionDescription(editor.step.properties) }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Manual Expression Mode -->\r\n      <div *ngIf=\"!editor.step.properties.useBuilder\" style=\"margin-top: 1rem\">\r\n        <mat-form-field appearance=\"fill\" style=\"display: block; width: 100%\">\r\n          <mat-label>Date Math Expression</mat-label>\r\n          <input\r\n            matInput\r\n            [(ngModel)]=\"editor.step.properties.expression\"\r\n            [readonly]=\"editor.isReadonly\"\r\n            [required]=\"true\"\r\n            placeholder=\"e.g., now+1w, +3M, now/d\"\r\n            (input)=\"\r\n              updateProperty(\r\n                editor.step.properties,\r\n                'expression',\r\n                $event,\r\n                editor.context\r\n              )\r\n            \"\r\n          />\r\n          <mat-hint>Enter a date math expression manually</mat-hint>\r\n          <mat-error *ngIf=\"editor.step.properties.expression === ''\">\r\n            Expression is required\r\n          </mat-error>\r\n        </mat-form-field>\r\n\r\n        <!-- Examples and Help -->\r\n        <div\r\n          style=\"\r\n            margin-top: 1rem;\r\n            padding: 1rem;\r\n            background: #e3f2fd;\r\n            border-radius: 4px;\r\n            border-left: 4px solid #2196f3;\r\n          \"\r\n        >\r\n          <h4 style=\"margin: 0 0 0.5rem 0; color: #1976d2\">\r\n            Expression Examples\r\n          </h4>\r\n          <div style=\"font-size: 0.875rem; color: #424242\">\r\n            <div style=\"margin-bottom: 0.25rem\">\r\n              <code>now</code> - Current date and time\r\n            </div>\r\n            <div style=\"margin-bottom: 0.25rem\">\r\n              <code>now/h</code> - Current time rounded to the hour\r\n            </div>\r\n            <div style=\"margin-bottom: 0.25rem\">\r\n              <code>now+1w</code> - One week from now\r\n            </div>\r\n            <div style=\"margin-bottom: 0.25rem\">\r\n              <code>+3M</code> - Add 3 months to input date\r\n            </div>\r\n            <div style=\"margin-bottom: 0.25rem\">\r\n              <code>-1d</code> - Subtract 1 day from input date\r\n            </div>\r\n            <div style=\"margin-bottom: 0.25rem\">\r\n              <code>/d</code> - Round input date to start of day\r\n            </div>\r\n            <div><code>now+1y+1M+2d-4h/s</code> - Complex calculation</div>\r\n          </div>\r\n\r\n          <div style=\"margin-top: 1rem; font-size: 0.75rem; color: #666\">\r\n            <strong>Units:</strong> y=years, M=months, w=weeks, d=days, h=hours,\r\n            m=minutes, s=seconds<br />\r\n            <strong>Operations:</strong> +=add, -=subtract, /=round to\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Round Up Option -->\r\n      <div style=\"margin-top: 1rem\">\r\n        <mat-slide-toggle\r\n            matTooltip=\"{{getHintForProperty(editor.step.type, 'roundUp')}}\"\r\n          [(ngModel)]=\"editor.step.properties.roundUp\"\r\n          [disabled]=\"editor.isReadonly\"\r\n          (change)=\"\r\n            updateProperty(\r\n              editor.step.properties,\r\n              'roundUp',\r\n              $event,\r\n              editor.context\r\n            )\r\n          \"\r\n        >\r\n          Round Up\r\n        </mat-slide-toggle>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <div *ngIf=\"editor?.step?.branches\">\r\n      <div\r\n        *ngFor=\"\r\n          let branchName of getBranchNames(editor.step.branches);\r\n          let i = index\r\n        \"\r\n        class=\"branch-row\"\r\n      >\r\n        <div *ngIf=\"showBranch(editor?.step, branchName)\">\r\n          <mat-form-field appearance=\"outline\" class=\"branch-field\">\r\n            <input\r\n              matInput\r\n              [value]=\"branchName\"\r\n              [readonly]=\"editor.isReadonly\"\r\n              placeholder=\"Branch Name\"\r\n              (change)=\"\r\n                renameBranchAtIndex(\r\n                  editor.step.branches,\r\n                  branchName,\r\n                  $any($event.target).value,\r\n                  editor.context\r\n                )\r\n              \"\r\n            />\r\n          </mat-form-field>\r\n          <button\r\n            mat-icon-button\r\n            color=\"warn\"\r\n            (click)=\"\r\n              removeBranch(editor.step.branches, i, $event, editor.context)\r\n            \"\r\n          >\r\n            <mat-icon>delete</mat-icon>\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <button\r\n        mat-stroked-button\r\n        color=\"primary\"\r\n        (click)=\"addBranch(editor.step.branches, editor.context)\"\r\n        *ngIf=\"branchingEnabled(editor.step)\"\r\n      >\r\n        <mat-icon>add</mat-icon>\r\n        Add Branch\r\n      </button>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n", styles: [".sqd-designer{position:relative;display:flex;width:100%;height:100%}.sqd-designer,.sqd-drag,.sqd-context-menu{font-size:13px;line-height:1em}.sqd-hidden{display:none!important}.sqd-disabled{opacity:.25}.sqd-toolbox,.sqd-toolbox-filter-input{font-size:11px;line-height:1.2em}.sqd-toolbox{position:absolute;top:10px;left:10px;z-index:20;box-sizing:border-box;width:130px;-webkit-user-select:none;user-select:none}.sqd-toolbox-header{position:relative;padding:15px 10px;cursor:pointer}.sqd-toolbox-header-title{display:block;font-size:1.2em;line-height:1em;font-weight:700}.sqd-toolbox-toggle-icon{position:absolute;top:50%;right:10px;width:16px;height:16px;margin:-8px 0 0}.sqd-toolbox-header:hover .sqd-toolbox-toggle-icon{opacity:.6}.sqd-scrollbox{position:relative;overflow:hidden}.sqd-scrollbox-body{position:absolute;top:0;left:0;width:100%;box-sizing:border-box;padding:0 10px}.sqd-toolbox-filter{padding:0 10px 10px}.sqd-toolbox-filter-input{display:block;box-sizing:border-box;padding:6px 8px;outline:none;width:100%}.sqd-toolbox-group-title{text-align:center;padding:5px 0;margin:0 0 10px;width:100%}.sqd-toolbox-item{position:relative;box-sizing:border-box;margin:0 0 10px;width:100%;cursor:move}.sqd-toolbox-item-icon{position:absolute;top:50%;left:5px;margin-top:-10px;width:20px;height:20px}.sqd-toolbox-item-icon-image{width:100%;height:100%}.sqd-toolbox-item-text{position:relative;display:block;padding:10px 10px 10px 30px;white-space:nowrap;text-overflow:ellipsis;overflow:hidden}.sqd-drag{position:absolute;z-index:9999999;pointer-events:none}.sqd-control-bar{position:absolute;bottom:10px;left:10px;z-index:20;padding:8px 0 8px 8px;white-space:nowrap}.sqd-control-bar-button{display:inline-block;width:32px;height:32px;margin-right:8px;cursor:pointer;box-sizing:border-box}.sqd-control-bar-button-icon{width:24px;height:24px;margin:3px 0 0 3px}.sqd-control-bar-button.sqd-disabled .sqd-control-bar-button-icon{opacity:.2}.sqd-smart-editor-toggle{position:absolute;top:0;z-index:29;width:36px;height:64px;border-bottom-left-radius:10px;cursor:pointer}.sqd-smart-editor-toggle-icon{position:absolute;top:50%;left:50%;width:24px;height:24px;margin:-12px 0 0 -12px}.sqd-smart-editor-toggle:hover .sqd-smart-editor-toggle-icon{opacity:.6}.sqd-smart-editor{z-index:30}.sqd-layout-desktop .sqd-smart-editor{position:relative;width:300px}.sqd-layout-desktop .sqd-smart-editor-toggle{right:300px}.sqd-layout-desktop .sqd-smart-editor-toggle.sqd-collapsed{right:0}.sqd-layout-mobile .sqd-smart-editor{position:absolute;inset:0 0 0 41px}.sqd-layout-mobile .sqd-smart-editor-toggle{left:5px}.sqd-layout-mobile .sqd-smart-editor-toggle.sqd-collapsed{left:auto;right:0}.sqd-context-menu{position:absolute;z-index:2000000000;overflow:hidden;padding:5px}.sqd-context-menu-group,.sqd-context-menu-item{width:130px;padding:8px 10px;white-space:nowrap;text-overflow:ellipsis;overflow:hidden}.sqd-context-menu-group{font-size:11px;line-height:1em}.sqd-context-menu-item{cursor:pointer;transition:background 70ms}.sqd-workspace{flex:1;position:relative;display:block;-webkit-user-select:none;user-select:none}.sqd-workspace-canvas{position:absolute;top:0;left:0;cursor:move}.sqd-label-text{text-anchor:middle;dominant-baseline:central}.sqd-placeholder .sqd-placeholder-rect{transition:fill .1s}.sqd-step-task-text{text-anchor:left;dominant-baseline:central}.sqd-theme-light .sqd-toolbox{background:#fff;box-shadow:0 0 8px #00000026,0 2px 4px #00000026;border:none;border-radius:10px}.sqd-theme-light .sqd-toolbox-header-title{color:#000}.sqd-theme-light .sqd-toolbox-filter-input{background:#fff;color:#000;border:1px solid #c3c3c3;border-radius:10px}.sqd-theme-light .sqd-toolbox-filter-input:focus{border-color:#939393}.sqd-theme-light .sqd-toolbox-group-title{color:#000;background:#e5e5e5;border-radius:10px}.sqd-theme-light .sqd-toolbox-item{color:#000;border:1px solid #c3c3c3;box-shadow:0 2px 2px #00000026;background:#fff;border-radius:5px}.sqd-theme-light .sqd-toolbox-item:hover{border-color:#939393;background:#fff}.sqd-theme-light .sqd-toolbox-item .sqd-toolbox-item-icon.sqd-no-icon{background:#c6c6c6;border-radius:4px}.sqd-theme-light .sqd-control-bar{background:#fff;box-shadow:0 0 8px #00000026,0 2px 4px #00000026;border:none;border-radius:10px}.sqd-theme-light .sqd-control-bar-button{border:1px solid #c3c3c3;background:#fff;border-radius:5px}.sqd-theme-light .sqd-control-bar-button:hover{border-color:#939393;background:#fff}.sqd-theme-light .sqd-control-bar-button .sqd-icon-path{fill:#000}.sqd-theme-light .sqd-control-bar-button.sqd-delete .sqd-icon-path{fill:#e01a24}.sqd-theme-light .sqd-smart-editor,.sqd-theme-light .sqd-smart-editor-toggle{background:#fff;box-shadow:0 0 8px #00000026}.sqd-theme-light.sqd-context-menu{background:#fff;box-shadow:0 0 8px #0003;border:none;border-radius:4px}.sqd-theme-light .sqd-context-menu-group{color:#888}.sqd-theme-light .sqd-context-menu-item{color:#000;border-radius:4px}.sqd-theme-light .sqd-context-menu-item:hover{background:#eee}.sqd-theme-light.sqd-designer{background:#f9f9f9}.sqd-theme-light .sqd-line-grid-path{stroke:#e3e3e3;stroke-width:1}.sqd-theme-light .sqd-join{stroke-width:2;stroke:#000}.sqd-theme-light .sqd-region{stroke:#cecece;stroke-width:2;stroke-dasharray:3}.sqd-theme-light .sqd-region.sqd-selected{stroke:#ed4800;stroke-width:2;stroke-dasharray:0}.sqd-theme-light .sqd-placeholder .sqd-placeholder-rect{fill:#d8d8d8;stroke:#6a6a6a;stroke-width:1;stroke-dasharray:3}.sqd-theme-light .sqd-placeholder.sqd-hover .sqd-placeholder-rect{fill:#ed4800}.sqd-theme-light .sqd-placeholder-icon-path{fill:#2b2b2b}.sqd-theme-light .sqd-placeholder.sqd-hover .sqd-placeholder-icon-path{fill:#fff}.sqd-theme-light .sqd-validation-error{fill:#ffa200}.sqd-theme-light .sqd-validation-error-icon-path{fill:#000}.sqd-theme-light .sqd-root-start-stop-circle{fill:#2c18df}.sqd-theme-light .sqd-root-start-stop-icon{fill:#fff}.sqd-theme-light .sqd-step-task .sqd-step-task-rect{fill:#fff;stroke-width:1;stroke:#c3c3c3;filter:drop-shadow(0 1.5px 1.5px rgba(0,0,0,.15))}.sqd-theme-light .sqd-step-task .sqd-step-task-rect.sqd-selected{stroke:#ed4800;stroke-width:2}.sqd-theme-light .sqd-step-task .sqd-step-task-text{fill:#000}.sqd-theme-light .sqd-step-task .sqd-step-task-empty-icon{fill:#c6c6c6}.sqd-theme-light .sqd-step-task .sqd-input{fill:#fff;stroke-width:2;stroke:#000}.sqd-theme-light .sqd-step-task .sqd-output{fill:#000;stroke-width:0}.sqd-theme-light .sqd-step-switch>.sqd-label-primary>.sqd-label-text{fill:#fff}.sqd-theme-light .sqd-step-switch>.sqd-label-primary>.sqd-label-rect{fill:#2411db;stroke-width:0}.sqd-theme-light .sqd-step-switch>.sqd-label-secondary>.sqd-label-rect{fill:#000;stroke-width:0}.sqd-theme-light .sqd-step-switch>.sqd-label-secondary>.sqd-label-text{fill:#fff}.sqd-theme-light .sqd-step-switch>g>.sqd-input{fill:#fff;stroke-width:2;stroke:#000}.sqd-theme-light .sqd-step-container>.sqd-label>.sqd-label-text{fill:#fff}.sqd-theme-light .sqd-step-container>.sqd-label>.sqd-label-rect{fill:#2411db;stroke-width:0}.sqd-theme-light .sqd-step-container>g>.sqd-input{fill:#fff;stroke-width:2;stroke:#000}.sqd-theme-dark .sqd-toolbox{background:#3f3f3f;box-shadow:none;border:none;border-radius:10px}.sqd-theme-dark .sqd-toolbox-header-title{color:#fff}.sqd-theme-dark .sqd-toolbox-filter-input{background:#242424;color:#fff;border:none;border-radius:10px}.sqd-theme-dark .sqd-toolbox-filter-input:focus{border-color:#939393}.sqd-theme-dark .sqd-toolbox-group-title{color:#fff;background:#242424;border-radius:10px}.sqd-theme-dark .sqd-toolbox-item{color:#000;border:none;box-shadow:none;background:#c6c6c6;border-radius:5px}.sqd-theme-dark .sqd-toolbox-item:hover{border-color:none;background:#d3d3d3}.sqd-theme-dark .sqd-toolbox-item .sqd-toolbox-item-icon.sqd-no-icon{background:#c6c6c6;border-radius:4px}.sqd-theme-dark .sqd-control-bar{background:#3f3f3f;box-shadow:none;border:none;border-radius:10px}.sqd-theme-dark .sqd-control-bar-button{border:none;background:#c6c6c6;border-radius:5px}.sqd-theme-dark .sqd-control-bar-button:hover{border-color:#939393;background:#d3d3d3}.sqd-theme-dark .sqd-control-bar-button .sqd-icon-path{fill:#000}.sqd-theme-dark .sqd-control-bar-button.sqd-delete .sqd-icon-path{fill:#e01a24}.sqd-theme-dark .sqd-smart-editor{background:#3f3f3f;box-shadow:none}.sqd-theme-dark .sqd-smart-editor-toggle{background:#6f6f6f;box-shadow:none}.sqd-theme-dark.sqd-context-menu{background:#3f3f3f;box-shadow:0 0 8px #0003;border:none;border-radius:4px}.sqd-theme-dark .sqd-context-menu-group{color:#ccc}.sqd-theme-dark .sqd-context-menu-item{color:#fff;border-radius:4px}.sqd-theme-dark .sqd-context-menu-item:hover{background:#525252}.sqd-theme-dark.sqd-designer{background:#1f1f1f}.sqd-theme-dark .sqd-line-grid-path{stroke:#2a2a2a;stroke-width:1}.sqd-theme-dark .sqd-join{stroke-width:2;stroke:#707070}.sqd-theme-dark .sqd-region{stroke:#434343;stroke-width:2;stroke-dasharray:3}.sqd-theme-dark .sqd-region.sqd-selected{stroke:#fff;stroke-width:2;stroke-dasharray:0}.sqd-theme-dark .sqd-placeholder .sqd-placeholder-rect{fill:#0e0e0e;stroke:#6a6a6a;stroke-width:1;stroke-dasharray:3}.sqd-theme-dark .sqd-placeholder.sqd-hover .sqd-placeholder-rect{fill:#ed4800}.sqd-theme-dark .sqd-placeholder-icon-path{fill:#2b2b2b}.sqd-theme-dark .sqd-placeholder.sqd-hover .sqd-placeholder-icon-path{fill:#fff}.sqd-theme-dark .sqd-validation-error{fill:#ffa200}.sqd-theme-dark .sqd-validation-error-icon-path{fill:#000}.sqd-theme-dark .sqd-root-start-stop-circle{fill:#2c18df}.sqd-theme-dark .sqd-root-start-stop-icon{fill:#fff}.sqd-theme-dark .sqd-step-task .sqd-step-task-rect{fill:#c6c6c6;stroke-width:1;stroke:none;filter:drop-shadow(0 1.5px 1.5px rgba(0,0,0,.15))}.sqd-theme-dark .sqd-step-task .sqd-step-task-rect.sqd-selected{stroke:#fff;stroke-width:2}.sqd-theme-dark .sqd-step-task .sqd-step-task-text{fill:#000}.sqd-theme-dark .sqd-step-task .sqd-step-task-empty-icon{fill:#c6c6c6}.sqd-theme-dark .sqd-step-task .sqd-input{fill:#c6c6c6;stroke-width:2;stroke:#707070}.sqd-theme-dark .sqd-step-task .sqd-output{fill:#707070;stroke-width:0}.sqd-theme-dark .sqd-step-switch>.sqd-label-primary>.sqd-label-text{fill:#fff}.sqd-theme-dark .sqd-step-switch>.sqd-label-primary>.sqd-label-rect{fill:#2411db;stroke-width:0}.sqd-theme-dark .sqd-step-switch>.sqd-label-secondary>.sqd-label-rect{fill:#000;stroke-width:0}.sqd-theme-dark .sqd-step-switch>.sqd-label-secondary>.sqd-label-text{fill:#fff}.sqd-theme-dark .sqd-step-switch>g>.sqd-input{fill:#c6c6c6;stroke-width:2;stroke:#707070}.sqd-theme-dark .sqd-step-container>.sqd-label>.sqd-label-text{fill:#fff}.sqd-theme-dark .sqd-step-container>.sqd-label>.sqd-label-rect{fill:#2411db;stroke-width:0}.sqd-theme-dark .sqd-step-container>g>.sqd-input{fill:#c6c6c6;stroke-width:2;stroke:#707070}.dark-theme .sqd-toolbox-item-text,.dark-theme .mdc-text-field--filled:not(.mdc-text-field--disabled),.dark-theme .mdc-text-field{background-color:var(--theme-background)!important;color:var(--theme-primary-text)!important}.dark-theme .sqd-toolbox-group-title{background-color:var(--theme-background)!important;color:var(--theme-primary-text)!important}.dark-theme .sqd-toolbox-item-text{border-radius:5px;border:1px solid var(--theme-primary-text)!important}.sqd-theme-dark .sqd-toolbox-item{box-shadow:0 3px 3px #00000059!important}.dark-theme .mdc-switch--unselected .mdc-switch__icon,.dark-theme .mdc-switch--selected .mdc-switch__icon{fill:var(--theme-background)!important}.dark-theme .mdc-switch--unselected .mdc-switch__track:before,.dark-theme .mdc-switch--unselected .mdc-switch__track:after{background-color:var(--theme-background)!important}.dark-theme .mdc-switch--selected .mdc-switch__track:before,.dark-theme .mdc-switch--selected .mdc-switch__track:after{background-color:var(--theme-primary)!important}.dark-theme .action-buttons{background-color:var(--theme-background);color:var(--theme-primary)!important;border:1px solid var(--theme-primary)!important}.dark-theme .action-buttons:hover{background-color:var(--theme-primary)!important;color:#fff;border:1px solid var(--theme-primary)!important}.sqd-theme-dark.sqd-designer,.dark-theme .sqd-workspace,.dark-theme #autosaveControls{background-color:#000}.dark-theme .transform-name{color:var(--theme-primary-text)!important}.dark-theme .sqd-theme-dark .sqd-step-switch>.sqd-label-secondary>.sqd-label-rect{fill:var(--theme-primary)!important;color:var(--theme-primary-text)!important}.dark-theme .sqd-theme-dark .sqd-step-task .sqd-step-task-rect{fill:var(--theme-background)!important}.dark-theme .sqd-theme-dark .sqd-step-task .sqd-step-task-text{fill:var(--theme-primary-text)!important}.dark-theme .mdc-switch__shadow{background-color:var(--theme-primary)!important}.dark-theme .sqd-theme-dark .sqd-toolbox-filter-input{background-color:var(--theme-background)!important;color:var(--theme-primary-text)!important}.action-buttons{color:var(--theme-primary)!important;border-radius:.5rem;font-family:Poppins;padding:12px;border:1px solid var(--theme-primary)!important;display:inline-flex;align-items:center;gap:4px}.action-buttons:hover{background-color:var(--theme-primary)!important;color:var(--theme-primary-text)!important;border:1px solid var(--theme-primary)!important}.section-title{color:var(--theme-secondary)!important}.mat-mdc-card-title{font-family:Poppins!important;color:var(--theme-primary-text)!important}.sqd-toolbox-item-icon{z-index:999}@font-face{font-family:Poppins;src:url(data:font/ttf;base64,) format(\"truetype\");font-weight:400;font-style:normal;font-display:swap}.spinner-container{display:flex;justify-content:center;align-items:center;border:none;height:75vh}.sqd-theme-light .sqd-step-task .sqd-step-task-rect.sqd-selected{stroke:var(--theme-primary)!important}.sqd-designer-angular{height:92vh}.sqd-smart-editor-toggle{height:62px!important}.sqd-layout-desktop .sqd-smart-editor-toggle{right:435px}.sqd-editor-angular{padding:10px}.sqd-layout-desktop .sqd-smart-editor{position:relative;width:435px}.sqd-toolbox{margin-top:55px;width:243px;font-family:Poppins!important}.main-content{margin:0!important;padding:0!important;border-radius:8px;background-color:var(--theme-background);width:100%!important;font-family:Poppins!important}.mdc-text-field{background-color:var(--theme-background)!important;border-radius:.5rem!important;border:1px solid var(--theme-primary-text)!important;text-decoration:none!important;font-family:Poppins!important;color:var(--theme-primary-text)!important}.sqd-toolbox-group-title{color:var(--theme-primary-text)!important;background-color:var(--theme-background)!important;font-size:larger;font-weight:600px;font-family:Poppins!important;text-decoration:underline!important}.mdc-switch--unselected .mdc-switch__track:before,.mdc-switch--unselected .mdc-switch__track:after{background-color:var(--theme-background)!important;font-family:Poppins!important;border-color:var(--theme-primary-text)!important;border-width:1px!important}.mdc-switch--selected .mdc-switch__track:before,.mdc-switch--selected .mdc-switch__track:after{background-color:var(--theme-secondary)!important;font-family:Poppins!important;border-color:var(--theme-primary-text)!important;border-width:1px!important}.mdc-switch--unselected .mdc-switch__icon{fill:var(--theme-background)!important}.mdc-switch--selected .mdc-switch__icon{fill:var(--theme-secondary)!important}.mdc-text-field--focused{border:1px solid var(--theme-primary)!important}.sqd-toolbox-body{text-decoration:none!important;font-family:Poppins!important}.sqd-toolbox-filter-input{background-color:var(--theme-background)!important;border-radius:.5rem!important;border:1px solid var(--theme-primary-text)!important;text-decoration:none!important;font-family:Poppins!important}.mdc-line-ripple:before,.mdc-line-ripple:after{border-bottom:none!important}.sqd-workspace,.sqd-smart-editor-toggle,.sqd-smart-editor{margin-top:65px}.transform-name{color:var(--theme-primary-text)!important;margin-left:calc(13vw - 10px)}#autosaveControls{position:absolute;top:2px;left:11px;right:11px;z-index:1;display:flex;align-items:center;gap:1rem;height:30px;padding:15px;margin-bottom:1rem;color:var(--theme-primary)!important;font-family:Poppins,sans-serif;box-shadow:0 2px 4px #0003;border-radius:4px}.sync-controls{display:flex;align-items:center;gap:1rem}.autosave-status{display:flex;align-items:center;gap:.5rem}.sqd-theme-light .sqd-step-switch>.sqd-label-primary>.sqd-label-rect{fill:var(--theme-secondary)!important}.sqd-theme-light .sqd-step-switch>.sqd-label-secondary>.sqd-label-rect{fill:var(--theme-primary)!important}.dark-theme .sqd-theme-dark .sqd-step-switch>.sqd-label-primary>.sqd-label-rect{fill:var(--theme-secondary)!important}.sqd-root-start-stop-circle{fill:var(--theme-secondary)!important}.transform-description{line-height:18px}.input-with-editor-container{display:flex;align-items:flex-start;gap:12px;margin-top:1rem;width:100%}.input-field{flex:1;min-width:0}.editor-button{flex-shrink:0;width:48px;height:48px;margin-top:4px;border-radius:50%;display:flex;align-items:center;justify-content:center;transition:all .2s ease-in-out}.editor-button:hover{transform:scale(1.1)}.editor-button:disabled{opacity:.6;transform:none}.editor-button mat-icon{font-size:20px;width:20px;height:20px}@media (max-width: 768px){.input-with-editor-container{gap:8px}.editor-button{width:44px;height:44px}}.dark-theme .editor-button{color:#54c0e8!important}.dark-theme .editor-button:hover{background-color:#54c0e81a!important;color:#54c0e8!important}.dark-theme .editor-button:disabled{color:#666!important}.input-with-editor-container+.input-with-editor-container{margin-top:1rem}\n"], dependencies: [{ kind: "ngmodule", type: SequentialWorkflowDesignerModule }, { kind: "component", type: i7.DesignerComponent, selector: "sqd-designer", inputs: ["theme", "undoStackSize", "definition", "stepsConfiguration", "validatorConfiguration", "toolboxConfiguration", "controlBar", "contextMenu", "keyboard", "preferenceStorage", "extensions", "i18n", "customActionHandler", "isReadonly", "selectedStepId", "uidGenerator", "isToolboxCollapsed", "isEditorCollapsed", "areEditorsHidden", "rootEditor", "stepEditor"], outputs: ["onReady", "onDefinitionChanged", "onSelectedStepIdChanged", "onIsToolboxCollapsedChanged", "onIsEditorCollapsedChanged"] }, { kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "ngmodule", type: MatInputModule }, { kind: "directive", type: i8$1.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly", "disabledInteractive"], exportAs: ["matInput"] }, { kind: "directive", type: i6$2.MatLabel, selector: "mat-label" }, { kind: "directive", type: i6$2.MatHint, selector: "mat-hint", inputs: ["align", "id"] }, { kind: "directive", type: i6$2.MatError, selector: "mat-error, [matError]", inputs: ["id"] }, { kind: "ngmodule", type: MatButtonModule }, { kind: "component", type: i5.MatButton, selector: "    button[matButton], a[matButton], button[mat-button], button[mat-raised-button],    button[mat-flat-button], button[mat-stroked-button], a[mat-button], a[mat-raised-button],    a[mat-flat-button], a[mat-stroked-button]  ", inputs: ["matButton"], exportAs: ["matButton", "matAnchor"] }, { kind: "component", type: i5.MatIconButton, selector: "button[mat-icon-button], a[mat-icon-button], button[matIconButton], a[matIconButton]", exportAs: ["matButton", "matAnchor"] }, { kind: "ngmodule", type: RouterModule }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i1$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i1$1.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { kind: "directive", type: i1$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { kind: "directive", type: i1$1.MinValidator, selector: "input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]", inputs: ["min"] }, { kind: "directive", type: i1$1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "ngmodule", type: MatSlideToggleModule }, { kind: "component", type: i13.MatSlideToggle, selector: "mat-slide-toggle", inputs: ["name", "id", "labelPosition", "aria-label", "aria-labelledby", "aria-describedby", "required", "color", "disabled", "disableRipple", "tabIndex", "checked", "hideIcon", "disabledInteractive"], outputs: ["change", "toggleChange"], exportAs: ["matSlideToggle"] }, { kind: "ngmodule", type: MatIconModule }, { kind: "component", type: i6.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "ngmodule", type: MatSelectModule }, { kind: "component", type: i11.MatSelect, selector: "mat-select", inputs: ["aria-describedby", "panelClass", "disabled", "disableRipple", "tabIndex", "hideSingleSelectionIndicator", "placeholder", "required", "multiple", "disableOptionCentering", "compareWith", "value", "aria-label", "aria-labelledby", "errorStateMatcher", "typeaheadDebounceInterval", "sortComparator", "id", "panelWidth", "canSelectNullableOptions"], outputs: ["openedChange", "opened", "closed", "selectionChange", "valueChange"], exportAs: ["matSelect"] }, { kind: "component", type: i11.MatOption, selector: "mat-option", inputs: ["value", "id", "disabled"], outputs: ["onSelectionChange"], exportAs: ["matOption"] }, { kind: "ngmodule", type: MatCardModule }, { kind: "ngmodule", type: MatProgressSpinnerModule }, { kind: "component", type: i8.MatProgressSpinner, selector: "mat-progress-spinner, mat-spinner", inputs: ["color", "mode", "value", "diameter", "strokeWidth"], exportAs: ["matProgressSpinner"] }, { kind: "ngmodule", type: MatSnackBarModule }, { kind: "ngmodule", type: MatBadgeModule }, { kind: "directive", type: i17.MatBadge, selector: "[matBadge]", inputs: ["matBadgeColor", "matBadgeOverlap", "matBadgeDisabled", "matBadgePosition", "matBadge", "matBadgeDescription", "matBadgeSize", "matBadgeHidden"] }, { kind: "ngmodule", type: MatTooltipModule }, { kind: "directive", type: i6$1.MatTooltip, selector: "[matTooltip]", inputs: ["matTooltipPosition", "matTooltipPositionAtOrigin", "matTooltipDisabled", "matTooltipShowDelay", "matTooltipHideDelay", "matTooltipTouchGestures", "matTooltip", "matTooltipClass"], exportAs: ["matTooltip"] }], encapsulation: i0.ViewEncapsulation.None, preserveWhitespaces: true });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: TransformBuilderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-transform-builder', standalone: true, imports: [
                        SequentialWorkflowDesignerModule,
                        CommonModule,
                        MatFormField,
                        MatInputModule,
                        MatButtonModule,
                        RouterModule,
                        FormsModule,
                        MatSlideToggleModule,
                        MatIconModule,
                        MatSelectModule,
                        MatCardModule,
                        MatProgressSpinnerModule,
                        MatSnackBarModule,
                        MatBadgeModule,
                        MatTooltipModule,
                    ], encapsulation: ViewEncapsulation.None, template: "<div\r\n  *ngIf=\"isReady\"\r\n  id=\"autosaveControls\"\r\n  class=\"autosave-controls\"\r\n>\r\n  <h4 class=\"transform-name\">{{ definition?.properties?.name }}</h4>\r\n\r\n  <button class=\"action-buttons\" color=\"primary\" (click)=\"togglePreview()\" matTooltip=\"Test your transform with live identity data\"\r\n>\r\n    Preview Transform\r\n  </button>\r\n  <button\r\n    class=\"action-buttons\"\r\n    color=\"primary\"\r\n    (click)=\"toggleReadonlyClicked()\"\r\n  >\r\n  {{isReadonly ? \"Enable\" : \"Disable\"}} Editing\r\n  </button>\r\n\r\n  <button\r\n    class=\"action-buttons\"\r\n    color=\"primary\"\r\n    (click)=\"viewTransformDefinition()\"\r\n  >\r\n    View Definition\r\n  </button>\r\n\r\n  <!-- Sync controls -->\r\n  <div class=\"sync-controls\">\r\n    <button\r\n      class=\"action-buttons\"\r\n      color=\"warn\"\r\n      (click)=\"discardLocalChanges()\"\r\n      [disabled]=\"!hasUnsavedChanges || isSyncing\"\r\n      *ngIf=\"hasUnsavedChanges\"\r\n    >\r\n      <mat-icon>delete</mat-icon>\r\n      Discard\r\n    </button>\r\n\r\n    <button\r\n      class=\"action-buttons\"\r\n      color=\"accent\"\r\n      (click)=\"downloadTransform()\"\r\n      [disabled]=\"!definition?.sequence?.[0]\"\r\n      matTooltip=\"Download Transform Definition\"\r\n    >\r\n      <mat-icon>download</mat-icon>\r\n      Download\r\n    </button>\r\n\r\n    <button\r\n      class=\"action-buttons\"\r\n      color=\"primary\"\r\n      (click)=\"saveToCloud()\"\r\n      [matBadge]=\"hasUnsavedChanges ? '!' : null\"\r\n      matBadgeColor=\"warn\"\r\n      matBadgeSize=\"small\"\r\n    >\r\n      <mat-icon>{{ isSyncing ? \"sync\" : \"cloud_upload\" }}</mat-icon>\r\n      {{\r\n        isSyncing ? \"Syncing...\" : isNewTransform ? \"Create Transform\" : \"Save\"\r\n      }}\r\n    </button>\r\n\r\n    <!-- Auto-save status -->\r\n    <div class=\"autosave-status\">\r\n      <mat-icon\r\n        [style.color]=\"\r\n          isSaving ? 'orange' : hasUnsavedChanges ? 'red' : 'green'\r\n        \"\r\n      >\r\n        {{ isSaving ? \"sync\" : hasUnsavedChanges ? \"cloud_off\" : \"cloud_done\" }}\r\n      </mat-icon>\r\n      <span class=\"status-text\">\r\n        <ng-container *ngIf=\"isSaving\">Saving...</ng-container>\r\n        <ng-container *ngIf=\"!isSaving && hasUnsavedChanges\">\r\n          Unsaved\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!isSaving && !hasUnsavedChanges\"\r\n          >Saved</ng-container\r\n        >\r\n      </span>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div *ngIf=\"!isReady\" class=\"spinner-container\">\r\n  <mat-spinner diameter=\"75\"></mat-spinner>\r\n</div>\r\n\r\n<ng-container *ngIf=\"showDesigner\">\r\n  <sqd-designer\r\n    *ngIf=\"isReady\"\r\n    [theme]=\"designerTheme\"\r\n    [definition]=\"definition\"\r\n    [toolboxConfiguration]=\"toolboxConfiguration\"\r\n    [stepsConfiguration]=\"stepsConfiguration\"\r\n    [validatorConfiguration]=\"validatorConfiguration\"\r\n    [controlBar]=\"true\"\r\n    [isReadonly]=\"isReadonly\"\r\n    [areEditorsHidden]=\"false\"\r\n    [rootEditor]=\"rootEditorProvider\"\r\n    [stepEditor]=\"stepEditorProvider\"\r\n    [isToolboxCollapsed]=\"isToolboxCollapsed\"\r\n    [isEditorCollapsed]=\"isEditorCollapsed\"\r\n    [undoStackSize]=\"5\"\r\n    (onReady)=\"onDesignerReady($event)\"\r\n    (onDefinitionChanged)=\"onDefinitionChanged($event)\"\r\n  >\r\n  </sqd-designer>\r\n</ng-container>\r\n\r\n<ng-template #rootEditorProvider let-editor>\r\n  <h3>Transform</h3>\r\n\r\n  <mat-form-field class=\"full-width\">\r\n    <input\r\n      matInput\r\n      name=\"Transform Name\"\r\n      [(ngModel)]=\"editor.definition.properties.name\"\r\n      [value]=\"editor.definition.properties.name\"\r\n      [readonly]=\"editor.isReadonly\"\r\n      (input)=\"\r\n        updateProperty(\r\n          editor.definition.properties,\r\n          'name',\r\n          $event,\r\n          editor.context\r\n        )\r\n      \"\r\n    />\r\n  </mat-form-field>\r\n    <!-- <mat-form-field class=\"full-width\">\r\n    <mat-label>Description</mat-label>\r\n    <textarea\r\n      matInput\r\n      name=\"Description\"\r\n      [(ngModel)]=\"editor.definition.properties.description\"\r\n      [value]=\"editor.definition.properties.description\"\r\n      [readonly]=\"editor.isReadonly\"\r\n      (input)=\"\r\n        updateProperty(\r\n          editor.definition.properties,\r\n          'description',\r\n          $event,\r\n          editor.context\r\n        )\r\n      \"\r\n    ></textarea>\r\n  </mat-form-field> -->\r\n</ng-template>\r\n\r\n<ng-template #stepEditorProvider let-editor>\r\n  <div style=\"padding: 1rem\">\r\n    <h3>{{ editor.step.name }}</h3>\r\n\r\n    <p class=\"transform-description\">{{editor.step.description}}</p>\r\n    <ng-container *ngIf=\"editor.step.type !== 'dateMath'\">\r\n      <p>Attributes</p>\r\n      <ng-container *ngFor=\"let key of objectKeys(editor.step.properties)\">\r\n        <div\r\n          *ngIf=\"isBoolean(editor.step.properties[key]); else numberCheck\"\r\n          style=\"display: block; margin-top: 1rem\"\r\n        >\r\n          <mat-slide-toggle\r\n            style=\"margin-bottom: 1rem\"\r\n            [(ngModel)]=\"editor.step.properties[key]\"\r\n            matTooltip=\"{{getHintForProperty(editor.step.type, key)}}\"\r\n            name=\"{{ key }}\"\r\n            [disabled]=\"editor.isReadonly\"\r\n            (change)=\"\r\n              updateProperty(\r\n                editor.step.properties,\r\n                key,\r\n                $event,\r\n                editor.context\r\n              )\r\n            \"\r\n          >\r\n            {{ getLabelForProperty(editor.step.type, key) }}\r\n          </mat-slide-toggle>\r\n        </div>\r\n\r\n        <!-- Number handling -->\r\n        <ng-template #numberCheck>\r\n          <div\r\n            *ngIf=\"isNumber(editor.step.properties[key], key, editor.step.type); else fieldCheck\"\r\n            style=\"display: block; margin-top: 1rem\"\r\n          >\r\n            <mat-form-field appearance=\"fill\">\r\n              <mat-label>{{ getLabelForProperty(editor.step.type, key) }}</mat-label>\r\n              <input\r\n                matInput\r\n                type=\"number\"\r\n                matTooltip=\"{{getHintForProperty(editor.step.type, key)}}\"\r\n                [(ngModel)]=\"editor.step.properties[key]\"\r\n                name=\"{{ key }}\"\r\n                [readonly]=\"editor.isReadonly\"\r\n                [required]=\"isRequired(editor.step.type, key)\"\r\n                (input)=\"\r\n                  updateNumericProperty(\r\n                    editor.step.properties,\r\n                    key,\r\n                    $event,\r\n                    editor.context\r\n                  )\r\n                \"\r\n              />\r\n              <mat-error\r\n                *ngIf=\"\r\n                  editor.step.properties[key] === null ||\r\n                  editor.step.properties[key] === undefined\r\n                \"\r\n              >\r\n                {{ key }} is required\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n        </ng-template>\r\n\r\n        <ng-template #fieldCheck>\r\n          <div\r\n            *ngIf=\"isMap(editor.step.properties[key]); else textField\"\r\n            style=\"display: block; margin-top: 1rem\"\r\n          >\r\n            <button\r\n              mat-raised-button\r\n              color=\"primary\"\r\n              (click)=\"editMap(editor.step.properties, key, editor.context)\"\r\n            >\r\n              Edit {{ key }}\r\n            </button>\r\n          </div>\r\n        </ng-template>\r\n\r\n        <ng-template #textField>\r\n          <!-- Special handling for sourceName -->\r\n          <ng-container\r\n            *ngIf=\"\r\n              key === 'sourceName' && editor.step.type === 'accountAttribute'\r\n            \"\r\n          >\r\n            <mat-form-field\r\n              appearance=\"fill\"\r\n              style=\"display: block; margin-top: 1rem\"\r\n            >\r\n              <mat-label>{{ getLabelForProperty(editor.step.type, key) }}</mat-label>\r\n              <mat-select\r\n                matTooltip=\"{{getHintForProperty(editor.step.type, key)}}\"\r\n                [(ngModel)]=\"editor.step.properties[key]\"\r\n                [disabled]=\"editor.isReadonly\"\r\n                [required]=\"isRequired(editor.step.type, key)\"\r\n                name=\"{{ key }}\"\r\n                (selectionChange)=\"\r\n                  onSourceNameChanged(\r\n                    editor.step.properties,\r\n                    key,\r\n                    $event.value,\r\n                    editor.context\r\n                  )\r\n                \"\r\n              >\r\n                <mat-option\r\n                  *ngFor=\"\r\n                    let choice of getChoicesForProperty(editor.step.type, key)\r\n                  \"\r\n                  [value]=\"choice\"\r\n                >\r\n                  {{ getChoiceLabel(editor.step.type, choice) }}\r\n                </mat-option>\r\n              </mat-select>\r\n              <mat-error *ngIf=\"editor.step.properties[key] === ''\">\r\n                {{ key }} is required\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </ng-container>\r\n\r\n          <!-- Special handling for accountAttribute -->\r\n          <ng-container\r\n            *ngIf=\"\r\n              key === 'attributeName' && editor.step.type === 'accountAttribute'\r\n            \"\r\n          >\r\n            <mat-form-field\r\n              appearance=\"fill\"\r\n              style=\"display: block; margin-top: 1rem\"\r\n            >\r\n              <mat-label>{{ getLabelForProperty(editor.step.type, key) }}</mat-label>\r\n              <mat-select\r\n                [(ngModel)]=\"editor.step.properties[key]\"\r\n                matTooltip=\"{{getHintForProperty(editor.step.type, key)}}\"\r\n                [disabled]=\"\r\n                  editor.isReadonly || isAccountAttributeDisabled(editor)\r\n                \"\r\n                [required]=\"isRequired(editor.step.type, key)\"\r\n                name=\"{{ key }}\"\r\n                (selectionChange)=\"\r\n                  updateProperty(\r\n                    editor.step.properties,\r\n                    key,\r\n                    $event.value,\r\n                    editor.context\r\n                  )\r\n                \"\r\n              >\r\n                <!-- Fixed: Use attr directly as both value and display text -->\r\n                <mat-option\r\n                  *ngFor=\"let attr of getAccountAttributes(editor)\"\r\n                  [value]=\"attr\"\r\n                >\r\n                  {{ attr }}\r\n                </mat-option>\r\n              </mat-select>\r\n              <mat-hint *ngIf=\"isLoadingAccountAttributes(editor)\"\r\n                >Loading attributes...</mat-hint\r\n              >\r\n              <mat-hint\r\n                *ngIf=\"\r\n                  !editor.step.properties['sourceName'] &&\r\n                  !isLoadingAccountAttributes(editor)\r\n                \"\r\n              >\r\n                Please select a source name first\r\n              </mat-hint>\r\n              <mat-error *ngIf=\"editor.step.properties[key] === ''\">\r\n                {{ key }} is required\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </ng-container>\r\n\r\n          <!-- For getReferenceIdentityAttribute: text input -->\r\n          <ng-container\r\n            *ngIf=\"\r\n              key === 'attributeName' &&\r\n              editor.step.type === 'getReferenceIdentityAttribute'\r\n            \"\r\n          >\r\n            <mat-form-field\r\n              appearance=\"fill\"\r\n              style=\"display: block; margin-top: 1rem\"\r\n            >\r\n              <mat-label>{{ getLabelForProperty(editor.step.type, key) }}</mat-label>\r\n              <input\r\n                matInput\r\n                matTooltip=\"{{getHintForProperty(editor.step.type, key)}}\"\r\n                [(ngModel)]=\"editor.step.properties[key]\"\r\n                [readonly]=\"editor.isReadonly\"\r\n                [required]=\"isRequired(editor.step.type, key)\"\r\n                name=\"{{ key }}\"\r\n                (input)=\"\r\n                  updateProperty(\r\n                    editor.step.properties,\r\n                    key,\r\n                    $event,\r\n                    editor.context\r\n                  )\r\n                \"\r\n              />\r\n              <mat-error *ngIf=\"editor.step.properties[key] === ''\">\r\n                {{ key }} is required\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </ng-container>\r\n\r\n          <ng-container\r\n            *ngIf=\"key === 'inputFormat' && editor.step.type === 'dateFormat'\"\r\n          >\r\n            <!-- Help section with common patterns -->\r\n\r\n            <mat-form-field\r\n              appearance=\"fill\"\r\n              style=\"display: block; margin-top: 1rem\"\r\n            >\r\n              <mat-label>{{ getLabelForProperty(editor.step.type, key) }}</mat-label>\r\n              <mat-select\r\n                matTooltip=\"{{getHintForProperty(editor.step.type, key)}}\"\r\n                [(ngModel)]=\"editor.step.properties[key]\"\r\n                [disabled]=\"editor.isReadonly\"\r\n                [required]=\"isRequired(editor.step.type, key)\"\r\n                name=\"{{ key }}\"\r\n                (selectionChange)=\"\r\n                  updateProperty(\r\n                    editor.step.properties,\r\n                    key,\r\n                    $event.value,\r\n                    editor.context\r\n                  )\r\n                \"\r\n              >\r\n                <mat-option\r\n                  *ngFor=\"\r\n                    let choice of getChoicesForProperty(editor.step.type, key)\r\n                  \"\r\n                  [value]=\"choice\"\r\n                >\r\n                  {{ getChoiceLabel(editor.step.type, choice) }}\r\n                </mat-option>\r\n              </mat-select>\r\n              <mat-error *ngIf=\"editor.step.properties[key] === ''\">\r\n                {{ key }} is required\r\n              </mat-error>\r\n            </mat-form-field>\r\n\r\n            <!-- Custom Input Format Field -->\r\n            <div\r\n              *ngIf=\"editor.step.properties['inputFormat'] === 'CUSTOM'\"\r\n              style=\"margin-top: 0.5rem\"\r\n            >\r\n              <mat-form-field appearance=\"fill\" style=\"width: 100%\">\r\n                <mat-label>Custom Input Format</mat-label>\r\n                <input\r\n                  matInput\r\n                  [(ngModel)]=\"editor.step.properties['customInputFormat']\"\r\n                  [readonly]=\"editor.isReadonly\"\r\n                  [required]=\"true\"\r\n                  placeholder=\"e.g., yyyy-MM-dd HH:mm:ss\"\r\n                  (input)=\"\r\n                    updateProperty(\r\n                      editor.step.properties,\r\n                      'customInputFormat',\r\n                      $event,\r\n                      editor.context\r\n                    )\r\n                  \"\r\n                />\r\n                <mat-error\r\n                  *ngIf=\"editor.step.properties['customInputFormat'] === ''\"\r\n                >\r\n                  Custom input format is required when using CUSTOM\r\n                </mat-error>\r\n              </mat-form-field>\r\n\r\n              <!-- Preview for custom input format -->\r\n              <div\r\n                *ngIf=\"editor.step.properties['customInputFormat']\"\r\n                style=\"\r\n                  margin-top: 0.5rem;\r\n                  padding: 0.5rem;\r\n                  background: #f5f5f5;\r\n                  border-radius: 4px;\r\n                  font-size: 0.875rem;\r\n                \"\r\n              >\r\n                {{\r\n                  getDateFormatExample(\r\n                    editor.step.properties[\"customInputFormat\"]\r\n                  )\r\n                }}\r\n              </div>\r\n            </div>\r\n          </ng-container>\r\n\r\n          <!-- Output Format handling -->\r\n          <ng-container\r\n            *ngIf=\"key === 'outputFormat' && editor.step.type === 'dateFormat'\"\r\n          >\r\n            <!-- Check if it's a choice field first -->\r\n            <mat-form-field\r\n              appearance=\"fill\"\r\n              style=\"display: block; margin-top: 1rem\"\r\n            >\r\n              <mat-label>{{ getLabelForProperty(editor.step.type, key) }}</mat-label>\r\n              <mat-select\r\n                matTooltip=\"{{getHintForProperty(editor.step.type, key)}}\"\r\n                [(ngModel)]=\"editor.step.properties[key]\"\r\n                [disabled]=\"editor.isReadonly\"\r\n                [required]=\"isRequired(editor.step.type, key)\"\r\n                name=\"{{ key }}\"\r\n                (selectionChange)=\"\r\n                  updateProperty(\r\n                    editor.step.properties,\r\n                    key,\r\n                    $event.value,\r\n                    editor.context\r\n                  )\r\n                \"\r\n              >\r\n                <mat-option\r\n                  *ngFor=\"\r\n                    let choice of getChoicesForProperty(editor.step.type, key)\r\n                  \"\r\n                  [value]=\"choice\"\r\n                >\r\n                  {{ getChoiceLabel(editor.step.type, choice) }}\r\n                </mat-option>\r\n              </mat-select>\r\n              <mat-error *ngIf=\"editor.step.properties[key] === ''\">\r\n                {{ key }} is required\r\n              </mat-error>\r\n            </mat-form-field>\r\n\r\n            <!-- Custom Output Format Field -->\r\n            <div\r\n              *ngIf=\"editor.step.properties['outputFormat'] === 'CUSTOM'\"\r\n              style=\"margin-top: 0.5rem\"\r\n            >\r\n              <mat-form-field appearance=\"fill\" style=\"width: 100%\">\r\n                <mat-label>Custom Output Format</mat-label>\r\n                <input\r\n                  matInput\r\n                  matTooltip=\"{{getHintForProperty(editor.step.type, key)}}\"\r\n                  [(ngModel)]=\"editor.step.properties['customOutputFormat']\"\r\n                  [readonly]=\"editor.isReadonly\"\r\n                  [required]=\"true\"\r\n                  placeholder=\"e.g., dd/MM/yyyy HH:mm\"\r\n                  (input)=\"\r\n                    updateProperty(\r\n                      editor.step.properties,\r\n                      'customOutputFormat',\r\n                      $event,\r\n                      editor.context\r\n                    )\r\n                  \"\r\n                />\r\n                <mat-hint\r\n                  >Use Java SimpleDateFormat pattern (e.g., dd/MM/yyyy, MMM dd,\r\n                  yyyy)</mat-hint\r\n                >\r\n                <mat-error\r\n                  *ngIf=\"editor.step.properties['customOutputFormat'] === ''\"\r\n                >\r\n                  Custom output format is required when using CUSTOM\r\n                </mat-error>\r\n              </mat-form-field>\r\n\r\n              <!-- Preview for custom output format -->\r\n              <div\r\n                *ngIf=\"editor.step.properties['customOutputFormat']\"\r\n                style=\"\r\n                  margin-top: 0.5rem;\r\n                  padding: 0.5rem;\r\n                  background: #f5f5f5;\r\n                  border-radius: 4px;\r\n                  font-size: 0.875rem;\r\n                \"\r\n              >\r\n                <strong>Example:</strong>\r\n                {{\r\n                  getDateFormatExample(\r\n                    editor.step.properties[\"customOutputFormat\"]\r\n                  )\r\n                }}\r\n              </div>\r\n            </div>\r\n            <div\r\n              *ngIf=\"\r\n                editor.step.properties['inputFormat'] === 'CUSTOM' ||\r\n                editor.step.properties['outputFormat'] === 'CUSTOM'\r\n              \"\r\n              style=\"\r\n                margin-top: 1rem;\r\n                margin-bottom: 1rem;\r\n                padding: 1rem;\r\n                background: #e3f2fd;\r\n                border-radius: 4px;\r\n                border-left: 4px solid #2196f3;\r\n              \"\r\n            >\r\n              <h4\r\n                style=\"\r\n                  margin: 0 0 0.5rem 0;\r\n                  color: #1976d2;\r\n                  font-size: 0.875rem;\r\n                \"\r\n              >\r\n                Common Date Format Patterns\r\n              </h4>\r\n              <div style=\"font-size: 0.75rem; color: #424242\">\r\n                <div><code>yyyy-MM-dd</code> \u2192 2024-03-15</div>\r\n                <div><code>MM/dd/yyyy</code> \u2192 03/15/2024</div>\r\n                <div><code>dd/MM/yyyy</code> \u2192 15/03/2024</div>\r\n                <div><code>MMM dd, yyyy</code> \u2192 Mar 15, 2024</div>\r\n                <div>\r\n                  <code>yyyy-MM-dd HH:mm:ss</code> \u2192 2024-03-15 14:30:45\r\n                </div>\r\n                <div><code>HH:mm:ss</code> \u2192 14:30:45</div>\r\n              </div>\r\n            </div>\r\n          </ng-container>\r\n\r\n          <!-- Default handling for other properties -->\r\n          <ng-container\r\n            *ngIf=\"\r\n              key !== 'sourceName' &&\r\n              key !== 'attributeName' &&\r\n              key !== 'inputFormat' &&\r\n              key !== 'outputFormat' &&\r\n              key !== 'customInputFormat' &&\r\n              key !== 'customOutputFormat'\r\n            \"\r\n          >\r\n            <ng-container\r\n              *ngIf=\"\r\n                getChoicesForProperty(editor.step.type, key) as choices;\r\n                else defaultInput\r\n              \"\r\n            >\r\n              <mat-form-field\r\n                appearance=\"fill\"\r\n                style=\"display: block; margin-top: 1rem\"\r\n              >\r\n              <mat-label>{{ getLabelForProperty(editor.step.type, key) }}</mat-label>\r\n                <mat-select\r\n                  matTooltip=\"{{getHintForProperty(editor.step.type, key)}}\"\r\n                  [(ngModel)]=\"editor.step.properties[key]\"\r\n                  [disabled]=\"editor.isReadonly\"\r\n                  [required]=\"isRequired(editor.step.type, key)\"\r\n                  name=\"{{ key }}\"\r\n                  (selectionChange)=\"\r\n                    updateProperty(\r\n                      editor.step.properties,\r\n                      key,\r\n                      $event.value,\r\n                      editor.context\r\n                    )\r\n                  \"\r\n                >\r\n                  <mat-option *ngFor=\"let choice of choices\" [value]=\"choice\">{{\r\n                    getChoiceLabel(editor.step.type, choice)\r\n                  }}</mat-option>\r\n                </mat-select>\r\n                <mat-error *ngIf=\"editor.step.properties[key] === ''\">\r\n                  {{ key }} is required\r\n                </mat-error>\r\n              </mat-form-field>\r\n            </ng-container>\r\n\r\n            \r\n            <ng-template #defaultInput>\r\n              <div class=\"input-with-editor-container\">\r\n                <mat-form-field\r\n                  appearance=\"outline\"\r\n                  class=\"input-field\">\r\n                  <mat-label>{{ getLabelForProperty(editor.step.type, key) }}</mat-label>\r\n                  <input\r\n                    matInput\r\n                    matTooltip=\"{{getHintForProperty(editor.step.type, key)}}\"\r\n                    [(ngModel)]=\"editor.step.properties[key]\"\r\n                    name=\"{{ key }}\"\r\n                    [readonly]=\"editor.isReadonly\"\r\n                    [required]=\"isRequired(editor.step.type, key)\"\r\n                    (input)=\"\r\n                      updateProperty(\r\n                        editor.step.properties,\r\n                        key,\r\n                        $event,\r\n                        editor.context\r\n                      )\r\n                    \"\r\n                  />\r\n                  <mat-error *ngIf=\"editor.step.properties[key] === ''\">\r\n                    {{ key }} is required\r\n                  </mat-error>\r\n                </mat-form-field>\r\n                \r\n                <button\r\n                  mat-icon-button\r\n                  color=\"primary\"\r\n                  class=\"editor-button\"\r\n                  [disabled]=\"editor.isReadonly\"\r\n                  (click)=\"openVelocityEditor(editor.step.properties, key, $event, editor.context)\"\r\n                  matTooltip=\"Open Code Editor\"\r\n                >\r\n                  <mat-icon>code</mat-icon>\r\n                </button>\r\n              </div>\r\n            </ng-template>\r\n          </ng-container>\r\n\r\n          <!-- Enhanced Date Math Section for stepEditorProvider template -->\r\n          <!-- This should be added to handle dateMath steps specifically -->\r\n        </ng-template>\r\n      </ng-container>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"editor.step.type === 'dateMath'\">\r\n      <!-- Toggle between builder and manual input -->\r\n      <div style=\"margin-top: 1rem\">\r\n        <mat-slide-toggle\r\n          [(ngModel)]=\"editor.step.properties.useBuilder\"\r\n          [disabled]=\"editor.isReadonly\"\r\n          (change)=\"\r\n            onDateMathBuilderToggle(\r\n              editor.step.properties,\r\n              $event.checked,\r\n              editor.context\r\n            )\r\n          \"\r\n        >\r\n          Use Visual Expression Builder\r\n        </mat-slide-toggle>\r\n      </div>\r\n\r\n      <!-- Visual Builder Mode -->\r\n      <div *ngIf=\"editor.step.properties.useBuilder\" style=\"margin-top: 1rem\">\r\n        <!-- Base Date Selection -->\r\n        <mat-form-field\r\n          appearance=\"fill\"\r\n          style=\"display: block; margin-top: 1rem\"\r\n        >\r\n          <mat-label>Base Date</mat-label>\r\n          <mat-select\r\n            [(ngModel)]=\"editor.step.properties.baseDate\"\r\n            [disabled]=\"editor.isReadonly\"\r\n            (selectionChange)=\"\r\n              updateDateMathExpression(editor.step.properties, editor.context)\r\n            \"\r\n          >\r\n            <mat-option value=\"input\">Use Input Date</mat-option>\r\n            <mat-option value=\"now\">Use Current Date/Time</mat-option>\r\n          </mat-select>\r\n          <mat-hint>\r\n            <ng-container *ngIf=\"editor.step.properties.baseDate === 'input'\">\r\n              Start with the date provided as input to this transform\r\n            </ng-container>\r\n            <ng-container *ngIf=\"editor.step.properties.baseDate === 'now'\">\r\n              Start with the current date and time\r\n            </ng-container>\r\n          </mat-hint>\r\n        </mat-form-field>\r\n\r\n        <!-- Operations Builder -->\r\n        <div style=\"margin-top: 1rem\">\r\n          <h4 style=\"margin: 0.5rem 0; color: #424242\">Date/Time Operations</h4>\r\n\r\n          <!-- Existing Operations -->\r\n          <div\r\n            *ngFor=\"\r\n              let operation of getDateMathOperations(editor.step.properties);\r\n              let i = index\r\n            \"\r\n            style=\"\r\n              display: flex;\r\n              align-items: center;\r\n              gap: 0.5rem;\r\n              margin-bottom: 0.5rem;\r\n              padding: 0.5rem;\r\n              border: 1px solid #ddd;\r\n              border-radius: 4px;\r\n            \"\r\n          >\r\n            <!-- Operation Type -->\r\n            <mat-form-field appearance=\"outline\" style=\"flex: 0 0 120px\">\r\n              <mat-label>Operation</mat-label>\r\n              <mat-select\r\n                [ngModel]=\"operation.operation\" (ngModelChange)=\"operation.operation = $event\"\r\n                [disabled]=\"editor.isReadonly\"\r\n                (selectionChange)=\"\r\n                  updateDateMathOperationAt(\r\n                    editor.step.properties,\r\n                    i,\r\n                    'operation',\r\n                    $event.value,\r\n                    editor.context\r\n                  )\r\n                \"\r\n              >\r\n                <mat-option value=\"+\">Add</mat-option>\r\n                <mat-option value=\"-\">Subtract</mat-option>\r\n                <mat-option value=\"/\">Round to</mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n\r\n            <!-- Value (only for + and -) -->\r\n            <mat-form-field\r\n              appearance=\"outline\"\r\n              style=\"flex: 0 0 80px\"\r\n              *ngIf=\"operation.operation !== '/' && operation.operation !== undefined\"\r\n            >\r\n              <mat-label>Value</mat-label>\r\n              <input\r\n                matInput\r\n                type=\"number\"\r\n                min=\"1\"\r\n                [ngModel]=\"operation.value\" (ngModelChange)=\"operation.value = $event\"\r\n                [readonly]=\"editor.isReadonly\"\r\n                (input)=\"\r\n                  updateDateMathOperationAt(\r\n                    editor.step.properties,\r\n                    i,\r\n                    'value',\r\n                    $event,\r\n                    editor.context\r\n                  )\r\n                \"\r\n              />\r\n            </mat-form-field>\r\n\r\n            <!-- Unit -->\r\n            <mat-form-field appearance=\"outline\" style=\"flex: 0 0 120px\">\r\n              <mat-label>Unit</mat-label>\r\n              <mat-select\r\n                [ngModel]=\"operation.unit\" (ngModelChange)=\"operation.unit = $event\"\r\n                [disabled]=\"editor.isReadonly\"\r\n                (selectionChange)=\"\r\n                  updateDateMathOperationAt(\r\n                    editor.step.properties,\r\n                    i,\r\n                    'unit',\r\n                    $event.value,\r\n                    editor.context\r\n                  )\r\n                \"\r\n              >\r\n                <mat-option value=\"y\">Years</mat-option>\r\n                <mat-option value=\"M\">Months</mat-option>\r\n                <mat-option value=\"w\">Weeks</mat-option>\r\n                <mat-option value=\"d\">Days</mat-option>\r\n                <mat-option value=\"h\">Hours</mat-option>\r\n                <mat-option value=\"m\">Minutes</mat-option>\r\n                <mat-option value=\"s\">Seconds</mat-option>\r\n              </mat-select>\r\n            </mat-form-field>\r\n\r\n            <!-- Remove Operation -->\r\n            <button\r\n              mat-icon-button\r\n              color=\"warn\"\r\n              [disabled]=\"editor.isReadonly\"\r\n              (click)=\"\r\n                removeDateMathOperation(\r\n                  editor.step.properties,\r\n                  i,\r\n                  editor.context\r\n                )\r\n              \"\r\n              matTooltip=\"Remove operation\"\r\n            >\r\n              <mat-icon>delete</mat-icon>\r\n            </button>\r\n          </div>\r\n\r\n          <!-- Add Operation Button -->\r\n          <button\r\n            mat-stroked-button\r\n            color=\"primary\"\r\n            [disabled]=\"editor.isReadonly\"\r\n            (click)=\"\r\n              addDateMathOperation(editor.step.properties, editor.context)\r\n            \"\r\n            style=\"margin-top: 0.5rem\"\r\n          >\r\n            <mat-icon>add</mat-icon>\r\n            Add Operation\r\n          </button>\r\n        </div>\r\n\r\n        <!-- Generated Expression Preview -->\r\n        <div\r\n          style=\"\r\n            margin-top: 1rem;\r\n            padding: 1rem;\r\n            background: #f5f5f5;\r\n            border-radius: 4px;\r\n            border-left: 4px solid #4caf50;\r\n          \"\r\n        >\r\n          <h4 style=\"margin: 0 0 0.5rem 0; color: #2e7d32\">\r\n            Generated Expression\r\n          </h4>\r\n          <code style=\"font-size: 1rem; color: #1565c0\">{{\r\n            getGeneratedExpression(editor.step.properties)\r\n          }}</code>\r\n          <div style=\"margin-top: 0.5rem; font-size: 0.875rem; color: #666\">\r\n            {{ getExpressionDescription(editor.step.properties) }}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Manual Expression Mode -->\r\n      <div *ngIf=\"!editor.step.properties.useBuilder\" style=\"margin-top: 1rem\">\r\n        <mat-form-field appearance=\"fill\" style=\"display: block; width: 100%\">\r\n          <mat-label>Date Math Expression</mat-label>\r\n          <input\r\n            matInput\r\n            [(ngModel)]=\"editor.step.properties.expression\"\r\n            [readonly]=\"editor.isReadonly\"\r\n            [required]=\"true\"\r\n            placeholder=\"e.g., now+1w, +3M, now/d\"\r\n            (input)=\"\r\n              updateProperty(\r\n                editor.step.properties,\r\n                'expression',\r\n                $event,\r\n                editor.context\r\n              )\r\n            \"\r\n          />\r\n          <mat-hint>Enter a date math expression manually</mat-hint>\r\n          <mat-error *ngIf=\"editor.step.properties.expression === ''\">\r\n            Expression is required\r\n          </mat-error>\r\n        </mat-form-field>\r\n\r\n        <!-- Examples and Help -->\r\n        <div\r\n          style=\"\r\n            margin-top: 1rem;\r\n            padding: 1rem;\r\n            background: #e3f2fd;\r\n            border-radius: 4px;\r\n            border-left: 4px solid #2196f3;\r\n          \"\r\n        >\r\n          <h4 style=\"margin: 0 0 0.5rem 0; color: #1976d2\">\r\n            Expression Examples\r\n          </h4>\r\n          <div style=\"font-size: 0.875rem; color: #424242\">\r\n            <div style=\"margin-bottom: 0.25rem\">\r\n              <code>now</code> - Current date and time\r\n            </div>\r\n            <div style=\"margin-bottom: 0.25rem\">\r\n              <code>now/h</code> - Current time rounded to the hour\r\n            </div>\r\n            <div style=\"margin-bottom: 0.25rem\">\r\n              <code>now+1w</code> - One week from now\r\n            </div>\r\n            <div style=\"margin-bottom: 0.25rem\">\r\n              <code>+3M</code> - Add 3 months to input date\r\n            </div>\r\n            <div style=\"margin-bottom: 0.25rem\">\r\n              <code>-1d</code> - Subtract 1 day from input date\r\n            </div>\r\n            <div style=\"margin-bottom: 0.25rem\">\r\n              <code>/d</code> - Round input date to start of day\r\n            </div>\r\n            <div><code>now+1y+1M+2d-4h/s</code> - Complex calculation</div>\r\n          </div>\r\n\r\n          <div style=\"margin-top: 1rem; font-size: 0.75rem; color: #666\">\r\n            <strong>Units:</strong> y=years, M=months, w=weeks, d=days, h=hours,\r\n            m=minutes, s=seconds<br />\r\n            <strong>Operations:</strong> +=add, -=subtract, /=round to\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Round Up Option -->\r\n      <div style=\"margin-top: 1rem\">\r\n        <mat-slide-toggle\r\n            matTooltip=\"{{getHintForProperty(editor.step.type, 'roundUp')}}\"\r\n          [(ngModel)]=\"editor.step.properties.roundUp\"\r\n          [disabled]=\"editor.isReadonly\"\r\n          (change)=\"\r\n            updateProperty(\r\n              editor.step.properties,\r\n              'roundUp',\r\n              $event,\r\n              editor.context\r\n            )\r\n          \"\r\n        >\r\n          Round Up\r\n        </mat-slide-toggle>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <div *ngIf=\"editor?.step?.branches\">\r\n      <div\r\n        *ngFor=\"\r\n          let branchName of getBranchNames(editor.step.branches);\r\n          let i = index\r\n        \"\r\n        class=\"branch-row\"\r\n      >\r\n        <div *ngIf=\"showBranch(editor?.step, branchName)\">\r\n          <mat-form-field appearance=\"outline\" class=\"branch-field\">\r\n            <input\r\n              matInput\r\n              [value]=\"branchName\"\r\n              [readonly]=\"editor.isReadonly\"\r\n              placeholder=\"Branch Name\"\r\n              (change)=\"\r\n                renameBranchAtIndex(\r\n                  editor.step.branches,\r\n                  branchName,\r\n                  $any($event.target).value,\r\n                  editor.context\r\n                )\r\n              \"\r\n            />\r\n          </mat-form-field>\r\n          <button\r\n            mat-icon-button\r\n            color=\"warn\"\r\n            (click)=\"\r\n              removeBranch(editor.step.branches, i, $event, editor.context)\r\n            \"\r\n          >\r\n            <mat-icon>delete</mat-icon>\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <button\r\n        mat-stroked-button\r\n        color=\"primary\"\r\n        (click)=\"addBranch(editor.step.branches, editor.context)\"\r\n        *ngIf=\"branchingEnabled(editor.step)\"\r\n      >\r\n        <mat-icon>add</mat-icon>\r\n        Add Branch\r\n      </button>\r\n    </div>\r\n  </div>\r\n</ng-template>\r\n", styles: [".sqd-designer{position:relative;display:flex;width:100%;height:100%}.sqd-designer,.sqd-drag,.sqd-context-menu{font-size:13px;line-height:1em}.sqd-hidden{display:none!important}.sqd-disabled{opacity:.25}.sqd-toolbox,.sqd-toolbox-filter-input{font-size:11px;line-height:1.2em}.sqd-toolbox{position:absolute;top:10px;left:10px;z-index:20;box-sizing:border-box;width:130px;-webkit-user-select:none;user-select:none}.sqd-toolbox-header{position:relative;padding:15px 10px;cursor:pointer}.sqd-toolbox-header-title{display:block;font-size:1.2em;line-height:1em;font-weight:700}.sqd-toolbox-toggle-icon{position:absolute;top:50%;right:10px;width:16px;height:16px;margin:-8px 0 0}.sqd-toolbox-header:hover .sqd-toolbox-toggle-icon{opacity:.6}.sqd-scrollbox{position:relative;overflow:hidden}.sqd-scrollbox-body{position:absolute;top:0;left:0;width:100%;box-sizing:border-box;padding:0 10px}.sqd-toolbox-filter{padding:0 10px 10px}.sqd-toolbox-filter-input{display:block;box-sizing:border-box;padding:6px 8px;outline:none;width:100%}.sqd-toolbox-group-title{text-align:center;padding:5px 0;margin:0 0 10px;width:100%}.sqd-toolbox-item{position:relative;box-sizing:border-box;margin:0 0 10px;width:100%;cursor:move}.sqd-toolbox-item-icon{position:absolute;top:50%;left:5px;margin-top:-10px;width:20px;height:20px}.sqd-toolbox-item-icon-image{width:100%;height:100%}.sqd-toolbox-item-text{position:relative;display:block;padding:10px 10px 10px 30px;white-space:nowrap;text-overflow:ellipsis;overflow:hidden}.sqd-drag{position:absolute;z-index:9999999;pointer-events:none}.sqd-control-bar{position:absolute;bottom:10px;left:10px;z-index:20;padding:8px 0 8px 8px;white-space:nowrap}.sqd-control-bar-button{display:inline-block;width:32px;height:32px;margin-right:8px;cursor:pointer;box-sizing:border-box}.sqd-control-bar-button-icon{width:24px;height:24px;margin:3px 0 0 3px}.sqd-control-bar-button.sqd-disabled .sqd-control-bar-button-icon{opacity:.2}.sqd-smart-editor-toggle{position:absolute;top:0;z-index:29;width:36px;height:64px;border-bottom-left-radius:10px;cursor:pointer}.sqd-smart-editor-toggle-icon{position:absolute;top:50%;left:50%;width:24px;height:24px;margin:-12px 0 0 -12px}.sqd-smart-editor-toggle:hover .sqd-smart-editor-toggle-icon{opacity:.6}.sqd-smart-editor{z-index:30}.sqd-layout-desktop .sqd-smart-editor{position:relative;width:300px}.sqd-layout-desktop .sqd-smart-editor-toggle{right:300px}.sqd-layout-desktop .sqd-smart-editor-toggle.sqd-collapsed{right:0}.sqd-layout-mobile .sqd-smart-editor{position:absolute;inset:0 0 0 41px}.sqd-layout-mobile .sqd-smart-editor-toggle{left:5px}.sqd-layout-mobile .sqd-smart-editor-toggle.sqd-collapsed{left:auto;right:0}.sqd-context-menu{position:absolute;z-index:2000000000;overflow:hidden;padding:5px}.sqd-context-menu-group,.sqd-context-menu-item{width:130px;padding:8px 10px;white-space:nowrap;text-overflow:ellipsis;overflow:hidden}.sqd-context-menu-group{font-size:11px;line-height:1em}.sqd-context-menu-item{cursor:pointer;transition:background 70ms}.sqd-workspace{flex:1;position:relative;display:block;-webkit-user-select:none;user-select:none}.sqd-workspace-canvas{position:absolute;top:0;left:0;cursor:move}.sqd-label-text{text-anchor:middle;dominant-baseline:central}.sqd-placeholder .sqd-placeholder-rect{transition:fill .1s}.sqd-step-task-text{text-anchor:left;dominant-baseline:central}.sqd-theme-light .sqd-toolbox{background:#fff;box-shadow:0 0 8px #00000026,0 2px 4px #00000026;border:none;border-radius:10px}.sqd-theme-light .sqd-toolbox-header-title{color:#000}.sqd-theme-light .sqd-toolbox-filter-input{background:#fff;color:#000;border:1px solid #c3c3c3;border-radius:10px}.sqd-theme-light .sqd-toolbox-filter-input:focus{border-color:#939393}.sqd-theme-light .sqd-toolbox-group-title{color:#000;background:#e5e5e5;border-radius:10px}.sqd-theme-light .sqd-toolbox-item{color:#000;border:1px solid #c3c3c3;box-shadow:0 2px 2px #00000026;background:#fff;border-radius:5px}.sqd-theme-light .sqd-toolbox-item:hover{border-color:#939393;background:#fff}.sqd-theme-light .sqd-toolbox-item .sqd-toolbox-item-icon.sqd-no-icon{background:#c6c6c6;border-radius:4px}.sqd-theme-light .sqd-control-bar{background:#fff;box-shadow:0 0 8px #00000026,0 2px 4px #00000026;border:none;border-radius:10px}.sqd-theme-light .sqd-control-bar-button{border:1px solid #c3c3c3;background:#fff;border-radius:5px}.sqd-theme-light .sqd-control-bar-button:hover{border-color:#939393;background:#fff}.sqd-theme-light .sqd-control-bar-button .sqd-icon-path{fill:#000}.sqd-theme-light .sqd-control-bar-button.sqd-delete .sqd-icon-path{fill:#e01a24}.sqd-theme-light .sqd-smart-editor,.sqd-theme-light .sqd-smart-editor-toggle{background:#fff;box-shadow:0 0 8px #00000026}.sqd-theme-light.sqd-context-menu{background:#fff;box-shadow:0 0 8px #0003;border:none;border-radius:4px}.sqd-theme-light .sqd-context-menu-group{color:#888}.sqd-theme-light .sqd-context-menu-item{color:#000;border-radius:4px}.sqd-theme-light .sqd-context-menu-item:hover{background:#eee}.sqd-theme-light.sqd-designer{background:#f9f9f9}.sqd-theme-light .sqd-line-grid-path{stroke:#e3e3e3;stroke-width:1}.sqd-theme-light .sqd-join{stroke-width:2;stroke:#000}.sqd-theme-light .sqd-region{stroke:#cecece;stroke-width:2;stroke-dasharray:3}.sqd-theme-light .sqd-region.sqd-selected{stroke:#ed4800;stroke-width:2;stroke-dasharray:0}.sqd-theme-light .sqd-placeholder .sqd-placeholder-rect{fill:#d8d8d8;stroke:#6a6a6a;stroke-width:1;stroke-dasharray:3}.sqd-theme-light .sqd-placeholder.sqd-hover .sqd-placeholder-rect{fill:#ed4800}.sqd-theme-light .sqd-placeholder-icon-path{fill:#2b2b2b}.sqd-theme-light .sqd-placeholder.sqd-hover .sqd-placeholder-icon-path{fill:#fff}.sqd-theme-light .sqd-validation-error{fill:#ffa200}.sqd-theme-light .sqd-validation-error-icon-path{fill:#000}.sqd-theme-light .sqd-root-start-stop-circle{fill:#2c18df}.sqd-theme-light .sqd-root-start-stop-icon{fill:#fff}.sqd-theme-light .sqd-step-task .sqd-step-task-rect{fill:#fff;stroke-width:1;stroke:#c3c3c3;filter:drop-shadow(0 1.5px 1.5px rgba(0,0,0,.15))}.sqd-theme-light .sqd-step-task .sqd-step-task-rect.sqd-selected{stroke:#ed4800;stroke-width:2}.sqd-theme-light .sqd-step-task .sqd-step-task-text{fill:#000}.sqd-theme-light .sqd-step-task .sqd-step-task-empty-icon{fill:#c6c6c6}.sqd-theme-light .sqd-step-task .sqd-input{fill:#fff;stroke-width:2;stroke:#000}.sqd-theme-light .sqd-step-task .sqd-output{fill:#000;stroke-width:0}.sqd-theme-light .sqd-step-switch>.sqd-label-primary>.sqd-label-text{fill:#fff}.sqd-theme-light .sqd-step-switch>.sqd-label-primary>.sqd-label-rect{fill:#2411db;stroke-width:0}.sqd-theme-light .sqd-step-switch>.sqd-label-secondary>.sqd-label-rect{fill:#000;stroke-width:0}.sqd-theme-light .sqd-step-switch>.sqd-label-secondary>.sqd-label-text{fill:#fff}.sqd-theme-light .sqd-step-switch>g>.sqd-input{fill:#fff;stroke-width:2;stroke:#000}.sqd-theme-light .sqd-step-container>.sqd-label>.sqd-label-text{fill:#fff}.sqd-theme-light .sqd-step-container>.sqd-label>.sqd-label-rect{fill:#2411db;stroke-width:0}.sqd-theme-light .sqd-step-container>g>.sqd-input{fill:#fff;stroke-width:2;stroke:#000}.sqd-theme-dark .sqd-toolbox{background:#3f3f3f;box-shadow:none;border:none;border-radius:10px}.sqd-theme-dark .sqd-toolbox-header-title{color:#fff}.sqd-theme-dark .sqd-toolbox-filter-input{background:#242424;color:#fff;border:none;border-radius:10px}.sqd-theme-dark .sqd-toolbox-filter-input:focus{border-color:#939393}.sqd-theme-dark .sqd-toolbox-group-title{color:#fff;background:#242424;border-radius:10px}.sqd-theme-dark .sqd-toolbox-item{color:#000;border:none;box-shadow:none;background:#c6c6c6;border-radius:5px}.sqd-theme-dark .sqd-toolbox-item:hover{border-color:none;background:#d3d3d3}.sqd-theme-dark .sqd-toolbox-item .sqd-toolbox-item-icon.sqd-no-icon{background:#c6c6c6;border-radius:4px}.sqd-theme-dark .sqd-control-bar{background:#3f3f3f;box-shadow:none;border:none;border-radius:10px}.sqd-theme-dark .sqd-control-bar-button{border:none;background:#c6c6c6;border-radius:5px}.sqd-theme-dark .sqd-control-bar-button:hover{border-color:#939393;background:#d3d3d3}.sqd-theme-dark .sqd-control-bar-button .sqd-icon-path{fill:#000}.sqd-theme-dark .sqd-control-bar-button.sqd-delete .sqd-icon-path{fill:#e01a24}.sqd-theme-dark .sqd-smart-editor{background:#3f3f3f;box-shadow:none}.sqd-theme-dark .sqd-smart-editor-toggle{background:#6f6f6f;box-shadow:none}.sqd-theme-dark.sqd-context-menu{background:#3f3f3f;box-shadow:0 0 8px #0003;border:none;border-radius:4px}.sqd-theme-dark .sqd-context-menu-group{color:#ccc}.sqd-theme-dark .sqd-context-menu-item{color:#fff;border-radius:4px}.sqd-theme-dark .sqd-context-menu-item:hover{background:#525252}.sqd-theme-dark.sqd-designer{background:#1f1f1f}.sqd-theme-dark .sqd-line-grid-path{stroke:#2a2a2a;stroke-width:1}.sqd-theme-dark .sqd-join{stroke-width:2;stroke:#707070}.sqd-theme-dark .sqd-region{stroke:#434343;stroke-width:2;stroke-dasharray:3}.sqd-theme-dark .sqd-region.sqd-selected{stroke:#fff;stroke-width:2;stroke-dasharray:0}.sqd-theme-dark .sqd-placeholder .sqd-placeholder-rect{fill:#0e0e0e;stroke:#6a6a6a;stroke-width:1;stroke-dasharray:3}.sqd-theme-dark .sqd-placeholder.sqd-hover .sqd-placeholder-rect{fill:#ed4800}.sqd-theme-dark .sqd-placeholder-icon-path{fill:#2b2b2b}.sqd-theme-dark .sqd-placeholder.sqd-hover .sqd-placeholder-icon-path{fill:#fff}.sqd-theme-dark .sqd-validation-error{fill:#ffa200}.sqd-theme-dark .sqd-validation-error-icon-path{fill:#000}.sqd-theme-dark .sqd-root-start-stop-circle{fill:#2c18df}.sqd-theme-dark .sqd-root-start-stop-icon{fill:#fff}.sqd-theme-dark .sqd-step-task .sqd-step-task-rect{fill:#c6c6c6;stroke-width:1;stroke:none;filter:drop-shadow(0 1.5px 1.5px rgba(0,0,0,.15))}.sqd-theme-dark .sqd-step-task .sqd-step-task-rect.sqd-selected{stroke:#fff;stroke-width:2}.sqd-theme-dark .sqd-step-task .sqd-step-task-text{fill:#000}.sqd-theme-dark .sqd-step-task .sqd-step-task-empty-icon{fill:#c6c6c6}.sqd-theme-dark .sqd-step-task .sqd-input{fill:#c6c6c6;stroke-width:2;stroke:#707070}.sqd-theme-dark .sqd-step-task .sqd-output{fill:#707070;stroke-width:0}.sqd-theme-dark .sqd-step-switch>.sqd-label-primary>.sqd-label-text{fill:#fff}.sqd-theme-dark .sqd-step-switch>.sqd-label-primary>.sqd-label-rect{fill:#2411db;stroke-width:0}.sqd-theme-dark .sqd-step-switch>.sqd-label-secondary>.sqd-label-rect{fill:#000;stroke-width:0}.sqd-theme-dark .sqd-step-switch>.sqd-label-secondary>.sqd-label-text{fill:#fff}.sqd-theme-dark .sqd-step-switch>g>.sqd-input{fill:#c6c6c6;stroke-width:2;stroke:#707070}.sqd-theme-dark .sqd-step-container>.sqd-label>.sqd-label-text{fill:#fff}.sqd-theme-dark .sqd-step-container>.sqd-label>.sqd-label-rect{fill:#2411db;stroke-width:0}.sqd-theme-dark .sqd-step-container>g>.sqd-input{fill:#c6c6c6;stroke-width:2;stroke:#707070}.dark-theme .sqd-toolbox-item-text,.dark-theme .mdc-text-field--filled:not(.mdc-text-field--disabled),.dark-theme .mdc-text-field{background-color:var(--theme-background)!important;color:var(--theme-primary-text)!important}.dark-theme .sqd-toolbox-group-title{background-color:var(--theme-background)!important;color:var(--theme-primary-text)!important}.dark-theme .sqd-toolbox-item-text{border-radius:5px;border:1px solid var(--theme-primary-text)!important}.sqd-theme-dark .sqd-toolbox-item{box-shadow:0 3px 3px #00000059!important}.dark-theme .mdc-switch--unselected .mdc-switch__icon,.dark-theme .mdc-switch--selected .mdc-switch__icon{fill:var(--theme-background)!important}.dark-theme .mdc-switch--unselected .mdc-switch__track:before,.dark-theme .mdc-switch--unselected .mdc-switch__track:after{background-color:var(--theme-background)!important}.dark-theme .mdc-switch--selected .mdc-switch__track:before,.dark-theme .mdc-switch--selected .mdc-switch__track:after{background-color:var(--theme-primary)!important}.dark-theme .action-buttons{background-color:var(--theme-background);color:var(--theme-primary)!important;border:1px solid var(--theme-primary)!important}.dark-theme .action-buttons:hover{background-color:var(--theme-primary)!important;color:#fff;border:1px solid var(--theme-primary)!important}.sqd-theme-dark.sqd-designer,.dark-theme .sqd-workspace,.dark-theme #autosaveControls{background-color:#000}.dark-theme .transform-name{color:var(--theme-primary-text)!important}.dark-theme .sqd-theme-dark .sqd-step-switch>.sqd-label-secondary>.sqd-label-rect{fill:var(--theme-primary)!important;color:var(--theme-primary-text)!important}.dark-theme .sqd-theme-dark .sqd-step-task .sqd-step-task-rect{fill:var(--theme-background)!important}.dark-theme .sqd-theme-dark .sqd-step-task .sqd-step-task-text{fill:var(--theme-primary-text)!important}.dark-theme .mdc-switch__shadow{background-color:var(--theme-primary)!important}.dark-theme .sqd-theme-dark .sqd-toolbox-filter-input{background-color:var(--theme-background)!important;color:var(--theme-primary-text)!important}.action-buttons{color:var(--theme-primary)!important;border-radius:.5rem;font-family:Poppins;padding:12px;border:1px solid var(--theme-primary)!important;display:inline-flex;align-items:center;gap:4px}.action-buttons:hover{background-color:var(--theme-primary)!important;color:var(--theme-primary-text)!important;border:1px solid var(--theme-primary)!important}.section-title{color:var(--theme-secondary)!important}.mat-mdc-card-title{font-family:Poppins!important;color:var(--theme-primary-text)!important}.sqd-toolbox-item-icon{z-index:999}@font-face{font-family:Poppins;src:url(data:font/ttf;base64,) format(\"truetype\");font-weight:400;font-style:normal;font-display:swap}.spinner-container{display:flex;justify-content:center;align-items:center;border:none;height:75vh}.sqd-theme-light .sqd-step-task .sqd-step-task-rect.sqd-selected{stroke:var(--theme-primary)!important}.sqd-designer-angular{height:92vh}.sqd-smart-editor-toggle{height:62px!important}.sqd-layout-desktop .sqd-smart-editor-toggle{right:435px}.sqd-editor-angular{padding:10px}.sqd-layout-desktop .sqd-smart-editor{position:relative;width:435px}.sqd-toolbox{margin-top:55px;width:243px;font-family:Poppins!important}.main-content{margin:0!important;padding:0!important;border-radius:8px;background-color:var(--theme-background);width:100%!important;font-family:Poppins!important}.mdc-text-field{background-color:var(--theme-background)!important;border-radius:.5rem!important;border:1px solid var(--theme-primary-text)!important;text-decoration:none!important;font-family:Poppins!important;color:var(--theme-primary-text)!important}.sqd-toolbox-group-title{color:var(--theme-primary-text)!important;background-color:var(--theme-background)!important;font-size:larger;font-weight:600px;font-family:Poppins!important;text-decoration:underline!important}.mdc-switch--unselected .mdc-switch__track:before,.mdc-switch--unselected .mdc-switch__track:after{background-color:var(--theme-background)!important;font-family:Poppins!important;border-color:var(--theme-primary-text)!important;border-width:1px!important}.mdc-switch--selected .mdc-switch__track:before,.mdc-switch--selected .mdc-switch__track:after{background-color:var(--theme-secondary)!important;font-family:Poppins!important;border-color:var(--theme-primary-text)!important;border-width:1px!important}.mdc-switch--unselected .mdc-switch__icon{fill:var(--theme-background)!important}.mdc-switch--selected .mdc-switch__icon{fill:var(--theme-secondary)!important}.mdc-text-field--focused{border:1px solid var(--theme-primary)!important}.sqd-toolbox-body{text-decoration:none!important;font-family:Poppins!important}.sqd-toolbox-filter-input{background-color:var(--theme-background)!important;border-radius:.5rem!important;border:1px solid var(--theme-primary-text)!important;text-decoration:none!important;font-family:Poppins!important}.mdc-line-ripple:before,.mdc-line-ripple:after{border-bottom:none!important}.sqd-workspace,.sqd-smart-editor-toggle,.sqd-smart-editor{margin-top:65px}.transform-name{color:var(--theme-primary-text)!important;margin-left:calc(13vw - 10px)}#autosaveControls{position:absolute;top:2px;left:11px;right:11px;z-index:1;display:flex;align-items:center;gap:1rem;height:30px;padding:15px;margin-bottom:1rem;color:var(--theme-primary)!important;font-family:Poppins,sans-serif;box-shadow:0 2px 4px #0003;border-radius:4px}.sync-controls{display:flex;align-items:center;gap:1rem}.autosave-status{display:flex;align-items:center;gap:.5rem}.sqd-theme-light .sqd-step-switch>.sqd-label-primary>.sqd-label-rect{fill:var(--theme-secondary)!important}.sqd-theme-light .sqd-step-switch>.sqd-label-secondary>.sqd-label-rect{fill:var(--theme-primary)!important}.dark-theme .sqd-theme-dark .sqd-step-switch>.sqd-label-primary>.sqd-label-rect{fill:var(--theme-secondary)!important}.sqd-root-start-stop-circle{fill:var(--theme-secondary)!important}.transform-description{line-height:18px}.input-with-editor-container{display:flex;align-items:flex-start;gap:12px;margin-top:1rem;width:100%}.input-field{flex:1;min-width:0}.editor-button{flex-shrink:0;width:48px;height:48px;margin-top:4px;border-radius:50%;display:flex;align-items:center;justify-content:center;transition:all .2s ease-in-out}.editor-button:hover{transform:scale(1.1)}.editor-button:disabled{opacity:.6;transform:none}.editor-button mat-icon{font-size:20px;width:20px;height:20px}@media (max-width: 768px){.input-with-editor-container{gap:8px}.editor-button{width:44px;height:44px}}.dark-theme .editor-button{color:#54c0e8!important}.dark-theme .editor-button:hover{background-color:#54c0e81a!important;color:#54c0e8!important}.dark-theme .editor-button:disabled{color:#666!important}.input-with-editor-container+.input-with-editor-container{margin-top:1rem}\n"] }]
        }], ctorParameters: () => [{ type: i1$2.Router }, { type: i1.MatDialog }, { type: i1.MatDialog }, { type: SailPointSDKService }, { type: AutoSaveService }, { type: i4.MatSnackBar }, { type: ThemeService }, { type: i0.ChangeDetectorRef }], propDecorators: { transform: [{
                type: Input
            }] } });

class TransformsComponent {
    dialog;
    sdk;
    router;
    snackBar;
    title = 'Transforms';
    transforms = [];
    dataSource = new MatTableDataSource();
    displayedColumns = ['id', 'name', 'type', 'internal', 'actions'];
    loading = false;
    hasDataLoaded = false; // ✅ Track data load state
    transform;
    editing = false;
    transformBuilder;
    constructor(dialog, sdk, router, snackBar) {
        this.dialog = dialog;
        this.sdk = sdk;
        this.router = router;
        this.snackBar = snackBar;
    }
    ngOnInit() {
        void this.loadTransforms();
    }
    async loadTransforms() {
        this.loading = true;
        this.hasDataLoaded = false;
        try {
            const response = await this.sdk.listTransforms();
            this.transforms =
                response.data.filter((transform) => transform.internal !== true) ?? [];
            this.dataSource = new MatTableDataSource(this.transforms);
            this.hasDataLoaded = true;
        }
        catch (error) {
            const message = error instanceof Error ? error.message : String(error);
            this.openMessageDialog(`Error loading transforms: ${message}`, 'Error');
        }
        finally {
            this.loading = false;
        }
    }
    openMessageDialog(errorMessage, title) {
        this.dialog.open(GenericDialogComponent, {
            data: {
                title: title,
                message: errorMessage,
            },
        });
    }
    applyFilter(event) {
        const filterValue = event.target.value;
        this.dataSource.filter = filterValue.trim().toLowerCase();
    }
    // async onEdit(transform: any) {
    //   await this.router.navigate(['/transform-builder'], { state: { transform } })
    // }
    confirmBack() {
        if (this.transformBuilder?.hasUnsavedChanges) {
            const dialogRef = this.dialog.open(GenericDialogComponent, {
                width: '400px',
                data: {
                    title: 'Unsaved Changes',
                    message: 'You have unsaved changes. Do you want to save them before leaving?',
                    confirmText: 'Save',
                    cancelText: 'Discard',
                    neutralText: 'Cancel',
                },
            });
            dialogRef.afterClosed().subscribe((result) => {
                if (result === 'confirm') {
                    void this.transformBuilder?.saveToCloud?.();
                    this.editing = false;
                }
                else if (result === 'discard') {
                    this.transformBuilder?.discardLocalChanges();
                    this.editing = false;
                }
            });
        }
        else {
            this.editing = false;
        }
    }
    onEdit(transform) {
        if (transform?.type === 'usernameGenerator') {
            this.dialog.open(GenericDialogComponent, {
                data: {
                    title: 'Not Supported',
                    message: 'The usernameGenerator transform type cannot be edited using the transform builder.',
                },
            });
            return;
        }
        this.transform = transform;
        this.editing = true;
    }
    onDelete(transform) {
        this.dialog
            .open(GenericDialogComponent, {
            data: {
                title: 'Delete Transform',
                message: `Are you sure you want to delete the transform "${transform.name}"? This action cannot be undone.`,
                showCancel: true,
                cancelText: 'Cancel',
                confirmText: 'Yes',
                isConfirmation: true,
            },
        })
            .afterClosed()
            .subscribe((confirmed) => {
            if (confirmed) {
                console.log('Deleting transform:', transform);
                const transformDeleteRequest = {
                    id: transform.id,
                };
                void this.sdk.deleteTransform(transformDeleteRequest).then(() => {
                    this.transforms =
                        this.transforms.filter((transformFilter) => transformFilter.internal !== true &&
                            transformFilter.id !== transform.id) ?? [];
                    this.dataSource = new MatTableDataSource(this.transforms);
                    this.hasDataLoaded = true;
                    this.snackBar.open(`${transform.name} transform successfully deleted`, 'Close', { duration: 3000 });
                }).catch((error) => {
                    const message = error instanceof Error ? error.message : String(error);
                    this.openMessageDialog(`Error deleting transform: ${message}`, 'Error');
                }).finally(() => {
                    this.loading = false;
                });
            }
        });
    }
    /** @nocollapse */ static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: TransformsComponent, deps: [{ token: i1.MatDialog }, { token: SailPointSDKService }, { token: i1$2.Router }, { token: i4.MatSnackBar }], target: i0.ɵɵFactoryTarget.Component });
    /** @nocollapse */ static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "20.1.3", type: TransformsComponent, isStandalone: true, selector: "app-transforms", viewQueries: [{ propertyName: "transformBuilder", first: true, predicate: TransformBuilderComponent, descendants: true }], ngImport: i0, template: "<!-- Filter -->\r\n<div *ngIf=\"!editing\" class=\"transforms-container\">\r\n  <mat-toolbar color=\"primary\">\r\n    <mat-icon>transform</mat-icon>\r\n    <span class=\"toolbar-title\">{{ title }}</span>\r\n  </mat-toolbar>\r\n  <div class=\"content\">\r\n    <!-- Filter Input -->\r\n    <mat-form-field appearance=\"fill\" class=\"custom-fill-field\">\r\n      <mat-label>Filter</mat-label>\r\n      <input\r\n        matInput\r\n        (keyup)=\"applyFilter($event)\"\r\n        placeholder=\"Ex. ium\"\r\n        #input\r\n      />\r\n    </mat-form-field>\r\n    <button\r\n      id=\"new-transform-button\"\r\n      mat-raised-button\r\n      color=\"primary\"\r\n      (click)=\"onEdit(undefined)\"\r\n    >\r\n      Create New\r\n    </button>\r\n    <!-- <button id=\"new-transform-button\" mat-raised-button color=\"primary\" (click)=\"onEdit(undefined)\">Import Transform</button> -->\r\n\r\n    <!-- Spinner -->\r\n    <div *ngIf=\"loading\" class=\"spinner-container\">\r\n      <mat-spinner diameter=\"75\"></mat-spinner>\r\n    </div>\r\n\r\n    <!-- Table -->\r\n    <table\r\n      mat-table\r\n      [dataSource]=\"dataSource\"\r\n      class=\"mat-elevation-z8\"\r\n      *ngIf=\"!loading && transforms.length\"\r\n      width=\"100%\"\r\n    >\r\n      <!-- ID Column -->\r\n      <ng-container matColumnDef=\"id\">\r\n        <th mat-header-cell *matHeaderCellDef>ID</th>\r\n        <td mat-cell *matCellDef=\"let transform\">{{ transform.id }}</td>\r\n      </ng-container>\r\n\r\n      <!-- Name Column -->\r\n      <ng-container matColumnDef=\"name\">\r\n        <th mat-header-cell *matHeaderCellDef>Name</th>\r\n        <td mat-cell *matCellDef=\"let transform\">{{ transform.name }}</td>\r\n      </ng-container>\r\n\r\n      <!-- Type Column -->\r\n      <ng-container matColumnDef=\"type\">\r\n        <th mat-header-cell *matHeaderCellDef>Type</th>\r\n        <td mat-cell *matCellDef=\"let transform\">{{ transform.type }}</td>\r\n      </ng-container>\r\n\r\n      <!-- Internal Column -->\r\n      <ng-container matColumnDef=\"internal\">\r\n        <th mat-header-cell *matHeaderCellDef>Internal</th>\r\n        <td mat-cell *matCellDef=\"let transform\">{{ transform.internal }}</td>\r\n      </ng-container>\r\n\r\n      <!-- Actions Column -->\r\n      <ng-container matColumnDef=\"actions\">\r\n        <th mat-header-cell *matHeaderCellDef>Actions</th>\r\n        <td mat-cell *matCellDef=\"let transform\">\r\n          <button\r\n            id=\"edit-transform-button\"\r\n            mat-raised-button\r\n            color=\"primary\"\r\n            (click)=\"onEdit(transform)\"\r\n          >\r\n            Edit\r\n          </button>\r\n          <button\r\n            id=\"delete-transform-button\"\r\n            mat-raised-button\r\n            color=\"primary\"\r\n            (click)=\"onDelete(transform)\"\r\n          >\r\n            Delete\r\n          </button>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <!-- Header and Rows -->\r\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\r\n\r\n      <!-- No Data Row -->\r\n      <tr class=\"mat-row\" *matNoDataRow>\r\n        <td class=\"mat-cell\" colspan=\"5\">\r\n          No data matching the filter \"{{ input.value }}\"\r\n        </td>\r\n      </tr>\r\n    </table>\r\n\r\n    <!-- Empty State -->\r\n    <div\r\n      *ngIf=\"!loading && hasDataLoaded && transforms.length === 0\"\r\n      class=\"empty-message\"\r\n    >\r\n      No Transforms found.\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div *ngIf=\"editing\" class=\"transform-builder-container\">\r\n  <button id=\"backButton\" mat-button (click)=\"confirmBack()\">Back</button>\r\n  <app-transform-builder [transform]=\"transform\"></app-transform-builder>\r\n</div>\r\n", styles: [".content{padding:24px;flex:1;overflow-y:auto}.toolbar-title{margin-left:16px}#new-transform-button,#edit-transform-button{margin-left:25px;border-radius:.5rem}#edit-transform-button{margin-bottom:0}#delete-transform-button{margin-left:25px;border-radius:.5rem}.transform-builder-container{position:relative}#backButton{position:absolute;top:14px;left:18px;z-index:1000;box-shadow:0 2px 4px #0003;border-radius:.5rem;font-weight:400;font-family:Poppins!important}\n"], dependencies: [{ kind: "ngmodule", type: MatTableModule }, { kind: "component", type: i6$3.MatTable, selector: "mat-table, table[mat-table]", exportAs: ["matTable"] }, { kind: "directive", type: i6$3.MatHeaderCellDef, selector: "[matHeaderCellDef]" }, { kind: "directive", type: i6$3.MatHeaderRowDef, selector: "[matHeaderRowDef]", inputs: ["matHeaderRowDef", "matHeaderRowDefSticky"] }, { kind: "directive", type: i6$3.MatColumnDef, selector: "[matColumnDef]", inputs: ["matColumnDef"] }, { kind: "directive", type: i6$3.MatCellDef, selector: "[matCellDef]" }, { kind: "directive", type: i6$3.MatRowDef, selector: "[matRowDef]", inputs: ["matRowDefColumns", "matRowDefWhen"] }, { kind: "directive", type: i6$3.MatHeaderCell, selector: "mat-header-cell, th[mat-header-cell]" }, { kind: "directive", type: i6$3.MatCell, selector: "mat-cell, td[mat-cell]" }, { kind: "component", type: i6$3.MatHeaderRow, selector: "mat-header-row, tr[mat-header-row]", exportAs: ["matHeaderRow"] }, { kind: "component", type: i6$3.MatRow, selector: "mat-row, tr[mat-row]", exportAs: ["matRow"] }, { kind: "directive", type: i6$3.MatNoDataRow, selector: "ng-template[matNoDataRow]" }, { kind: "ngmodule", type: CommonModule }, { kind: "directive", type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "ngmodule", type: MatProgressSpinnerModule }, { kind: "component", type: i8.MatProgressSpinner, selector: "mat-progress-spinner, mat-spinner", inputs: ["color", "mode", "value", "diameter", "strokeWidth"], exportAs: ["matProgressSpinner"] }, { kind: "ngmodule", type: MatInputModule }, { kind: "directive", type: i8$1.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly", "disabledInteractive"], exportAs: ["matInput"] }, { kind: "component", type: i6$2.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i6$2.MatLabel, selector: "mat-label" }, { kind: "ngmodule", type: MatButtonModule }, { kind: "component", type: i5.MatButton, selector: "    button[matButton], a[matButton], button[mat-button], button[mat-raised-button],    button[mat-flat-button], button[mat-stroked-button], a[mat-button], a[mat-raised-button],    a[mat-flat-button], a[mat-stroked-button]  ", inputs: ["matButton"], exportAs: ["matButton", "matAnchor"] }, { kind: "component", type: TransformBuilderComponent, selector: "app-transform-builder", inputs: ["transform"] }, { kind: "ngmodule", type: MatSnackBarModule }, { kind: "ngmodule", type: MatToolbarModule }, { kind: "component", type: i8$2.MatToolbar, selector: "mat-toolbar", inputs: ["color"], exportAs: ["matToolbar"] }, { kind: "ngmodule", type: MatIconModule }, { kind: "component", type: i6.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }], preserveWhitespaces: true });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "20.1.3", ngImport: i0, type: TransformsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-transforms', standalone: true, imports: [
                        MatTableModule,
                        CommonModule,
                        MatProgressSpinnerModule,
                        MatInputModule,
                        MatButtonModule,
                        TransformBuilderComponent,
                        MatSnackBarModule,
                        MatToolbarModule,
                        MatIconModule,
                    ], template: "<!-- Filter -->\r\n<div *ngIf=\"!editing\" class=\"transforms-container\">\r\n  <mat-toolbar color=\"primary\">\r\n    <mat-icon>transform</mat-icon>\r\n    <span class=\"toolbar-title\">{{ title }}</span>\r\n  </mat-toolbar>\r\n  <div class=\"content\">\r\n    <!-- Filter Input -->\r\n    <mat-form-field appearance=\"fill\" class=\"custom-fill-field\">\r\n      <mat-label>Filter</mat-label>\r\n      <input\r\n        matInput\r\n        (keyup)=\"applyFilter($event)\"\r\n        placeholder=\"Ex. ium\"\r\n        #input\r\n      />\r\n    </mat-form-field>\r\n    <button\r\n      id=\"new-transform-button\"\r\n      mat-raised-button\r\n      color=\"primary\"\r\n      (click)=\"onEdit(undefined)\"\r\n    >\r\n      Create New\r\n    </button>\r\n    <!-- <button id=\"new-transform-button\" mat-raised-button color=\"primary\" (click)=\"onEdit(undefined)\">Import Transform</button> -->\r\n\r\n    <!-- Spinner -->\r\n    <div *ngIf=\"loading\" class=\"spinner-container\">\r\n      <mat-spinner diameter=\"75\"></mat-spinner>\r\n    </div>\r\n\r\n    <!-- Table -->\r\n    <table\r\n      mat-table\r\n      [dataSource]=\"dataSource\"\r\n      class=\"mat-elevation-z8\"\r\n      *ngIf=\"!loading && transforms.length\"\r\n      width=\"100%\"\r\n    >\r\n      <!-- ID Column -->\r\n      <ng-container matColumnDef=\"id\">\r\n        <th mat-header-cell *matHeaderCellDef>ID</th>\r\n        <td mat-cell *matCellDef=\"let transform\">{{ transform.id }}</td>\r\n      </ng-container>\r\n\r\n      <!-- Name Column -->\r\n      <ng-container matColumnDef=\"name\">\r\n        <th mat-header-cell *matHeaderCellDef>Name</th>\r\n        <td mat-cell *matCellDef=\"let transform\">{{ transform.name }}</td>\r\n      </ng-container>\r\n\r\n      <!-- Type Column -->\r\n      <ng-container matColumnDef=\"type\">\r\n        <th mat-header-cell *matHeaderCellDef>Type</th>\r\n        <td mat-cell *matCellDef=\"let transform\">{{ transform.type }}</td>\r\n      </ng-container>\r\n\r\n      <!-- Internal Column -->\r\n      <ng-container matColumnDef=\"internal\">\r\n        <th mat-header-cell *matHeaderCellDef>Internal</th>\r\n        <td mat-cell *matCellDef=\"let transform\">{{ transform.internal }}</td>\r\n      </ng-container>\r\n\r\n      <!-- Actions Column -->\r\n      <ng-container matColumnDef=\"actions\">\r\n        <th mat-header-cell *matHeaderCellDef>Actions</th>\r\n        <td mat-cell *matCellDef=\"let transform\">\r\n          <button\r\n            id=\"edit-transform-button\"\r\n            mat-raised-button\r\n            color=\"primary\"\r\n            (click)=\"onEdit(transform)\"\r\n          >\r\n            Edit\r\n          </button>\r\n          <button\r\n            id=\"delete-transform-button\"\r\n            mat-raised-button\r\n            color=\"primary\"\r\n            (click)=\"onDelete(transform)\"\r\n          >\r\n            Delete\r\n          </button>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <!-- Header and Rows -->\r\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\r\n\r\n      <!-- No Data Row -->\r\n      <tr class=\"mat-row\" *matNoDataRow>\r\n        <td class=\"mat-cell\" colspan=\"5\">\r\n          No data matching the filter \"{{ input.value }}\"\r\n        </td>\r\n      </tr>\r\n    </table>\r\n\r\n    <!-- Empty State -->\r\n    <div\r\n      *ngIf=\"!loading && hasDataLoaded && transforms.length === 0\"\r\n      class=\"empty-message\"\r\n    >\r\n      No Transforms found.\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div *ngIf=\"editing\" class=\"transform-builder-container\">\r\n  <button id=\"backButton\" mat-button (click)=\"confirmBack()\">Back</button>\r\n  <app-transform-builder [transform]=\"transform\"></app-transform-builder>\r\n</div>\r\n", styles: [".content{padding:24px;flex:1;overflow-y:auto}.toolbar-title{margin-left:16px}#new-transform-button,#edit-transform-button{margin-left:25px;border-radius:.5rem}#edit-transform-button{margin-bottom:0}#delete-transform-button{margin-left:25px;border-radius:.5rem}.transform-builder-container{position:relative}#backButton{position:absolute;top:14px;left:18px;z-index:1000;box-shadow:0 2px 4px #0003;border-radius:.5rem;font-weight:400;font-family:Poppins!important}\n"] }]
        }], ctorParameters: () => [{ type: i1.MatDialog }, { type: SailPointSDKService }, { type: i1$2.Router }, { type: i4.MatSnackBar }], propDecorators: { transformBuilder: [{
                type: ViewChild,
                args: [TransformBuilderComponent]
            }] } });

/*
 * Public API Surface of sailpoint-components
 */

/**
 * Generated bundle index. Do not edit.
 */

export { IdentitiesComponent, IdentityDetailViewComponent, REPORT_EXAMPLE_ROUTES, ReportDataService, ReportExampleComponent, SailPointSDKService, SailpointComponentsComponent, SailpointComponentsService, ThemePickerComponent, ThemeService, TransformBuilderComponent, TransformsComponent, createDefinitionFromTransform, deserializeToStep, rootModel, serializeStep };
//# sourceMappingURL=sailpoint-components.mjs.map
